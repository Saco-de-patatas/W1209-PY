
Build/W1209PY32.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <__gnu_thumb1_case_uqi>:
 80000c0:	b402      	push	{r1}
 80000c2:	4671      	mov	r1, lr
 80000c4:	0849      	lsrs	r1, r1, #1
 80000c6:	0049      	lsls	r1, r1, #1
 80000c8:	5c09      	ldrb	r1, [r1, r0]
 80000ca:	0049      	lsls	r1, r1, #1
 80000cc:	448e      	add	lr, r1
 80000ce:	bc02      	pop	{r1}
 80000d0:	4770      	bx	lr
 80000d2:	46c0      	nop			@ (mov r8, r8)

080000d4 <__gnu_thumb1_case_uhi>:
 80000d4:	b403      	push	{r0, r1}
 80000d6:	4671      	mov	r1, lr
 80000d8:	0849      	lsrs	r1, r1, #1
 80000da:	0040      	lsls	r0, r0, #1
 80000dc:	0049      	lsls	r1, r1, #1
 80000de:	5a09      	ldrh	r1, [r1, r0]
 80000e0:	0049      	lsls	r1, r1, #1
 80000e2:	448e      	add	lr, r1
 80000e4:	bc03      	pop	{r0, r1}
 80000e6:	4770      	bx	lr

080000e8 <__udivsi3>:
 80000e8:	2200      	movs	r2, #0
 80000ea:	0843      	lsrs	r3, r0, #1
 80000ec:	428b      	cmp	r3, r1
 80000ee:	d374      	bcc.n	80001da <__udivsi3+0xf2>
 80000f0:	0903      	lsrs	r3, r0, #4
 80000f2:	428b      	cmp	r3, r1
 80000f4:	d35f      	bcc.n	80001b6 <__udivsi3+0xce>
 80000f6:	0a03      	lsrs	r3, r0, #8
 80000f8:	428b      	cmp	r3, r1
 80000fa:	d344      	bcc.n	8000186 <__udivsi3+0x9e>
 80000fc:	0b03      	lsrs	r3, r0, #12
 80000fe:	428b      	cmp	r3, r1
 8000100:	d328      	bcc.n	8000154 <__udivsi3+0x6c>
 8000102:	0c03      	lsrs	r3, r0, #16
 8000104:	428b      	cmp	r3, r1
 8000106:	d30d      	bcc.n	8000124 <__udivsi3+0x3c>
 8000108:	22ff      	movs	r2, #255	@ 0xff
 800010a:	0209      	lsls	r1, r1, #8
 800010c:	ba12      	rev	r2, r2
 800010e:	0c03      	lsrs	r3, r0, #16
 8000110:	428b      	cmp	r3, r1
 8000112:	d302      	bcc.n	800011a <__udivsi3+0x32>
 8000114:	1212      	asrs	r2, r2, #8
 8000116:	0209      	lsls	r1, r1, #8
 8000118:	d065      	beq.n	80001e6 <__udivsi3+0xfe>
 800011a:	0b03      	lsrs	r3, r0, #12
 800011c:	428b      	cmp	r3, r1
 800011e:	d319      	bcc.n	8000154 <__udivsi3+0x6c>
 8000120:	e000      	b.n	8000124 <__udivsi3+0x3c>
 8000122:	0a09      	lsrs	r1, r1, #8
 8000124:	0bc3      	lsrs	r3, r0, #15
 8000126:	428b      	cmp	r3, r1
 8000128:	d301      	bcc.n	800012e <__udivsi3+0x46>
 800012a:	03cb      	lsls	r3, r1, #15
 800012c:	1ac0      	subs	r0, r0, r3
 800012e:	4152      	adcs	r2, r2
 8000130:	0b83      	lsrs	r3, r0, #14
 8000132:	428b      	cmp	r3, r1
 8000134:	d301      	bcc.n	800013a <__udivsi3+0x52>
 8000136:	038b      	lsls	r3, r1, #14
 8000138:	1ac0      	subs	r0, r0, r3
 800013a:	4152      	adcs	r2, r2
 800013c:	0b43      	lsrs	r3, r0, #13
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x5e>
 8000142:	034b      	lsls	r3, r1, #13
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b03      	lsrs	r3, r0, #12
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x6a>
 800014e:	030b      	lsls	r3, r1, #12
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0ac3      	lsrs	r3, r0, #11
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x76>
 800015a:	02cb      	lsls	r3, r1, #11
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0a83      	lsrs	r3, r0, #10
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x82>
 8000166:	028b      	lsls	r3, r1, #10
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0a43      	lsrs	r3, r0, #9
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x8e>
 8000172:	024b      	lsls	r3, r1, #9
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a03      	lsrs	r3, r0, #8
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x9a>
 800017e:	020b      	lsls	r3, r1, #8
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	d2cd      	bcs.n	8000122 <__udivsi3+0x3a>
 8000186:	09c3      	lsrs	r3, r0, #7
 8000188:	428b      	cmp	r3, r1
 800018a:	d301      	bcc.n	8000190 <__udivsi3+0xa8>
 800018c:	01cb      	lsls	r3, r1, #7
 800018e:	1ac0      	subs	r0, r0, r3
 8000190:	4152      	adcs	r2, r2
 8000192:	0983      	lsrs	r3, r0, #6
 8000194:	428b      	cmp	r3, r1
 8000196:	d301      	bcc.n	800019c <__udivsi3+0xb4>
 8000198:	018b      	lsls	r3, r1, #6
 800019a:	1ac0      	subs	r0, r0, r3
 800019c:	4152      	adcs	r2, r2
 800019e:	0943      	lsrs	r3, r0, #5
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xc0>
 80001a4:	014b      	lsls	r3, r1, #5
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0903      	lsrs	r3, r0, #4
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xcc>
 80001b0:	010b      	lsls	r3, r1, #4
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	08c3      	lsrs	r3, r0, #3
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xd8>
 80001bc:	00cb      	lsls	r3, r1, #3
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0883      	lsrs	r3, r0, #2
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xe4>
 80001c8:	008b      	lsls	r3, r1, #2
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0843      	lsrs	r3, r0, #1
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xf0>
 80001d4:	004b      	lsls	r3, r1, #1
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	1a41      	subs	r1, r0, r1
 80001dc:	d200      	bcs.n	80001e0 <__udivsi3+0xf8>
 80001de:	4601      	mov	r1, r0
 80001e0:	4152      	adcs	r2, r2
 80001e2:	4610      	mov	r0, r2
 80001e4:	4770      	bx	lr
 80001e6:	e7ff      	b.n	80001e8 <__udivsi3+0x100>
 80001e8:	b501      	push	{r0, lr}
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f8f0 	bl	80003d0 <__aeabi_idiv0>
 80001f0:	bd02      	pop	{r1, pc}
 80001f2:	46c0      	nop			@ (mov r8, r8)

080001f4 <__aeabi_uidivmod>:
 80001f4:	2900      	cmp	r1, #0
 80001f6:	d0f7      	beq.n	80001e8 <__udivsi3+0x100>
 80001f8:	e776      	b.n	80000e8 <__udivsi3>
 80001fa:	4770      	bx	lr

080001fc <__divsi3>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	430b      	orrs	r3, r1
 8000200:	d47f      	bmi.n	8000302 <__divsi3+0x106>
 8000202:	2200      	movs	r2, #0
 8000204:	0843      	lsrs	r3, r0, #1
 8000206:	428b      	cmp	r3, r1
 8000208:	d374      	bcc.n	80002f4 <__divsi3+0xf8>
 800020a:	0903      	lsrs	r3, r0, #4
 800020c:	428b      	cmp	r3, r1
 800020e:	d35f      	bcc.n	80002d0 <__divsi3+0xd4>
 8000210:	0a03      	lsrs	r3, r0, #8
 8000212:	428b      	cmp	r3, r1
 8000214:	d344      	bcc.n	80002a0 <__divsi3+0xa4>
 8000216:	0b03      	lsrs	r3, r0, #12
 8000218:	428b      	cmp	r3, r1
 800021a:	d328      	bcc.n	800026e <__divsi3+0x72>
 800021c:	0c03      	lsrs	r3, r0, #16
 800021e:	428b      	cmp	r3, r1
 8000220:	d30d      	bcc.n	800023e <__divsi3+0x42>
 8000222:	22ff      	movs	r2, #255	@ 0xff
 8000224:	0209      	lsls	r1, r1, #8
 8000226:	ba12      	rev	r2, r2
 8000228:	0c03      	lsrs	r3, r0, #16
 800022a:	428b      	cmp	r3, r1
 800022c:	d302      	bcc.n	8000234 <__divsi3+0x38>
 800022e:	1212      	asrs	r2, r2, #8
 8000230:	0209      	lsls	r1, r1, #8
 8000232:	d065      	beq.n	8000300 <__divsi3+0x104>
 8000234:	0b03      	lsrs	r3, r0, #12
 8000236:	428b      	cmp	r3, r1
 8000238:	d319      	bcc.n	800026e <__divsi3+0x72>
 800023a:	e000      	b.n	800023e <__divsi3+0x42>
 800023c:	0a09      	lsrs	r1, r1, #8
 800023e:	0bc3      	lsrs	r3, r0, #15
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__divsi3+0x4c>
 8000244:	03cb      	lsls	r3, r1, #15
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	0b83      	lsrs	r3, r0, #14
 800024c:	428b      	cmp	r3, r1
 800024e:	d301      	bcc.n	8000254 <__divsi3+0x58>
 8000250:	038b      	lsls	r3, r1, #14
 8000252:	1ac0      	subs	r0, r0, r3
 8000254:	4152      	adcs	r2, r2
 8000256:	0b43      	lsrs	r3, r0, #13
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x64>
 800025c:	034b      	lsls	r3, r1, #13
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b03      	lsrs	r3, r0, #12
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x70>
 8000268:	030b      	lsls	r3, r1, #12
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0ac3      	lsrs	r3, r0, #11
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x7c>
 8000274:	02cb      	lsls	r3, r1, #11
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0a83      	lsrs	r3, r0, #10
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x88>
 8000280:	028b      	lsls	r3, r1, #10
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0a43      	lsrs	r3, r0, #9
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x94>
 800028c:	024b      	lsls	r3, r1, #9
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a03      	lsrs	r3, r0, #8
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0xa0>
 8000298:	020b      	lsls	r3, r1, #8
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	d2cd      	bcs.n	800023c <__divsi3+0x40>
 80002a0:	09c3      	lsrs	r3, r0, #7
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d301      	bcc.n	80002aa <__divsi3+0xae>
 80002a6:	01cb      	lsls	r3, r1, #7
 80002a8:	1ac0      	subs	r0, r0, r3
 80002aa:	4152      	adcs	r2, r2
 80002ac:	0983      	lsrs	r3, r0, #6
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d301      	bcc.n	80002b6 <__divsi3+0xba>
 80002b2:	018b      	lsls	r3, r1, #6
 80002b4:	1ac0      	subs	r0, r0, r3
 80002b6:	4152      	adcs	r2, r2
 80002b8:	0943      	lsrs	r3, r0, #5
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xc6>
 80002be:	014b      	lsls	r3, r1, #5
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0903      	lsrs	r3, r0, #4
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xd2>
 80002ca:	010b      	lsls	r3, r1, #4
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	08c3      	lsrs	r3, r0, #3
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xde>
 80002d6:	00cb      	lsls	r3, r1, #3
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0883      	lsrs	r3, r0, #2
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xea>
 80002e2:	008b      	lsls	r3, r1, #2
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0843      	lsrs	r3, r0, #1
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xf6>
 80002ee:	004b      	lsls	r3, r1, #1
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	1a41      	subs	r1, r0, r1
 80002f6:	d200      	bcs.n	80002fa <__divsi3+0xfe>
 80002f8:	4601      	mov	r1, r0
 80002fa:	4152      	adcs	r2, r2
 80002fc:	4610      	mov	r0, r2
 80002fe:	4770      	bx	lr
 8000300:	e05d      	b.n	80003be <__divsi3+0x1c2>
 8000302:	0fca      	lsrs	r2, r1, #31
 8000304:	d000      	beq.n	8000308 <__divsi3+0x10c>
 8000306:	4249      	negs	r1, r1
 8000308:	1003      	asrs	r3, r0, #32
 800030a:	d300      	bcc.n	800030e <__divsi3+0x112>
 800030c:	4240      	negs	r0, r0
 800030e:	4053      	eors	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	469c      	mov	ip, r3
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d32d      	bcc.n	8000376 <__divsi3+0x17a>
 800031a:	0a03      	lsrs	r3, r0, #8
 800031c:	428b      	cmp	r3, r1
 800031e:	d312      	bcc.n	8000346 <__divsi3+0x14a>
 8000320:	22fc      	movs	r2, #252	@ 0xfc
 8000322:	0189      	lsls	r1, r1, #6
 8000324:	ba12      	rev	r2, r2
 8000326:	0a03      	lsrs	r3, r0, #8
 8000328:	428b      	cmp	r3, r1
 800032a:	d30c      	bcc.n	8000346 <__divsi3+0x14a>
 800032c:	0189      	lsls	r1, r1, #6
 800032e:	1192      	asrs	r2, r2, #6
 8000330:	428b      	cmp	r3, r1
 8000332:	d308      	bcc.n	8000346 <__divsi3+0x14a>
 8000334:	0189      	lsls	r1, r1, #6
 8000336:	1192      	asrs	r2, r2, #6
 8000338:	428b      	cmp	r3, r1
 800033a:	d304      	bcc.n	8000346 <__divsi3+0x14a>
 800033c:	0189      	lsls	r1, r1, #6
 800033e:	d03a      	beq.n	80003b6 <__divsi3+0x1ba>
 8000340:	1192      	asrs	r2, r2, #6
 8000342:	e000      	b.n	8000346 <__divsi3+0x14a>
 8000344:	0989      	lsrs	r1, r1, #6
 8000346:	09c3      	lsrs	r3, r0, #7
 8000348:	428b      	cmp	r3, r1
 800034a:	d301      	bcc.n	8000350 <__divsi3+0x154>
 800034c:	01cb      	lsls	r3, r1, #7
 800034e:	1ac0      	subs	r0, r0, r3
 8000350:	4152      	adcs	r2, r2
 8000352:	0983      	lsrs	r3, r0, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d301      	bcc.n	800035c <__divsi3+0x160>
 8000358:	018b      	lsls	r3, r1, #6
 800035a:	1ac0      	subs	r0, r0, r3
 800035c:	4152      	adcs	r2, r2
 800035e:	0943      	lsrs	r3, r0, #5
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x16c>
 8000364:	014b      	lsls	r3, r1, #5
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0903      	lsrs	r3, r0, #4
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x178>
 8000370:	010b      	lsls	r3, r1, #4
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	08c3      	lsrs	r3, r0, #3
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x184>
 800037c:	00cb      	lsls	r3, r1, #3
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0883      	lsrs	r3, r0, #2
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x190>
 8000388:	008b      	lsls	r3, r1, #2
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	d2d9      	bcs.n	8000344 <__divsi3+0x148>
 8000390:	0843      	lsrs	r3, r0, #1
 8000392:	428b      	cmp	r3, r1
 8000394:	d301      	bcc.n	800039a <__divsi3+0x19e>
 8000396:	004b      	lsls	r3, r1, #1
 8000398:	1ac0      	subs	r0, r0, r3
 800039a:	4152      	adcs	r2, r2
 800039c:	1a41      	subs	r1, r0, r1
 800039e:	d200      	bcs.n	80003a2 <__divsi3+0x1a6>
 80003a0:	4601      	mov	r1, r0
 80003a2:	4663      	mov	r3, ip
 80003a4:	4152      	adcs	r2, r2
 80003a6:	105b      	asrs	r3, r3, #1
 80003a8:	4610      	mov	r0, r2
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x1b4>
 80003ac:	4240      	negs	r0, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d500      	bpl.n	80003b4 <__divsi3+0x1b8>
 80003b2:	4249      	negs	r1, r1
 80003b4:	4770      	bx	lr
 80003b6:	4663      	mov	r3, ip
 80003b8:	105b      	asrs	r3, r3, #1
 80003ba:	d300      	bcc.n	80003be <__divsi3+0x1c2>
 80003bc:	4240      	negs	r0, r0
 80003be:	b501      	push	{r0, lr}
 80003c0:	2000      	movs	r0, #0
 80003c2:	f000 f805 	bl	80003d0 <__aeabi_idiv0>
 80003c6:	bd02      	pop	{r1, pc}

080003c8 <__aeabi_idivmod>:
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d0f8      	beq.n	80003be <__divsi3+0x1c2>
 80003cc:	e716      	b.n	80001fc <__divsi3>
 80003ce:	4770      	bx	lr

080003d0 <__aeabi_idiv0>:
 80003d0:	4770      	bx	lr
 80003d2:	46c0      	nop			@ (mov r8, r8)

080003d4 <__aeabi_ldivmod>:
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d115      	bne.n	8000404 <__aeabi_ldivmod+0x30>
 80003d8:	2a00      	cmp	r2, #0
 80003da:	d113      	bne.n	8000404 <__aeabi_ldivmod+0x30>
 80003dc:	2900      	cmp	r1, #0
 80003de:	db06      	blt.n	80003ee <__aeabi_ldivmod+0x1a>
 80003e0:	dc01      	bgt.n	80003e6 <__aeabi_ldivmod+0x12>
 80003e2:	2800      	cmp	r0, #0
 80003e4:	d006      	beq.n	80003f4 <__aeabi_ldivmod+0x20>
 80003e6:	2000      	movs	r0, #0
 80003e8:	43c0      	mvns	r0, r0
 80003ea:	0841      	lsrs	r1, r0, #1
 80003ec:	e002      	b.n	80003f4 <__aeabi_ldivmod+0x20>
 80003ee:	2180      	movs	r1, #128	@ 0x80
 80003f0:	0609      	lsls	r1, r1, #24
 80003f2:	2000      	movs	r0, #0
 80003f4:	b407      	push	{r0, r1, r2}
 80003f6:	4802      	ldr	r0, [pc, #8]	@ (8000400 <__aeabi_ldivmod+0x2c>)
 80003f8:	a101      	add	r1, pc, #4	@ (adr r1, 8000400 <__aeabi_ldivmod+0x2c>)
 80003fa:	1840      	adds	r0, r0, r1
 80003fc:	9002      	str	r0, [sp, #8]
 80003fe:	bd03      	pop	{r0, r1, pc}
 8000400:	ffffffd1 	.word	0xffffffd1
 8000404:	b403      	push	{r0, r1}
 8000406:	4668      	mov	r0, sp
 8000408:	b501      	push	{r0, lr}
 800040a:	9802      	ldr	r0, [sp, #8]
 800040c:	f004 fcca 	bl	8004da4 <__gnu_ldivmod_helper>
 8000410:	9b01      	ldr	r3, [sp, #4]
 8000412:	469e      	mov	lr, r3
 8000414:	b002      	add	sp, #8
 8000416:	bc0c      	pop	{r2, r3}
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			@ (mov r8, r8)

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <strlen>:
 8000470:	2300      	movs	r3, #0
 8000472:	5cc2      	ldrb	r2, [r0, r3]
 8000474:	3301      	adds	r3, #1
 8000476:	2a00      	cmp	r2, #0
 8000478:	d1fb      	bne.n	8000472 <strlen+0x2>
 800047a:	1e58      	subs	r0, r3, #1
 800047c:	4770      	bx	lr
	...

08000480 <deregister_tm_clones>:
 8000480:	4804      	ldr	r0, [pc, #16]	@ (8000494 <deregister_tm_clones+0x14>)
 8000482:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <deregister_tm_clones+0x18>)
 8000484:	b510      	push	{r4, lr}
 8000486:	4283      	cmp	r3, r0
 8000488:	d003      	beq.n	8000492 <deregister_tm_clones+0x12>
 800048a:	4b04      	ldr	r3, [pc, #16]	@ (800049c <deregister_tm_clones+0x1c>)
 800048c:	2b00      	cmp	r3, #0
 800048e:	d000      	beq.n	8000492 <deregister_tm_clones+0x12>
 8000490:	4798      	blx	r3
 8000492:	bd10      	pop	{r4, pc}
 8000494:	20000394 	.word	0x20000394
 8000498:	20000394 	.word	0x20000394
 800049c:	00000000 	.word	0x00000000

080004a0 <register_tm_clones>:
 80004a0:	4806      	ldr	r0, [pc, #24]	@ (80004bc <register_tm_clones+0x1c>)
 80004a2:	4907      	ldr	r1, [pc, #28]	@ (80004c0 <register_tm_clones+0x20>)
 80004a4:	1a09      	subs	r1, r1, r0
 80004a6:	108b      	asrs	r3, r1, #2
 80004a8:	0fc9      	lsrs	r1, r1, #31
 80004aa:	18c9      	adds	r1, r1, r3
 80004ac:	b510      	push	{r4, lr}
 80004ae:	1049      	asrs	r1, r1, #1
 80004b0:	d003      	beq.n	80004ba <register_tm_clones+0x1a>
 80004b2:	4b04      	ldr	r3, [pc, #16]	@ (80004c4 <register_tm_clones+0x24>)
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d000      	beq.n	80004ba <register_tm_clones+0x1a>
 80004b8:	4798      	blx	r3
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	20000394 	.word	0x20000394
 80004c0:	20000394 	.word	0x20000394
 80004c4:	00000000 	.word	0x00000000

080004c8 <__do_global_dtors_aux>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	4c07      	ldr	r4, [pc, #28]	@ (80004e8 <__do_global_dtors_aux+0x20>)
 80004cc:	7823      	ldrb	r3, [r4, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d109      	bne.n	80004e6 <__do_global_dtors_aux+0x1e>
 80004d2:	f7ff ffd5 	bl	8000480 <deregister_tm_clones>
 80004d6:	4b05      	ldr	r3, [pc, #20]	@ (80004ec <__do_global_dtors_aux+0x24>)
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <__do_global_dtors_aux+0x1a>
 80004dc:	4804      	ldr	r0, [pc, #16]	@ (80004f0 <__do_global_dtors_aux+0x28>)
 80004de:	e000      	b.n	80004e2 <__do_global_dtors_aux+0x1a>
 80004e0:	bf00      	nop
 80004e2:	2301      	movs	r3, #1
 80004e4:	7023      	strb	r3, [r4, #0]
 80004e6:	bd10      	pop	{r4, pc}
 80004e8:	20000394 	.word	0x20000394
 80004ec:	00000000 	.word	0x00000000
 80004f0:	08004fd8 	.word	0x08004fd8

080004f4 <frame_dummy>:
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <frame_dummy+0x18>)
 80004f6:	b510      	push	{r4, lr}
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d003      	beq.n	8000504 <frame_dummy+0x10>
 80004fc:	4904      	ldr	r1, [pc, #16]	@ (8000510 <frame_dummy+0x1c>)
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <frame_dummy+0x20>)
 8000500:	e000      	b.n	8000504 <frame_dummy+0x10>
 8000502:	bf00      	nop
 8000504:	f7ff ffcc 	bl	80004a0 <register_tm_clones>
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	00000000 	.word	0x00000000
 8000510:	20000398 	.word	0x20000398
 8000514:	08004fd8 	.word	0x08004fd8

08000518 <memset>:
 8000518:	0003      	movs	r3, r0
 800051a:	1882      	adds	r2, r0, r2
 800051c:	4293      	cmp	r3, r2
 800051e:	d100      	bne.n	8000522 <memset+0xa>
 8000520:	4770      	bx	lr
 8000522:	7019      	strb	r1, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	e7f9      	b.n	800051c <memset+0x4>

08000528 <__libc_init_array>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2600      	movs	r6, #0
 800052c:	4c0c      	ldr	r4, [pc, #48]	@ (8000560 <__libc_init_array+0x38>)
 800052e:	4d0d      	ldr	r5, [pc, #52]	@ (8000564 <__libc_init_array+0x3c>)
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	10a4      	asrs	r4, r4, #2
 8000534:	42a6      	cmp	r6, r4
 8000536:	d109      	bne.n	800054c <__libc_init_array+0x24>
 8000538:	2600      	movs	r6, #0
 800053a:	f004 fd4d 	bl	8004fd8 <_init>
 800053e:	4c0a      	ldr	r4, [pc, #40]	@ (8000568 <__libc_init_array+0x40>)
 8000540:	4d0a      	ldr	r5, [pc, #40]	@ (800056c <__libc_init_array+0x44>)
 8000542:	1b64      	subs	r4, r4, r5
 8000544:	10a4      	asrs	r4, r4, #2
 8000546:	42a6      	cmp	r6, r4
 8000548:	d105      	bne.n	8000556 <__libc_init_array+0x2e>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	00b3      	lsls	r3, r6, #2
 800054e:	58eb      	ldr	r3, [r5, r3]
 8000550:	4798      	blx	r3
 8000552:	3601      	adds	r6, #1
 8000554:	e7ee      	b.n	8000534 <__libc_init_array+0xc>
 8000556:	00b3      	lsls	r3, r6, #2
 8000558:	58eb      	ldr	r3, [r5, r3]
 800055a:	4798      	blx	r3
 800055c:	3601      	adds	r6, #1
 800055e:	e7f2      	b.n	8000546 <__libc_init_array+0x1e>
 8000560:	08005a60 	.word	0x08005a60
 8000564:	08005a60 	.word	0x08005a60
 8000568:	08005a64 	.word	0x08005a64
 800056c:	08005a60 	.word	0x08005a60

08000570 <LL_IOP_GRP1_EnableClock>:
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000570:	4b05      	ldr	r3, [pc, #20]	@ (8000588 <LL_IOP_GRP1_EnableClock+0x18>)
{
 8000572:	b082      	sub	sp, #8
  SET_BIT(RCC->IOPENR, Periphs);
 8000574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000576:	4302      	orrs	r2, r0
 8000578:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800057a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800057c:	4018      	ands	r0, r3
 800057e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000580:	9b01      	ldr	r3, [sp, #4]
}
 8000582:	b002      	add	sp, #8
 8000584:	4770      	bx	lr
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	40021000 	.word	0x40021000

0800058c <My_CLZ>:
		32U, 31U, 30U, 30U, 29U, 29U, 29U, 29U,
		28U, 28U, 28U, 28U, 28U, 28U, 28U, 28U
	};
	uint32_t n;

	if (x >= (1U << 16)) {
 800058c:	2380      	movs	r3, #128	@ 0x80
 800058e:	025b      	lsls	r3, r3, #9
 8000590:	4298      	cmp	r0, r3
 8000592:	d311      	bcc.n	80005b8 <My_CLZ+0x2c>
		if (x >= (1U << 24)) {
 8000594:	2380      	movs	r3, #128	@ 0x80
			if (x >= (1 << 28)) {
 8000596:	2280      	movs	r2, #128	@ 0x80
		if (x >= (1U << 24)) {
 8000598:	045b      	lsls	r3, r3, #17
 800059a:	4298      	cmp	r0, r3
 800059c:	d309      	bcc.n	80005b2 <My_CLZ+0x26>
				n = 28U;
			}
			else {
				n = 24U;
 800059e:	2318      	movs	r3, #24
			if (x >= (1 << 28)) {
 80005a0:	0552      	lsls	r2, r2, #21
			}
		}
	}
	else {
		if (x >= (1U << 8)) {
			if (x >= (1U << 12)) {
 80005a2:	4290      	cmp	r0, r2
 80005a4:	d300      	bcc.n	80005a8 <My_CLZ+0x1c>
				n = 12U;
 80005a6:	3304      	adds	r3, #4
			else {
				n = 0U;
			}
		}
	}
	return (uint32_t)clz_lkup[x >> n] - n;
 80005a8:	40d8      	lsrs	r0, r3
 80005aa:	4a09      	ldr	r2, [pc, #36]	@ (80005d0 <My_CLZ+0x44>)
 80005ac:	5c10      	ldrb	r0, [r2, r0]
 80005ae:	1ac0      	subs	r0, r0, r3
}
 80005b0:	4770      	bx	lr
				n = 16U;
 80005b2:	2310      	movs	r3, #16
			if (x >= (1U << 20)) {
 80005b4:	0352      	lsls	r2, r2, #13
 80005b6:	e7f4      	b.n	80005a2 <My_CLZ+0x16>
		if (x >= (1U << 8)) {
 80005b8:	28ff      	cmp	r0, #255	@ 0xff
 80005ba:	d903      	bls.n	80005c4 <My_CLZ+0x38>
			if (x >= (1U << 12)) {
 80005bc:	2280      	movs	r2, #128	@ 0x80
				n = 8U;
 80005be:	2308      	movs	r3, #8
			if (x >= (1U << 12)) {
 80005c0:	0152      	lsls	r2, r2, #5
 80005c2:	e7ee      	b.n	80005a2 <My_CLZ+0x16>
			if (x >= (1U << 4)) {
 80005c4:	230f      	movs	r3, #15
 80005c6:	4283      	cmp	r3, r0
 80005c8:	419b      	sbcs	r3, r3
 80005ca:	425b      	negs	r3, r3
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	e7eb      	b.n	80005a8 <My_CLZ+0x1c>
 80005d0:	080059c2 	.word	0x080059c2

080005d4 <log_q31>:

static uint32_t log_q31(uint32_t src){
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	0005      	movs	r5, r0
	int32_t i;

	int32_t c = My_CLZ(src);
 80005d8:	f7ff ffd8 	bl	800058c <My_CLZ>
 80005dc:	1e04      	subs	r4, r0, #0
	uint32_t x, y=0;

	int32_t tmp;

	x = src;
	if ((c-1) < 0)   {
 80005de:	dc22      	bgt.n	8000626 <log_q31+0x52>
			x = x >> (1-c);
 80005e0:	2301      	movs	r3, #1
 80005e2:	1a1b      	subs	r3, r3, r0
 80005e4:	0028      	movs	r0, r5
 80005e6:	40d8      	lsrs	r0, r3
static uint32_t log_q31(uint32_t src){
 80005e8:	2780      	movs	r7, #128	@ 0x80
 80005ea:	261f      	movs	r6, #31
 80005ec:	2500      	movs	r5, #0
 80005ee:	04bf      	lsls	r7, r7, #18
	}
	normalization = c;

	for(i = 0; i < LOG_Q31_ACCURACY ; i++)
	{
		x = ((int64_t)x*x)  >> (LOG_Q31_ACCURACY - 1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	0002      	movs	r2, r0
 80005f4:	0019      	movs	r1, r3
 80005f6:	f004 fba7 	bl	8004d48 <__aeabi_lmul>
 80005fa:	0089      	lsls	r1, r1, #2
 80005fc:	0f80      	lsrs	r0, r0, #30
 80005fe:	4308      	orrs	r0, r1

		if (x >= LOQ_Q31_THRESHOLD)      {
 8000600:	2900      	cmp	r1, #0
 8000602:	da01      	bge.n	8000608 <log_q31+0x34>
				y += inc ;
 8000604:	19ed      	adds	r5, r5, r7
				x = x >> 1;
 8000606:	0840      	lsrs	r0, r0, #1
	for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 8000608:	3e01      	subs	r6, #1
			}
		inc = inc >> 1;
 800060a:	087f      	lsrs	r7, r7, #1
	for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 800060c:	2e00      	cmp	r6, #0
 800060e:	d1ef      	bne.n	80005f0 <log_q31+0x1c>
	}
	tmp = (int32_t)y - (normalization << (LOG_Q31_ACCURACY - LOG_Q31_INTEGER_PART));
 8000610:	06a4      	lsls	r4, r4, #26
 8000612:	1b28      	subs	r0, r5, r4

	y = ((int64_t)tmp * LOG_Q31_INVLOG2EXP) >> 31;
 8000614:	2300      	movs	r3, #0
 8000616:	4a06      	ldr	r2, [pc, #24]	@ (8000630 <log_q31+0x5c>)
 8000618:	17c1      	asrs	r1, r0, #31
 800061a:	f004 fb95 	bl	8004d48 <__aeabi_lmul>
 800061e:	0049      	lsls	r1, r1, #1
 8000620:	0fc0      	lsrs	r0, r0, #31
 8000622:	4308      	orrs	r0, r1

	return(y);

}
 8000624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		x = x << (c-1);
 8000626:	1e43      	subs	r3, r0, #1
 8000628:	0028      	movs	r0, r5
 800062a:	4098      	lsls	r0, r3
 800062c:	e7dc      	b.n	80005e8 <log_q31+0x14>
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	58b90bfc 	.word	0x58b90bfc

08000634 <FLASH_Program_Page>:

  uint8_t index=0;
  uint32_t dest = Address;
  uint32_t * src = DataAddress;
  uint32_t primask_bit;
  SET_BIT(FLASH->CR, FLASH_CR_EOPIE);
 8000634:	2280      	movs	r2, #128	@ 0x80
 8000636:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <FLASH_Program_Page+0x80>)
{
 8000638:	b570      	push	{r4, r5, r6, lr}
  SET_BIT(FLASH->CR, FLASH_CR_EOPIE);
 800063a:	695c      	ldr	r4, [r3, #20]
 800063c:	0452      	lsls	r2, r2, #17
 800063e:	4322      	orrs	r2, r4
 8000640:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000642:	2201      	movs	r2, #1
 8000644:	695c      	ldr	r4, [r3, #20]
 8000646:	4322      	orrs	r2, r4
 8000648:	615a      	str	r2, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800064a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800064e:	b672      	cpsid	i
    src += 1U;
    dest += 4U;
    index++;
    if(index==31)
    {
      SET_BIT(FLASH->CR, FLASH_CR_PGSTRT);
 8000650:	2680      	movs	r6, #128	@ 0x80
  uint8_t index=0;
 8000652:	2200      	movs	r2, #0
    *(uint32_t *)dest = *src;
 8000654:	1a09      	subs	r1, r1, r0
      SET_BIT(FLASH->CR, FLASH_CR_PGSTRT);
 8000656:	0336      	lsls	r6, r6, #12
    *(uint32_t *)dest = *src;
 8000658:	580c      	ldr	r4, [r1, r0]
    index++;
 800065a:	3201      	adds	r2, #1
 800065c:	b2d2      	uxtb	r2, r2
    *(uint32_t *)dest = *src;
 800065e:	c010      	stmia	r0!, {r4}
    if(index==31)
 8000660:	2a1f      	cmp	r2, #31
 8000662:	d103      	bne.n	800066c <FLASH_Program_Page+0x38>
      SET_BIT(FLASH->CR, FLASH_CR_PGSTRT);
 8000664:	695c      	ldr	r4, [r3, #20]
 8000666:	4334      	orrs	r4, r6
 8000668:	615c      	str	r4, [r3, #20]
  while(index<32U)
 800066a:	e7f5      	b.n	8000658 <FLASH_Program_Page+0x24>
 800066c:	2a20      	cmp	r2, #32
 800066e:	d1f3      	bne.n	8000658 <FLASH_Program_Page+0x24>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000670:	f385 8810 	msr	PRIMASK, r5
    }
  }
  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
  while((FLASH->SR)&FLASH_SR_BSY) {MsDelay(1);}
 8000674:	2180      	movs	r1, #128	@ 0x80
 8000676:	4c10      	ldr	r4, [pc, #64]	@ (80006b8 <FLASH_Program_Page+0x84>)
 8000678:	0249      	lsls	r1, r1, #9
 800067a:	691a      	ldr	r2, [r3, #16]
 800067c:	0010      	movs	r0, r2
 800067e:	4008      	ands	r0, r1
 8000680:	420a      	tst	r2, r1
 8000682:	d10e      	bne.n	80006a2 <FLASH_Program_Page+0x6e>
  if(!((FLASH->SR)&(FLASH_SR_EOP))) return ERROR;
 8000684:	2101      	movs	r1, #1
 8000686:	691a      	ldr	r2, [r3, #16]
 8000688:	420a      	tst	r2, r1
 800068a:	d010      	beq.n	80006ae <FLASH_Program_Page+0x7a>
  CLEAR_BIT(FLASH->SR, FLASH_SR_EOP);
 800068c:	691a      	ldr	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_EOPIE);
 800068e:	4c0b      	ldr	r4, [pc, #44]	@ (80006bc <FLASH_Program_Page+0x88>)
  CLEAR_BIT(FLASH->SR, FLASH_SR_EOP);
 8000690:	438a      	bics	r2, r1
 8000692:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_EOPIE);
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4022      	ands	r2, r4
 8000698:	615a      	str	r2, [r3, #20]
  CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	438a      	bics	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
  return SUCCESS;
}
 80006a0:	bd70      	pop	{r4, r5, r6, pc}
  while((FLASH->SR)&FLASH_SR_BSY) {MsDelay(1);}
 80006a2:	6822      	ldr	r2, [r4, #0]
 80006a4:	3203      	adds	r2, #3
 80006a6:	6820      	ldr	r0, [r4, #0]
 80006a8:	4282      	cmp	r2, r0
 80006aa:	dafc      	bge.n	80006a6 <FLASH_Program_Page+0x72>
 80006ac:	e7e5      	b.n	800067a <FLASH_Program_Page+0x46>
  if(!((FLASH->SR)&(FLASH_SR_EOP))) return ERROR;
 80006ae:	0008      	movs	r0, r1
 80006b0:	e7f6      	b.n	80006a0 <FLASH_Program_Page+0x6c>
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	40022000 	.word	0x40022000
 80006b8:	200004d0 	.word	0x200004d0
 80006bc:	feffffff 	.word	0xfeffffff

080006c0 <FLASH_PageErase>:

static void FLASH_PageErase(uint32_t PageAddress)
{

  /* Clean the error context */
  pFlash.ErrorCode = LL_FLASH_ERROR_NONE;
 80006c0:	2200      	movs	r2, #0
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <FLASH_PageErase+0x34>)
{
 80006c4:	b510      	push	{r4, lr}
  pFlash.ErrorCode = LL_FLASH_ERROR_NONE;
 80006c6:	605a      	str	r2, [r3, #4]

  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80006c8:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <FLASH_PageErase+0x38>)
 80006ca:	3202      	adds	r2, #2
 80006cc:	6959      	ldr	r1, [r3, #20]
 80006ce:	430a      	orrs	r2, r1
 80006d0:	615a      	str	r2, [r3, #20]
  *(__IO uint32_t *)(PageAddress) = 0xFF;
 80006d2:	22ff      	movs	r2, #255	@ 0xff
 80006d4:	6002      	str	r2, [r0, #0]
  while (__LL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U) {MsDelay(1)};
 80006d6:	2080      	movs	r0, #128	@ 0x80
 80006d8:	4908      	ldr	r1, [pc, #32]	@ (80006fc <FLASH_PageErase+0x3c>)
 80006da:	0240      	lsls	r0, r0, #9
 80006dc:	691a      	ldr	r2, [r3, #16]
 80006de:	4202      	tst	r2, r0
 80006e0:	d005      	beq.n	80006ee <FLASH_PageErase+0x2e>
 80006e2:	680a      	ldr	r2, [r1, #0]
 80006e4:	3203      	adds	r2, #3
 80006e6:	680c      	ldr	r4, [r1, #0]
 80006e8:	42a2      	cmp	r2, r4
 80006ea:	dafc      	bge.n	80006e6 <FLASH_PageErase+0x26>
 80006ec:	e7f6      	b.n	80006dc <FLASH_PageErase+0x1c>
  FLASH->SR = FLASH_FLAG_SR_CLEAR;
 80006ee:	4a04      	ldr	r2, [pc, #16]	@ (8000700 <FLASH_PageErase+0x40>)
 80006f0:	611a      	str	r2, [r3, #16]

}
 80006f2:	bd10      	pop	{r4, pc}
 80006f4:	200004dc 	.word	0x200004dc
 80006f8:	40022000 	.word	0x40022000
 80006fc:	200004d0 	.word	0x200004d0
 8000700:	00008011 	.word	0x00008011

08000704 <Translate_Segment>:
    for(i=0;i<Seg_Table_Size;i++) if(Ch==Seg_Translate[i][0]) return Seg_Translate[i][1];
 8000704:	2300      	movs	r3, #0
unsigned char Translate_Segment(unsigned char Ch){
 8000706:	b510      	push	{r4, lr}
    for(i=0;i<Seg_Table_Size;i++) if(Ch==Seg_Translate[i][0]) return Seg_Translate[i][1];
 8000708:	4a06      	ldr	r2, [pc, #24]	@ (8000724 <Translate_Segment+0x20>)
 800070a:	0059      	lsls	r1, r3, #1
 800070c:	188c      	adds	r4, r1, r2
 800070e:	5c51      	ldrb	r1, [r2, r1]
 8000710:	4281      	cmp	r1, r0
 8000712:	d101      	bne.n	8000718 <Translate_Segment+0x14>
 8000714:	7860      	ldrb	r0, [r4, #1]
}
 8000716:	bd10      	pop	{r4, pc}
    for(i=0;i<Seg_Table_Size;i++) if(Ch==Seg_Translate[i][0]) return Seg_Translate[i][1];
 8000718:	3301      	adds	r3, #1
 800071a:	2b33      	cmp	r3, #51	@ 0x33
 800071c:	d1f5      	bne.n	800070a <Translate_Segment+0x6>
    return 0;
 800071e:	2000      	movs	r0, #0
 8000720:	e7f9      	b.n	8000716 <Translate_Segment+0x12>
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	080059d2 	.word	0x080059d2

08000728 <Put_Buff_On_Display>:
void Put_Buff_On_Display(unsigned char *orig, unsigned int dot){
 8000728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800072a:	4d14      	ldr	r5, [pc, #80]	@ (800077c <Put_Buff_On_Display+0x54>)
 800072c:	0006      	movs	r6, r0
    for(int i=0;i<3;i++){
 800072e:	002f      	movs	r7, r5
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <Put_Buff_On_Display+0x58>)
void Put_Buff_On_Display(unsigned char *orig, unsigned int dot){
 8000732:	9100      	str	r1, [sp, #0]
 8000734:	9301      	str	r3, [sp, #4]
        if(*orig) {
 8000736:	7834      	ldrb	r4, [r6, #0]
 8000738:	2c00      	cmp	r4, #0
 800073a:	d009      	beq.n	8000750 <Put_Buff_On_Display+0x28>
					*dest=(*orig&_DP)?_DP:0;
 800073c:	237f      	movs	r3, #127	@ 0x7f
 800073e:	439c      	bics	r4, r3
 8000740:	702c      	strb	r4, [r5, #0]
                    *(dest++)|=Translate_Segment((*orig)&0x7F);					
 8000742:	7830      	ldrb	r0, [r6, #0]
                    orig++;
 8000744:	3601      	adds	r6, #1
                    *(dest++)|=Translate_Segment((*orig)&0x7F);					
 8000746:	4018      	ands	r0, r3
 8000748:	f7ff ffdc 	bl	8000704 <Translate_Segment>
 800074c:	4304      	orrs	r4, r0
 800074e:	b2e4      	uxtb	r4, r4
    for(int i=0;i<3;i++){
 8000750:	9b01      	ldr	r3, [sp, #4]
                    *(dest++)|=Translate_Segment((*orig)&0x7F);					
 8000752:	702c      	strb	r4, [r5, #0]
    for(int i=0;i<3;i++){
 8000754:	3501      	adds	r5, #1
 8000756:	429d      	cmp	r5, r3
 8000758:	d1ed      	bne.n	8000736 <Put_Buff_On_Display+0xe>
    switch(dot){
 800075a:	9b00      	ldr	r3, [sp, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d002      	beq.n	8000766 <Put_Buff_On_Display+0x3e>
 8000760:	2b02      	cmp	r3, #2
 8000762:	d005      	beq.n	8000770 <Put_Buff_On_Display+0x48>
}
 8000764:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                Disp_Chars[0]|=_DP;
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	783b      	ldrb	r3, [r7, #0]
 800076a:	4313      	orrs	r3, r2
 800076c:	703b      	strb	r3, [r7, #0]
                break;
 800076e:	e7f9      	b.n	8000764 <Put_Buff_On_Display+0x3c>
        case 2: Disp_Chars[1]|=_DP;
 8000770:	2280      	movs	r2, #128	@ 0x80
 8000772:	787b      	ldrb	r3, [r7, #1]
 8000774:	4313      	orrs	r3, r2
 8000776:	707b      	strb	r3, [r7, #1]
}
 8000778:	e7f4      	b.n	8000764 <Put_Buff_On_Display+0x3c>
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	20000468 	.word	0x20000468
 8000780:	2000046b 	.word	0x2000046b

08000784 <ADCCalibrate>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8000784:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <ADCCalibrate+0x94>)
  NVIC_SetPriority(ADC_COMP_IRQn, 0);
  NVIC_EnableIRQ(ADC_COMP_IRQn);
}

static void ADCCalibrate(void)
{
 8000786:	b570      	push	{r4, r5, r6, lr}
 8000788:	689a      	ldr	r2, [r3, #8]
  uint32_t Timeout = 2; //2ms of timeout

  if (LL_ADC_IsEnabled(ADC1) == 0)  // Make sure the ADC is already disabled.
 800078a:	07d2      	lsls	r2, r2, #31
 800078c:	d419      	bmi.n	80007c2 <ADCCalibrate+0x3e>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,ADC_CR_BITS_PROPERTY_RS,ADC_CR_ADCAL);
 800078e:	6899      	ldr	r1, [r3, #8]
 8000790:	4a22      	ldr	r2, [pc, #136]	@ (800081c <ADCCalibrate+0x98>)
 8000792:	4011      	ands	r1, r2
 8000794:	3218      	adds	r2, #24
 8000796:	430a      	orrs	r2, r1
 8000798:	609a      	str	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800079a:	689a      	ldr	r2, [r3, #8]
  {
    LL_ADC_StartCalibration(ADC1); // Start calibration.

    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0){
 800079c:	2a00      	cmp	r2, #0
 800079e:	da10      	bge.n	80007c2 <ADCCalibrate+0x3e>
					if(!(*p_roll)) p_roll=Display;
				}
			}
        }
     
    MsDelay(1);
 80007a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000820 <ADCCalibrate+0x9c>)
 80007a2:	6811      	ldr	r1, [r2, #0]
 80007a4:	3103      	adds	r1, #3
 80007a6:	6810      	ldr	r0, [r2, #0]
 80007a8:	4281      	cmp	r1, r0
 80007aa:	dafc      	bge.n	80007a6 <ADCCalibrate+0x22>
 80007ac:	6899      	ldr	r1, [r3, #8]
    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0){
 80007ae:	2900      	cmp	r1, #0
 80007b0:	da07      	bge.n	80007c2 <ADCCalibrate+0x3e>
    MsDelay(1);
 80007b2:	6811      	ldr	r1, [r2, #0]
 80007b4:	3103      	adds	r1, #3
 80007b6:	6810      	ldr	r0, [r2, #0]
 80007b8:	4281      	cmp	r1, r0
 80007ba:	dafc      	bge.n	80007b6 <ADCCalibrate+0x32>
 80007bc:	689b      	ldr	r3, [r3, #8]
    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0){
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db00      	blt.n	80007c4 <ADCCalibrate+0x40>
	}
  }
}
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
			p_aux=(unsigned char*)(MsgStr[5]);
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <ADCCalibrate+0xa0>)
			strcpy(Display,p_aux);
 80007c6:	2400      	movs	r4, #0
			p_aux=(unsigned char*)(MsgStr[5]);
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	6958      	ldr	r0, [r3, #20]
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <ADCCalibrate+0xa4>)
 80007ce:	0002      	movs	r2, r0
 80007d0:	6018      	str	r0, [r3, #0]
			strcpy(Display,p_aux);
 80007d2:	4b16      	ldr	r3, [pc, #88]	@ (800082c <ADCCalibrate+0xa8>)
 80007d4:	001d      	movs	r5, r3
 80007d6:	3201      	adds	r2, #1
 80007d8:	1e51      	subs	r1, r2, #1
 80007da:	7809      	ldrb	r1, [r1, #0]
 80007dc:	2900      	cmp	r1, #0
 80007de:	d117      	bne.n	8000810 <ADCCalibrate+0x8c>
			p_roll=Display;
 80007e0:	4c13      	ldr	r4, [pc, #76]	@ (8000830 <ADCCalibrate+0xac>)
 80007e2:	6025      	str	r5, [r4, #0]
			Put_Buff_On_Display(p_aux,0);
 80007e4:	f7ff ffa0 	bl	8000728 <Put_Buff_On_Display>
				if(Roll_Flag&&Display[3]!=0){
 80007e8:	78ea      	ldrb	r2, [r5, #3]
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <ADCCalibrate+0xb0>)
 80007ec:	6819      	ldr	r1, [r3, #0]
 80007ee:	2900      	cmp	r1, #0
 80007f0:	d0fc      	beq.n	80007ec <ADCCalibrate+0x68>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d0fa      	beq.n	80007ec <ADCCalibrate+0x68>
					Roll_Flag=0;
 80007f6:	2100      	movs	r1, #0
					Put_Buff_On_Display(p_roll++,0);
 80007f8:	6820      	ldr	r0, [r4, #0]
					Roll_Flag=0;
 80007fa:	6019      	str	r1, [r3, #0]
					Put_Buff_On_Display(p_roll++,0);
 80007fc:	1c43      	adds	r3, r0, #1
 80007fe:	6023      	str	r3, [r4, #0]
 8000800:	f7ff ff92 	bl	8000728 <Put_Buff_On_Display>
					if(!(*p_roll)) p_roll=Display;
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1ed      	bne.n	80007e8 <ADCCalibrate+0x64>
 800080c:	6025      	str	r5, [r4, #0]
 800080e:	e7eb      	b.n	80007e8 <ADCCalibrate+0x64>
			strcpy(Display,p_aux);
 8000810:	7019      	strb	r1, [r3, #0]
 8000812:	705c      	strb	r4, [r3, #1]
 8000814:	3301      	adds	r3, #1
 8000816:	e7de      	b.n	80007d6 <ADCCalibrate+0x52>
 8000818:	40012400 	.word	0x40012400
 800081c:	7fffffe8 	.word	0x7fffffe8
 8000820:	200004d0 	.word	0x200004d0
 8000824:	200004d4 	.word	0x200004d4
 8000828:	20000448 	.word	0x20000448
 800082c:	200000b0 	.word	0x200000b0
 8000830:	200000a8 	.word	0x200000a8
 8000834:	200004ac 	.word	0x200004ac

08000838 <intexp>:
uint32_t intexp(uint32_t x){
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083a:	0006      	movs	r6, r0
	int32_t c=(5-My_CLZ(x)),k,t;
 800083c:	2405      	movs	r4, #5
 800083e:	f7ff fea5 	bl	800058c <My_CLZ>
 8000842:	1a24      	subs	r4, r4, r0
 8000844:	0003      	movs	r3, r0
	if(c<0) return 0;
 8000846:	2000      	movs	r0, #0
	int32_t c=(5-My_CLZ(x)),k,t;
 8000848:	0025      	movs	r5, r4
	if(c<0) return 0;
 800084a:	4284      	cmp	r4, r0
 800084c:	da00      	bge.n	8000850 <intexp+0x18>
 800084e:	e0c1      	b.n	80009d4 <intexp+0x19c>
	x<<=5-c;
 8000850:	409e      	lsls	r6, r3
	t=(signed)(x-0xB17217F7); if(t>=0) x=t,y<<=2;
 8000852:	4b67      	ldr	r3, [pc, #412]	@ (80009f0 <intexp+0x1b8>)
 8000854:	18f1      	adds	r1, r6, r3
 8000856:	d400      	bmi.n	800085a <intexp+0x22>
 8000858:	e0ae      	b.n	80009b8 <intexp+0x180>
	y=0x20000000;
 800085a:	2280      	movs	r2, #128	@ 0x80
	x<<=5-c;
 800085c:	0031      	movs	r1, r6
	y=0x20000000;
 800085e:	0592      	lsls	r2, r2, #22
	t=(signed)(x-0x58b90bfc); if(t>=0) x=t,y<<=1;
 8000860:	4864      	ldr	r0, [pc, #400]	@ (80009f4 <intexp+0x1bc>)
	t=(signed)(x-0xB17217F7); if(t>=0) x=t,y<<=2;
 8000862:	2300      	movs	r3, #0
	t=(signed)(x-0x58b90bfc); if(t>=0) x=t,y<<=1;
 8000864:	1808      	adds	r0, r1, r0
 8000866:	d402      	bmi.n	800086e <intexp+0x36>
 8000868:	1892      	adds	r2, r2, r2
 800086a:	415b      	adcs	r3, r3
 800086c:	0001      	movs	r1, r0
	t=(signed)(x-0x33e647d9); if(t>=0) x=t,y+=y>>1;
 800086e:	4862      	ldr	r0, [pc, #392]	@ (80009f8 <intexp+0x1c0>)
 8000870:	180e      	adds	r6, r1, r0
 8000872:	d406      	bmi.n	8000882 <intexp+0x4a>
 8000874:	07df      	lsls	r7, r3, #31
 8000876:	0850      	lsrs	r0, r2, #1
 8000878:	0859      	lsrs	r1, r3, #1
 800087a:	4338      	orrs	r0, r7
 800087c:	1812      	adds	r2, r2, r0
 800087e:	414b      	adcs	r3, r1
 8000880:	0031      	movs	r1, r6
	t=(signed)(x-0x1c8ff7c7); if(t>=0) x=t,y+=y>>2;
 8000882:	485e      	ldr	r0, [pc, #376]	@ (80009fc <intexp+0x1c4>)
 8000884:	180e      	adds	r6, r1, r0
 8000886:	d406      	bmi.n	8000896 <intexp+0x5e>
 8000888:	079f      	lsls	r7, r3, #30
 800088a:	0890      	lsrs	r0, r2, #2
 800088c:	0899      	lsrs	r1, r3, #2
 800088e:	4338      	orrs	r0, r7
 8000890:	1812      	adds	r2, r2, r0
 8000892:	414b      	adcs	r3, r1
 8000894:	0031      	movs	r1, r6
	t=(signed)(x-0x0f1383b7); if(t>=0) x=t,y+=y>>3;
 8000896:	485a      	ldr	r0, [pc, #360]	@ (8000a00 <intexp+0x1c8>)
 8000898:	180e      	adds	r6, r1, r0
 800089a:	d406      	bmi.n	80008aa <intexp+0x72>
 800089c:	075f      	lsls	r7, r3, #29
 800089e:	08d0      	lsrs	r0, r2, #3
 80008a0:	08d9      	lsrs	r1, r3, #3
 80008a2:	4338      	orrs	r0, r7
 80008a4:	1812      	adds	r2, r2, r0
 80008a6:	414b      	adcs	r3, r1
 80008a8:	0031      	movs	r1, r6
	t=(signed)(x-0x07c28c30); if(t>=0) x=t,y+=y>>4;
 80008aa:	4856      	ldr	r0, [pc, #344]	@ (8000a04 <intexp+0x1cc>)
 80008ac:	180e      	adds	r6, r1, r0
 80008ae:	d406      	bmi.n	80008be <intexp+0x86>
 80008b0:	071f      	lsls	r7, r3, #28
 80008b2:	0910      	lsrs	r0, r2, #4
 80008b4:	0919      	lsrs	r1, r3, #4
 80008b6:	4338      	orrs	r0, r7
 80008b8:	1812      	adds	r2, r2, r0
 80008ba:	414b      	adcs	r3, r1
 80008bc:	0031      	movs	r1, r6
	t=(signed)(x-0x03f05361); if(t>=0) x=t,y+=y>>5;
 80008be:	4852      	ldr	r0, [pc, #328]	@ (8000a08 <intexp+0x1d0>)
 80008c0:	180e      	adds	r6, r1, r0
 80008c2:	d406      	bmi.n	80008d2 <intexp+0x9a>
 80008c4:	06df      	lsls	r7, r3, #27
 80008c6:	0950      	lsrs	r0, r2, #5
 80008c8:	0959      	lsrs	r1, r3, #5
 80008ca:	4338      	orrs	r0, r7
 80008cc:	1812      	adds	r2, r2, r0
 80008ce:	414b      	adcs	r3, r1
 80008d0:	0031      	movs	r1, r6
	t=(signed)(x-0x01fc0a8b); if(t>=0) x=t,y+=y>>6;
 80008d2:	484e      	ldr	r0, [pc, #312]	@ (8000a0c <intexp+0x1d4>)
 80008d4:	180e      	adds	r6, r1, r0
 80008d6:	d406      	bmi.n	80008e6 <intexp+0xae>
 80008d8:	069f      	lsls	r7, r3, #26
 80008da:	0990      	lsrs	r0, r2, #6
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	4338      	orrs	r0, r7
 80008e0:	1812      	adds	r2, r2, r0
 80008e2:	414b      	adcs	r3, r1
 80008e4:	0031      	movs	r1, r6
	t=(signed)(x-0x00ff0153); if(t>=0) x=t,y+=y>>7;
 80008e6:	484a      	ldr	r0, [pc, #296]	@ (8000a10 <intexp+0x1d8>)
 80008e8:	180e      	adds	r6, r1, r0
 80008ea:	d406      	bmi.n	80008fa <intexp+0xc2>
 80008ec:	065f      	lsls	r7, r3, #25
 80008ee:	09d0      	lsrs	r0, r2, #7
 80008f0:	09d9      	lsrs	r1, r3, #7
 80008f2:	4338      	orrs	r0, r7
 80008f4:	1812      	adds	r2, r2, r0
 80008f6:	414b      	adcs	r3, r1
 80008f8:	0031      	movs	r1, r6
	t=(signed)(x-0x007fc02a); if(t>=0) x=t,y+=y>>8;
 80008fa:	4846      	ldr	r0, [pc, #280]	@ (8000a14 <intexp+0x1dc>)
 80008fc:	180e      	adds	r6, r1, r0
 80008fe:	d406      	bmi.n	800090e <intexp+0xd6>
 8000900:	061f      	lsls	r7, r3, #24
 8000902:	0a10      	lsrs	r0, r2, #8
 8000904:	0a19      	lsrs	r1, r3, #8
 8000906:	4338      	orrs	r0, r7
 8000908:	1812      	adds	r2, r2, r0
 800090a:	414b      	adcs	r3, r1
 800090c:	0031      	movs	r1, r6
	t=(signed)(x-0x003ff005); if(t>=0) x=t,y+=y>>9;
 800090e:	4842      	ldr	r0, [pc, #264]	@ (8000a18 <intexp+0x1e0>)
 8000910:	180e      	adds	r6, r1, r0
 8000912:	d406      	bmi.n	8000922 <intexp+0xea>
 8000914:	05df      	lsls	r7, r3, #23
 8000916:	0a50      	lsrs	r0, r2, #9
 8000918:	0a59      	lsrs	r1, r3, #9
 800091a:	4338      	orrs	r0, r7
 800091c:	1812      	adds	r2, r2, r0
 800091e:	414b      	adcs	r3, r1
 8000920:	0031      	movs	r1, r6
	t=(signed)(x-0x001ffc00); if(t>=0) x=t,y+=y>>10;
 8000922:	483e      	ldr	r0, [pc, #248]	@ (8000a1c <intexp+0x1e4>)
 8000924:	180e      	adds	r6, r1, r0
 8000926:	d406      	bmi.n	8000936 <intexp+0xfe>
 8000928:	059f      	lsls	r7, r3, #22
 800092a:	0a90      	lsrs	r0, r2, #10
 800092c:	0a99      	lsrs	r1, r3, #10
 800092e:	4338      	orrs	r0, r7
 8000930:	1812      	adds	r2, r2, r0
 8000932:	414b      	adcs	r3, r1
 8000934:	0031      	movs	r1, r6
	t=(signed)(x-0x000fff00); if(t>=0) x=t,y+=y>>11;
 8000936:	483a      	ldr	r0, [pc, #232]	@ (8000a20 <intexp+0x1e8>)
 8000938:	180e      	adds	r6, r1, r0
 800093a:	d406      	bmi.n	800094a <intexp+0x112>
 800093c:	055f      	lsls	r7, r3, #21
 800093e:	0ad0      	lsrs	r0, r2, #11
 8000940:	0ad9      	lsrs	r1, r3, #11
 8000942:	4338      	orrs	r0, r7
 8000944:	1812      	adds	r2, r2, r0
 8000946:	414b      	adcs	r3, r1
 8000948:	0031      	movs	r1, r6
	t=(signed)(x-0x0007ffc0); if(t>=0) x=t,y+=y>>12;
 800094a:	4836      	ldr	r0, [pc, #216]	@ (8000a24 <intexp+0x1ec>)
 800094c:	180e      	adds	r6, r1, r0
 800094e:	d406      	bmi.n	800095e <intexp+0x126>
 8000950:	051f      	lsls	r7, r3, #20
 8000952:	0b10      	lsrs	r0, r2, #12
 8000954:	0b19      	lsrs	r1, r3, #12
 8000956:	4338      	orrs	r0, r7
 8000958:	1812      	adds	r2, r2, r0
 800095a:	414b      	adcs	r3, r1
 800095c:	0031      	movs	r1, r6
	t=(signed)(x-0x0003fff0); if(t>=0) x=t,y+=y>>13;
 800095e:	4832      	ldr	r0, [pc, #200]	@ (8000a28 <intexp+0x1f0>)
 8000960:	180e      	adds	r6, r1, r0
 8000962:	d406      	bmi.n	8000972 <intexp+0x13a>
 8000964:	04df      	lsls	r7, r3, #19
 8000966:	0b50      	lsrs	r0, r2, #13
 8000968:	0b59      	lsrs	r1, r3, #13
 800096a:	4338      	orrs	r0, r7
 800096c:	1812      	adds	r2, r2, r0
 800096e:	414b      	adcs	r3, r1
 8000970:	0031      	movs	r1, r6
	t=(signed)(x-0x0001fffc); if(t>=0) x=t,y+=y>>14;
 8000972:	482e      	ldr	r0, [pc, #184]	@ (8000a2c <intexp+0x1f4>)
 8000974:	180e      	adds	r6, r1, r0
 8000976:	d406      	bmi.n	8000986 <intexp+0x14e>
 8000978:	049f      	lsls	r7, r3, #18
 800097a:	0b90      	lsrs	r0, r2, #14
 800097c:	0b99      	lsrs	r1, r3, #14
 800097e:	4338      	orrs	r0, r7
 8000980:	1812      	adds	r2, r2, r0
 8000982:	414b      	adcs	r3, r1
 8000984:	0031      	movs	r1, r6
	y=(y*(0x80000000+x))>>31;
 8000986:	2080      	movs	r0, #128	@ 0x80
 8000988:	0600      	lsls	r0, r0, #24
 800098a:	1808      	adds	r0, r1, r0
 800098c:	2100      	movs	r1, #0
 800098e:	f004 f9db 	bl	8004d48 <__aeabi_lmul>
 8000992:	004b      	lsls	r3, r1, #1
 8000994:	0fc6      	lsrs	r6, r0, #31
 8000996:	431e      	orrs	r6, r3
 8000998:	0fcf      	lsrs	r7, r1, #31
	if(c==4) y<<=1;
 800099a:	2c04      	cmp	r4, #4
 800099c:	d101      	bne.n	80009a2 <intexp+0x16a>
 800099e:	19b6      	adds	r6, r6, r6
 80009a0:	417f      	adcs	r7, r7
	while(c){
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d10b      	bne.n	80009be <intexp+0x186>
	return y;
 80009a6:	0030      	movs	r0, r6
	switch(k){
 80009a8:	2c04      	cmp	r4, #4
 80009aa:	d813      	bhi.n	80009d4 <intexp+0x19c>
 80009ac:	0020      	movs	r0, r4
 80009ae:	f7ff fb87 	bl	80000c0 <__gnu_thumb1_case_uqi>
 80009b2:	191c      	.short	0x191c
 80009b4:	1216      	.short	0x1216
 80009b6:	10          	.byte	0x10
 80009b7:	00          	.byte	0x00
	t=(signed)(x-0xB17217F7); if(t>=0) x=t,y<<=2;
 80009b8:	2280      	movs	r2, #128	@ 0x80
 80009ba:	0612      	lsls	r2, r2, #24
 80009bc:	e750      	b.n	8000860 <intexp+0x28>
		y=(y*y)>>32;
 80009be:	0032      	movs	r2, r6
 80009c0:	003b      	movs	r3, r7
 80009c2:	0030      	movs	r0, r6
 80009c4:	0039      	movs	r1, r7
 80009c6:	f004 f9bf 	bl	8004d48 <__aeabi_lmul>
 80009ca:	2700      	movs	r7, #0
 80009cc:	000e      	movs	r6, r1
		c--;
 80009ce:	3d01      	subs	r5, #1
 80009d0:	e7e7      	b.n	80009a2 <intexp+0x16a>
		case 4: return (y);
 80009d2:	0030      	movs	r0, r6
}
 80009d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		case 3:	return (y>>8);
 80009d6:	0638      	lsls	r0, r7, #24
 80009d8:	0a36      	lsrs	r6, r6, #8
		case 0: return (y>>29);
 80009da:	4330      	orrs	r0, r6
 80009dc:	e7fa      	b.n	80009d4 <intexp+0x19c>
		case 2: return (y>>20);
 80009de:	0338      	lsls	r0, r7, #12
 80009e0:	0d36      	lsrs	r6, r6, #20
 80009e2:	e7fa      	b.n	80009da <intexp+0x1a2>
		case 1: return (y>>26);
 80009e4:	01b8      	lsls	r0, r7, #6
 80009e6:	0eb6      	lsrs	r6, r6, #26
 80009e8:	e7f7      	b.n	80009da <intexp+0x1a2>
		case 0: return (y>>29);
 80009ea:	00f8      	lsls	r0, r7, #3
 80009ec:	0f76      	lsrs	r6, r6, #29
 80009ee:	e7f4      	b.n	80009da <intexp+0x1a2>
 80009f0:	4e8de809 	.word	0x4e8de809
 80009f4:	a746f404 	.word	0xa746f404
 80009f8:	cc19b827 	.word	0xcc19b827
 80009fc:	e3700839 	.word	0xe3700839
 8000a00:	f0ec7c49 	.word	0xf0ec7c49
 8000a04:	f83d73d0 	.word	0xf83d73d0
 8000a08:	fc0fac9f 	.word	0xfc0fac9f
 8000a0c:	fe03f575 	.word	0xfe03f575
 8000a10:	ff00fead 	.word	0xff00fead
 8000a14:	ff803fd6 	.word	0xff803fd6
 8000a18:	ffc00ffb 	.word	0xffc00ffb
 8000a1c:	ffe00400 	.word	0xffe00400
 8000a20:	fff00100 	.word	0xfff00100
 8000a24:	fff80040 	.word	0xfff80040
 8000a28:	fffc0010 	.word	0xfffc0010
 8000a2c:	fffe0004 	.word	0xfffe0004

08000a30 <itoa>:
void itoa(unsigned char *dest, int32_t source, int32_t Decimal_Point){
 8000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a32:	b08b      	sub	sp, #44	@ 0x2c
	int32_t Decades[10]={ 1000000000, 100000000, 10000000, 1000000, 100000, 10000, 1000, 100, 10, 1};
 8000a34:	466c      	mov	r4, sp
 8000a36:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <itoa+0x80>)
 8000a38:	cbe0      	ldmia	r3!, {r5, r6, r7}
 8000a3a:	c4e0      	stmia	r4!, {r5, r6, r7}
 8000a3c:	cbe0      	ldmia	r3!, {r5, r6, r7}
 8000a3e:	c4e0      	stmia	r4!, {r5, r6, r7}
 8000a40:	cbe0      	ldmia	r3!, {r5, r6, r7}
 8000a42:	c4e0      	stmia	r4!, {r5, r6, r7}
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6023      	str	r3, [r4, #0]
	if(sign) {
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	da03      	bge.n	8000a54 <itoa+0x24>
			*(dest++)='-';
 8000a4c:	232d      	movs	r3, #45	@ 0x2d
			source=-source;
 8000a4e:	4249      	negs	r1, r1
			*(dest++)='-';
 8000a50:	7003      	strb	r3, [r0, #0]
 8000a52:	3001      	adds	r0, #1
																if(k==(9-Decimal_Point)&&(Decimal_Point)) (*dest)=_DP;else (*dest)=0;
 8000a54:	0017      	movs	r7, r2
 8000a56:	2400      	movs	r4, #0
 8000a58:	1e7b      	subs	r3, r7, #1
 8000a5a:	419f      	sbcs	r7, r3
		if((digit>'0')||first_digit||(k==(9-Decimal_Point))) {	first_digit=1;
 8000a5c:	2309      	movs	r3, #9
																if(k==(9-Decimal_Point)&&(Decimal_Point)) (*dest)=_DP;else (*dest)=0;
 8000a5e:	46a4      	mov	ip, r4
 8000a60:	01ff      	lsls	r7, r7, #7
		if((digit>'0')||first_digit||(k==(9-Decimal_Point))) {	first_digit=1;
 8000a62:	1a9a      	subs	r2, r3, r2
		while(source>=Decades[k]) { source-=Decades[k]; digit++; }
 8000a64:	466d      	mov	r5, sp
 8000a66:	00a3      	lsls	r3, r4, #2
 8000a68:	58eb      	ldr	r3, [r5, r3]
		digit='0';
 8000a6a:	2530      	movs	r5, #48	@ 0x30
 8000a6c:	e002      	b.n	8000a74 <itoa+0x44>
		while(source>=Decades[k]) { source-=Decades[k]; digit++; }
 8000a6e:	3501      	adds	r5, #1
 8000a70:	1ac9      	subs	r1, r1, r3
 8000a72:	b2ed      	uxtb	r5, r5
 8000a74:	428b      	cmp	r3, r1
 8000a76:	ddfa      	ble.n	8000a6e <itoa+0x3e>
		if((digit>'0')||first_digit||(k==(9-Decimal_Point))) {	first_digit=1;
 8000a78:	2d30      	cmp	r5, #48	@ 0x30
 8000a7a:	d806      	bhi.n	8000a8a <itoa+0x5a>
 8000a7c:	4663      	mov	r3, ip
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d103      	bne.n	8000a8a <itoa+0x5a>
 8000a82:	42a2      	cmp	r2, r4
 8000a84:	d10c      	bne.n	8000aa0 <itoa+0x70>
																if(k==(9-Decimal_Point)&&(Decimal_Point)) (*dest)=_DP;else (*dest)=0;
 8000a86:	003b      	movs	r3, r7
 8000a88:	e005      	b.n	8000a96 <itoa+0x66>
 8000a8a:	1b13      	subs	r3, r2, r4
 8000a8c:	001e      	movs	r6, r3
 8000a8e:	4273      	negs	r3, r6
 8000a90:	4173      	adcs	r3, r6
 8000a92:	425b      	negs	r3, r3
 8000a94:	403b      	ands	r3, r7
																(*dest++)|=digit;
 8000a96:	432b      	orrs	r3, r5
 8000a98:	7003      	strb	r3, [r0, #0]
		if((digit>'0')||first_digit||(k==(9-Decimal_Point))) {	first_digit=1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	469c      	mov	ip, r3
																(*dest++)|=digit;
 8000a9e:	3001      	adds	r0, #1
	for(int k=0; k<10; k++){
 8000aa0:	3401      	adds	r4, #1
 8000aa2:	2c0a      	cmp	r4, #10
 8000aa4:	d1de      	bne.n	8000a64 <itoa+0x34>
	*dest=0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	7003      	strb	r3, [r0, #0]
}
 8000aaa:	b00b      	add	sp, #44	@ 0x2c
 8000aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	08004ff0 	.word	0x08004ff0

08000ab4 <str2len>:
int32_t str2len(const unsigned char *source){
 8000ab4:	b510      	push	{r4, lr}
	for(temp=0;*source;temp++,source++);
 8000ab6:	f7ff fcdb 	bl	8000470 <strlen>
}
 8000aba:	bd10      	pop	{r4, pc}

08000abc <atoi>:
int32_t atoi(unsigned char *source){
 8000abc:	b570      	push	{r4, r5, r6, lr}
	while(((*source<'1')||(*source>'9'))&&(*source!='x')&&(*source!='X')&&(*source!=0)){ if(*source=='-') sign=1; source++;}
 8000abe:	2220      	movs	r2, #32
	int32_t result=0, sign=0, base=10, char_idx;
 8000ac0:	2500      	movs	r5, #0
	while(((*source<'1')||(*source>'9'))&&(*source!='x')&&(*source!='X')&&(*source!=0)){ if(*source=='-') sign=1; source++;}
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	7803      	ldrb	r3, [r0, #0]
 8000ac6:	001c      	movs	r4, r3
 8000ac8:	3c31      	subs	r4, #49	@ 0x31
 8000aca:	2c08      	cmp	r4, #8
 8000acc:	d905      	bls.n	8000ada <atoi+0x1e>
 8000ace:	001c      	movs	r4, r3
 8000ad0:	4394      	bics	r4, r2
 8000ad2:	2c58      	cmp	r4, #88	@ 0x58
 8000ad4:	d008      	beq.n	8000ae8 <atoi+0x2c>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <atoi+0x22>
	int32_t result=0, sign=0, base=10, char_idx;
 8000ada:	240a      	movs	r4, #10
 8000adc:	e006      	b.n	8000aec <atoi+0x30>
	while(((*source<'1')||(*source>'9'))&&(*source!='x')&&(*source!='X')&&(*source!=0)){ if(*source=='-') sign=1; source++;}
 8000ade:	2b2d      	cmp	r3, #45	@ 0x2d
 8000ae0:	d100      	bne.n	8000ae4 <atoi+0x28>
 8000ae2:	000d      	movs	r5, r1
 8000ae4:	3001      	adds	r0, #1
 8000ae6:	e7ed      	b.n	8000ac4 <atoi+0x8>
	if(*source=='x'||*source=='X') { base=0x10; source++; }
 8000ae8:	2410      	movs	r4, #16
 8000aea:	3001      	adds	r0, #1
	for(char_idx=0;source[char_idx];char_idx++){
 8000aec:	0002      	movs	r2, r0
			if(base==0x10) result<<=4; else result*=base;
 8000aee:	260a      	movs	r6, #10
	int32_t result=0, sign=0, base=10, char_idx;
 8000af0:	2000      	movs	r0, #0
	for(char_idx=0;source[char_idx];char_idx++){
 8000af2:	7813      	ldrb	r3, [r2, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d103      	bne.n	8000b00 <atoi+0x44>
	if(sign) result=-result;
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d000      	beq.n	8000afe <atoi+0x42>
 8000afc:	4240      	negs	r0, r0
}
 8000afe:	bd70      	pop	{r4, r5, r6, pc}
		if((source[char_idx]>='a')&&(source[char_idx]<='f')&&(base==0x10)){
 8000b00:	0019      	movs	r1, r3
 8000b02:	3961      	subs	r1, #97	@ 0x61
 8000b04:	2905      	cmp	r1, #5
 8000b06:	d804      	bhi.n	8000b12 <atoi+0x56>
 8000b08:	2c10      	cmp	r4, #16
 8000b0a:	d102      	bne.n	8000b12 <atoi+0x56>
			result<<=4;
 8000b0c:	0100      	lsls	r0, r0, #4
			result+=source[char_idx]-'a'+0x0A;
 8000b0e:	310a      	adds	r1, #10
 8000b10:	1808      	adds	r0, r1, r0
		if((source[char_idx]>='A')&&(source[char_idx]<='F')&&(base==0x10)){
 8000b12:	0019      	movs	r1, r3
 8000b14:	3941      	subs	r1, #65	@ 0x41
 8000b16:	2905      	cmp	r1, #5
 8000b18:	d804      	bhi.n	8000b24 <atoi+0x68>
 8000b1a:	2c10      	cmp	r4, #16
 8000b1c:	d102      	bne.n	8000b24 <atoi+0x68>
			result<<=4;
 8000b1e:	0100      	lsls	r0, r0, #4
			result+=source[char_idx]-'A'+0x0A;
 8000b20:	310a      	adds	r1, #10
 8000b22:	1808      	adds	r0, r1, r0
		if((source[char_idx]>='0')&&(source[char_idx]<='9')){
 8000b24:	3b30      	subs	r3, #48	@ 0x30
 8000b26:	b2d9      	uxtb	r1, r3
 8000b28:	2909      	cmp	r1, #9
 8000b2a:	d805      	bhi.n	8000b38 <atoi+0x7c>
			if(base==0x10) result<<=4; else result*=base;
 8000b2c:	0031      	movs	r1, r6
 8000b2e:	4341      	muls	r1, r0
 8000b30:	2c10      	cmp	r4, #16
 8000b32:	d100      	bne.n	8000b36 <atoi+0x7a>
 8000b34:	0101      	lsls	r1, r0, #4
			result+=source[char_idx]-'0';
 8000b36:	1858      	adds	r0, r3, r1
	for(char_idx=0;source[char_idx];char_idx++){
 8000b38:	3201      	adds	r2, #1
 8000b3a:	e7da      	b.n	8000af2 <atoi+0x36>

08000b3c <Edit_Value>:
void Edit_Value(int32_t *Val, int32_t Signed, int32_t dot){
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	0006      	movs	r6, r0
 8000b40:	b08b      	sub	sp, #44	@ 0x2c
	char Display_String[4]="1d0", Str_Buffer[13]="0000000000000";
 8000b42:	4b96      	ldr	r3, [pc, #600]	@ (8000d9c <Edit_Value+0x260>)
void Edit_Value(int32_t *Val, int32_t Signed, int32_t dot){
 8000b44:	9200      	str	r2, [sp, #0]
 8000b46:	000d      	movs	r5, r1
	char Display_String[4]="1d0", Str_Buffer[13]="0000000000000";
 8000b48:	220d      	movs	r2, #13
 8000b4a:	4995      	ldr	r1, [pc, #596]	@ (8000da0 <Edit_Value+0x264>)
 8000b4c:	a806      	add	r0, sp, #24
 8000b4e:	9305      	str	r3, [sp, #20]
 8000b50:	f004 fa38 	bl	8004fc4 <memcpy>
	unsigned char Disp_Backup[3]={Disp_Chars[0],Disp_Chars[1],Disp_Chars[2]};
 8000b54:	4b93      	ldr	r3, [pc, #588]	@ (8000da4 <Edit_Value+0x268>)
	if(*Val>=0) itoa((unsigned char *)Str_Buffer, *Val,0); else itoa((unsigned char *)Str_Buffer, -(*Val),0);
 8000b56:	6831      	ldr	r1, [r6, #0]
	unsigned char Disp_Backup[3]={Disp_Chars[0],Disp_Chars[1],Disp_Chars[2]};
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	9201      	str	r2, [sp, #4]
 8000b5e:	785a      	ldrb	r2, [r3, #1]
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	9202      	str	r2, [sp, #8]
 8000b64:	789b      	ldrb	r3, [r3, #2]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	9303      	str	r3, [sp, #12]
	if(*Val>=0) itoa((unsigned char *)Str_Buffer, *Val,0); else itoa((unsigned char *)Str_Buffer, -(*Val),0);
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	db0c      	blt.n	8000b88 <Edit_Value+0x4c>
 8000b6e:	2200      	movs	r2, #0
 8000b70:	a806      	add	r0, sp, #24
 8000b72:	f7ff ff5d 	bl	8000a30 <itoa>
												 Str_Buffer[0]='0';
 8000b76:	2430      	movs	r4, #48	@ 0x30
	while((Digit_Count=str2len((unsigned char *)Str_Buffer))<13){
 8000b78:	a806      	add	r0, sp, #24
 8000b7a:	f7ff ff9b 	bl	8000ab4 <str2len>
 8000b7e:	280c      	cmp	r0, #12
 8000b80:	dc0f      	bgt.n	8000ba2 <Edit_Value+0x66>
 8000b82:	ab06      	add	r3, sp, #24
 8000b84:	181b      	adds	r3, r3, r0
 8000b86:	e006      	b.n	8000b96 <Edit_Value+0x5a>
	if(*Val>=0) itoa((unsigned char *)Str_Buffer, *Val,0); else itoa((unsigned char *)Str_Buffer, -(*Val),0);
 8000b88:	4249      	negs	r1, r1
 8000b8a:	e7f0      	b.n	8000b6e <Edit_Value+0x32>
		for(int __ind=Digit_Count;__ind;__ind--) {	Str_Buffer[__ind+1]=Str_Buffer[__ind];
 8000b8c:	785a      	ldrb	r2, [r3, #1]
													Str_Buffer[__ind]=Str_Buffer[__ind-1];
 8000b8e:	3801      	subs	r0, #1
		for(int __ind=Digit_Count;__ind;__ind--) {	Str_Buffer[__ind+1]=Str_Buffer[__ind];
 8000b90:	709a      	strb	r2, [r3, #2]
													Str_Buffer[__ind]=Str_Buffer[__ind-1];
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	705a      	strb	r2, [r3, #1]
		for(int __ind=Digit_Count;__ind;__ind--) {	Str_Buffer[__ind+1]=Str_Buffer[__ind];
 8000b96:	3b01      	subs	r3, #1
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d1f7      	bne.n	8000b8c <Edit_Value+0x50>
												 Str_Buffer[0]='0';
 8000b9c:	ab04      	add	r3, sp, #16
 8000b9e:	721c      	strb	r4, [r3, #8]
 8000ba0:	e7ea      	b.n	8000b78 <Edit_Value+0x3c>
	if((*Val<0)&&(Signed)) Str_Buffer[0]='-'; 
 8000ba2:	6833      	ldr	r3, [r6, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	da04      	bge.n	8000bb2 <Edit_Value+0x76>
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d002      	beq.n	8000bb2 <Edit_Value+0x76>
 8000bac:	232d      	movs	r3, #45	@ 0x2d
 8000bae:	aa04      	add	r2, sp, #16
 8000bb0:	7213      	strb	r3, [r2, #8]
	Flashing_Flag=1;
 8000bb2:	2201      	movs	r2, #1
	Display_String[2]=Str_Buffer[12];
 8000bb4:	ab04      	add	r3, sp, #16
 8000bb6:	7d1b      	ldrb	r3, [r3, #20]
 8000bb8:	a805      	add	r0, sp, #20
 8000bba:	7083      	strb	r3, [r0, #2]
	Flashing_Flag=1;
 8000bbc:	4b7a      	ldr	r3, [pc, #488]	@ (8000da8 <Edit_Value+0x26c>)
 8000bbe:	601a      	str	r2, [r3, #0]
	while(Pressed_BSet);
 8000bc0:	4a7a      	ldr	r2, [pc, #488]	@ (8000dac <Edit_Value+0x270>)
 8000bc2:	6814      	ldr	r4, [r2, #0]
 8000bc4:	2c00      	cmp	r4, #0
 8000bc6:	d1fc      	bne.n	8000bc2 <Edit_Value+0x86>
	Put_Buff_On_Display((unsigned char *)Display_String,0); 
 8000bc8:	0021      	movs	r1, r4
	Flashing_Flag=0;
 8000bca:	601c      	str	r4, [r3, #0]
	Put_Buff_On_Display((unsigned char *)Display_String,0); 
 8000bcc:	f7ff fdac 	bl	8000728 <Put_Buff_On_Display>
	D1Flash=1;
 8000bd0:	2201      	movs	r2, #1
			if(Digit_Count!=9) Display_String[2]=Str_Buffer[12-Digit_Count]; else Display_String[2]=Str_Buffer[0]=='-'?'-':' ';
 8000bd2:	270c      	movs	r7, #12
	D1Flash=1;
 8000bd4:	4b76      	ldr	r3, [pc, #472]	@ (8000db0 <Edit_Value+0x274>)
 8000bd6:	601a      	str	r2, [r3, #0]
	while((Pressed_BSet!=3)&&!Tout()){
 8000bd8:	4b74      	ldr	r3, [pc, #464]	@ (8000dac <Edit_Value+0x270>)
 8000bda:	4976      	ldr	r1, [pc, #472]	@ (8000db4 <Edit_Value+0x278>)
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	4a76      	ldr	r2, [pc, #472]	@ (8000db8 <Edit_Value+0x27c>)
 8000be0:	2803      	cmp	r0, #3
 8000be2:	d002      	beq.n	8000bea <Edit_Value+0xae>
 8000be4:	6808      	ldr	r0, [r1, #0]
 8000be6:	4290      	cmp	r0, r2
 8000be8:	dd16      	ble.n	8000c18 <Edit_Value+0xdc>
	Pressed_BSet=0;
 8000bea:	2000      	movs	r0, #0
 8000bec:	6018      	str	r0, [r3, #0]
	if(!Tout()) *Val=atoi((unsigned char *)Str_Buffer);
 8000bee:	680b      	ldr	r3, [r1, #0]
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	dc03      	bgt.n	8000bfc <Edit_Value+0xc0>
 8000bf4:	a806      	add	r0, sp, #24
 8000bf6:	f7ff ff61 	bl	8000abc <atoi>
 8000bfa:	6030      	str	r0, [r6, #0]
	D1Flash=D3Flash=0;
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4b6f      	ldr	r3, [pc, #444]	@ (8000dbc <Edit_Value+0x280>)
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	4b6b      	ldr	r3, [pc, #428]	@ (8000db0 <Edit_Value+0x274>)
 8000c04:	601a      	str	r2, [r3, #0]
	Disp_Chars[0]=Disp_Backup[0];
 8000c06:	4b67      	ldr	r3, [pc, #412]	@ (8000da4 <Edit_Value+0x268>)
 8000c08:	9a01      	ldr	r2, [sp, #4]
 8000c0a:	701a      	strb	r2, [r3, #0]
	Disp_Chars[1]=Disp_Backup[1];
 8000c0c:	9a02      	ldr	r2, [sp, #8]
 8000c0e:	705a      	strb	r2, [r3, #1]
	Disp_Chars[2]=Disp_Backup[2];
 8000c10:	9a03      	ldr	r2, [sp, #12]
 8000c12:	709a      	strb	r2, [r3, #2]
}
 8000c14:	b00b      	add	sp, #44	@ 0x2c
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (Pressed_BSet==1 ) { Pressed_BSet=0;
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	2801      	cmp	r0, #1
 8000c1c:	d10c      	bne.n	8000c38 <Edit_Value+0xfc>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
								if(D1Flash==1) {D1Flash=0;D3Flash=1;} else {D1Flash=1;D3Flash=0;} 
 8000c22:	4b63      	ldr	r3, [pc, #396]	@ (8000db0 <Edit_Value+0x274>)
 8000c24:	6819      	ldr	r1, [r3, #0]
 8000c26:	468c      	mov	ip, r1
 8000c28:	4662      	mov	r2, ip
 8000c2a:	4964      	ldr	r1, [pc, #400]	@ (8000dbc <Edit_Value+0x280>)
 8000c2c:	2a01      	cmp	r2, #1
 8000c2e:	d12e      	bne.n	8000c8e <Edit_Value+0x152>
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	4663      	mov	r3, ip
 8000c36:	600b      	str	r3, [r1, #0]
		if (((Pressed_BPlus>1)&&(!(Tick_Timer&(0x3FF>>(Pressed_BPlus>>2)))))||(Pressed_BPlus==1)){
 8000c38:	4b61      	ldr	r3, [pc, #388]	@ (8000dc0 <Edit_Value+0x284>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2a01      	cmp	r2, #1
 8000c3e:	d907      	bls.n	8000c50 <Edit_Value+0x114>
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b60      	ldr	r3, [pc, #384]	@ (8000dc4 <Edit_Value+0x288>)
 8000c44:	0892      	lsrs	r2, r2, #2
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	4b5f      	ldr	r3, [pc, #380]	@ (8000dc8 <Edit_Value+0x28c>)
 8000c4a:	4113      	asrs	r3, r2
 8000c4c:	4219      	tst	r1, r3
 8000c4e:	d003      	beq.n	8000c58 <Edit_Value+0x11c>
 8000c50:	4b5b      	ldr	r3, [pc, #364]	@ (8000dc0 <Edit_Value+0x284>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d132      	bne.n	8000cbe <Edit_Value+0x182>
			if(Pressed_BPlus==1) Pressed_BPlus=0;
 8000c58:	4b59      	ldr	r3, [pc, #356]	@ (8000dc0 <Edit_Value+0x284>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	2a01      	cmp	r2, #1
 8000c5e:	d101      	bne.n	8000c64 <Edit_Value+0x128>
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
			if(D1Flash){
 8000c64:	4b52      	ldr	r3, [pc, #328]	@ (8000db0 <Edit_Value+0x274>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	ab06      	add	r3, sp, #24
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	d055      	beq.n	8000d1a <Edit_Value+0x1de>
				Digit_Count=(Digit_Count>=9)?0:Digit_Count+1;
 8000c6e:	aa05      	add	r2, sp, #20
 8000c70:	2c08      	cmp	r4, #8
 8000c72:	dc0f      	bgt.n	8000c94 <Edit_Value+0x158>
 8000c74:	3401      	adds	r4, #1
				if((Digit_Count==9)&&(!Signed)) Digit_Count=0; 
 8000c76:	2c09      	cmp	r4, #9
 8000c78:	d10d      	bne.n	8000c96 <Edit_Value+0x15a>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d04b      	beq.n	8000d16 <Edit_Value+0x1da>
				if(Digit_Count<9) Display_String[0]=Digit_Count+'1'; else Display_String[0]='-';	
 8000c7e:	212d      	movs	r1, #45	@ 0x2d
 8000c80:	7011      	strb	r1, [r2, #0]
			if(Digit_Count!=9) Display_String[2]=Str_Buffer[12-Digit_Count]; else Display_String[2]=Str_Buffer[0]=='-'?'-':' ';
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c86:	d000      	beq.n	8000c8a <Edit_Value+0x14e>
 8000c88:	2320      	movs	r3, #32
 8000c8a:	2409      	movs	r4, #9
 8000c8c:	e009      	b.n	8000ca2 <Edit_Value+0x166>
								if(D1Flash==1) {D1Flash=0;D3Flash=1;} else {D1Flash=1;D3Flash=0;} 
 8000c8e:	6018      	str	r0, [r3, #0]
 8000c90:	2300      	movs	r3, #0
 8000c92:	e7d0      	b.n	8000c36 <Edit_Value+0xfa>
				Digit_Count=(Digit_Count>=9)?0:Digit_Count+1;
 8000c94:	2400      	movs	r4, #0
				if(Digit_Count<9) Display_String[0]=Digit_Count+'1'; else Display_String[0]='-';	
 8000c96:	0023      	movs	r3, r4
 8000c98:	3331      	adds	r3, #49	@ 0x31
 8000c9a:	7013      	strb	r3, [r2, #0]
			if(Digit_Count!=9) Display_String[2]=Str_Buffer[12-Digit_Count]; else Display_String[2]=Str_Buffer[0]=='-'?'-':' ';
 8000c9c:	1b3b      	subs	r3, r7, r4
 8000c9e:	aa06      	add	r2, sp, #24
 8000ca0:	5cd3      	ldrb	r3, [r2, r3]
 8000ca2:	a805      	add	r0, sp, #20
 8000ca4:	7083      	strb	r3, [r0, #2]
			Put_Buff_On_Display((unsigned char *)Display_String,(Digit_Count!=(dot-1))?0:2); 
 8000ca6:	9b00      	ldr	r3, [sp, #0]
 8000ca8:	1e59      	subs	r1, r3, #1
 8000caa:	1b09      	subs	r1, r1, r4
 8000cac:	424b      	negs	r3, r1
 8000cae:	4159      	adcs	r1, r3
 8000cb0:	0049      	lsls	r1, r1, #1
 8000cb2:	f7ff fd39 	bl	8000728 <Put_Buff_On_Display>
			Tick_Timer++;
 8000cb6:	4a43      	ldr	r2, [pc, #268]	@ (8000dc4 <Edit_Value+0x288>)
 8000cb8:	6813      	ldr	r3, [r2, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	6013      	str	r3, [r2, #0]
		if (((Pressed_BMinus>1)&&(!(Tick_Timer&(0x3FF>>(Pressed_BMinus>>2)))))||(Pressed_BMinus==1)){
 8000cbe:	4b43      	ldr	r3, [pc, #268]	@ (8000dcc <Edit_Value+0x290>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	2a01      	cmp	r2, #1
 8000cc4:	d907      	bls.n	8000cd6 <Edit_Value+0x19a>
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8000dc4 <Edit_Value+0x288>)
 8000cca:	0892      	lsrs	r2, r2, #2
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	4b3e      	ldr	r3, [pc, #248]	@ (8000dc8 <Edit_Value+0x28c>)
 8000cd0:	4113      	asrs	r3, r2
 8000cd2:	4219      	tst	r1, r3
 8000cd4:	d004      	beq.n	8000ce0 <Edit_Value+0x1a4>
 8000cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000dcc <Edit_Value+0x290>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d000      	beq.n	8000ce0 <Edit_Value+0x1a4>
 8000cde:	e77b      	b.n	8000bd8 <Edit_Value+0x9c>
			if(Pressed_BMinus==1) Pressed_BMinus=0;
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8000dcc <Edit_Value+0x290>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	2a01      	cmp	r2, #1
 8000ce6:	d101      	bne.n	8000cec <Edit_Value+0x1b0>
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
			if(D1Flash){
 8000cec:	4b30      	ldr	r3, [pc, #192]	@ (8000db0 <Edit_Value+0x274>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	ab06      	add	r3, sp, #24
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d03e      	beq.n	8000d74 <Edit_Value+0x238>
				Digit_Count=(Digit_Count<=0)?9:Digit_Count-1;
 8000cf6:	aa05      	add	r2, sp, #20
 8000cf8:	2c00      	cmp	r4, #0
 8000cfa:	dd02      	ble.n	8000d02 <Edit_Value+0x1c6>
 8000cfc:	3c01      	subs	r4, #1
				if((Digit_Count==9)&&(!Signed)) Digit_Count=8;
 8000cfe:	2c09      	cmp	r4, #9
 8000d00:	d11e      	bne.n	8000d40 <Edit_Value+0x204>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d020      	beq.n	8000d48 <Edit_Value+0x20c>
				if(Digit_Count<9) Display_String[0]=Digit_Count+'1'; else Display_String[0]='-';	
 8000d06:	212d      	movs	r1, #45	@ 0x2d
 8000d08:	7011      	strb	r1, [r2, #0]
			if(Digit_Count!=9) Display_String[2]=Str_Buffer[12-Digit_Count]; else Display_String[2]=Str_Buffer[0]=='-'?'-':' ';
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b2d      	cmp	r3, #45	@ 0x2d
 8000d0e:	d000      	beq.n	8000d12 <Edit_Value+0x1d6>
 8000d10:	2320      	movs	r3, #32
 8000d12:	2409      	movs	r4, #9
 8000d14:	e01f      	b.n	8000d56 <Edit_Value+0x21a>
				Digit_Count=(Digit_Count>=9)?0:Digit_Count+1;
 8000d16:	002c      	movs	r4, r5
 8000d18:	e7bd      	b.n	8000c96 <Edit_Value+0x15a>
				if(Digit_Count!=9) Str_Buffer[12-Digit_Count]=(Str_Buffer[12-Digit_Count]=='9')?'0':Str_Buffer[12-Digit_Count]+1;
 8000d1a:	2c09      	cmp	r4, #9
 8000d1c:	d009      	beq.n	8000d32 <Edit_Value+0x1f6>
 8000d1e:	1b3a      	subs	r2, r7, r4
 8000d20:	5c9b      	ldrb	r3, [r3, r2]
 8000d22:	2130      	movs	r1, #48	@ 0x30
 8000d24:	2b39      	cmp	r3, #57	@ 0x39
 8000d26:	d001      	beq.n	8000d2c <Edit_Value+0x1f0>
 8000d28:	3301      	adds	r3, #1
 8000d2a:	b2d9      	uxtb	r1, r3
 8000d2c:	ab06      	add	r3, sp, #24
 8000d2e:	5499      	strb	r1, [r3, r2]
			if(Digit_Count!=9) Display_String[2]=Str_Buffer[12-Digit_Count]; else Display_String[2]=Str_Buffer[0]=='-'?'-':' ';
 8000d30:	e7b4      	b.n	8000c9c <Edit_Value+0x160>
				else Str_Buffer[0]=(Str_Buffer[0]=='0')?'-':'0';
 8000d32:	2230      	movs	r2, #48	@ 0x30
 8000d34:	7819      	ldrb	r1, [r3, #0]
 8000d36:	4291      	cmp	r1, r2
 8000d38:	d100      	bne.n	8000d3c <Edit_Value+0x200>
 8000d3a:	3a03      	subs	r2, #3
 8000d3c:	701a      	strb	r2, [r3, #0]
			if(Digit_Count!=9) Display_String[2]=Str_Buffer[12-Digit_Count]; else Display_String[2]=Str_Buffer[0]=='-'?'-':' ';
 8000d3e:	e7a0      	b.n	8000c82 <Edit_Value+0x146>
				if(Digit_Count<9) Display_String[0]=Digit_Count+'1'; else Display_String[0]='-';	
 8000d40:	2c08      	cmp	r4, #8
 8000d42:	dd02      	ble.n	8000d4a <Edit_Value+0x20e>
 8000d44:	232d      	movs	r3, #45	@ 0x2d
 8000d46:	e002      	b.n	8000d4e <Edit_Value+0x212>
				if((Digit_Count==9)&&(!Signed)) Digit_Count=8;
 8000d48:	2408      	movs	r4, #8
				if(Digit_Count<9) Display_String[0]=Digit_Count+'1'; else Display_String[0]='-';	
 8000d4a:	0023      	movs	r3, r4
 8000d4c:	3331      	adds	r3, #49	@ 0x31
 8000d4e:	7013      	strb	r3, [r2, #0]
			if(Digit_Count!=9) Display_String[2]=Str_Buffer[12-Digit_Count]; else Display_String[2]=Str_Buffer[0]=='-'?'-':' ';
 8000d50:	1b3b      	subs	r3, r7, r4
 8000d52:	aa06      	add	r2, sp, #24
 8000d54:	5cd3      	ldrb	r3, [r2, r3]
 8000d56:	a805      	add	r0, sp, #20
 8000d58:	7083      	strb	r3, [r0, #2]
			Put_Buff_On_Display((unsigned char *)Display_String,(Digit_Count!=(dot-1))?0:2); 
 8000d5a:	9b00      	ldr	r3, [sp, #0]
 8000d5c:	1e59      	subs	r1, r3, #1
 8000d5e:	1b09      	subs	r1, r1, r4
 8000d60:	424b      	negs	r3, r1
 8000d62:	4159      	adcs	r1, r3
 8000d64:	0049      	lsls	r1, r1, #1
 8000d66:	f7ff fcdf 	bl	8000728 <Put_Buff_On_Display>
			Tick_Timer++;
 8000d6a:	4a16      	ldr	r2, [pc, #88]	@ (8000dc4 <Edit_Value+0x288>)
 8000d6c:	6813      	ldr	r3, [r2, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e731      	b.n	8000bd8 <Edit_Value+0x9c>
				if(Digit_Count!=9) Str_Buffer[12-Digit_Count]=(Str_Buffer[12-Digit_Count]<='0')?'9':Str_Buffer[12-Digit_Count]-1;
 8000d74:	2c09      	cmp	r4, #9
 8000d76:	d009      	beq.n	8000d8c <Edit_Value+0x250>
 8000d78:	1b3a      	subs	r2, r7, r4
 8000d7a:	5c9b      	ldrb	r3, [r3, r2]
 8000d7c:	2139      	movs	r1, #57	@ 0x39
 8000d7e:	2b30      	cmp	r3, #48	@ 0x30
 8000d80:	d901      	bls.n	8000d86 <Edit_Value+0x24a>
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b2d9      	uxtb	r1, r3
 8000d86:	ab06      	add	r3, sp, #24
 8000d88:	5499      	strb	r1, [r3, r2]
			if(Digit_Count!=9) Display_String[2]=Str_Buffer[12-Digit_Count]; else Display_String[2]=Str_Buffer[0]=='-'?'-':' ';
 8000d8a:	e7e1      	b.n	8000d50 <Edit_Value+0x214>
				else Str_Buffer[0]=(Str_Buffer[0]=='0')?'-':'0';
 8000d8c:	2230      	movs	r2, #48	@ 0x30
 8000d8e:	7819      	ldrb	r1, [r3, #0]
 8000d90:	4291      	cmp	r1, r2
 8000d92:	d100      	bne.n	8000d96 <Edit_Value+0x25a>
 8000d94:	3a03      	subs	r2, #3
 8000d96:	701a      	strb	r2, [r3, #0]
			if(Digit_Count!=9) Display_String[2]=Str_Buffer[12-Digit_Count]; else Display_String[2]=Str_Buffer[0]=='-'?'-':' ';
 8000d98:	e7b7      	b.n	8000d0a <Edit_Value+0x1ce>
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	00306431 	.word	0x00306431
 8000da0:	08005018 	.word	0x08005018
 8000da4:	20000468 	.word	0x20000468
 8000da8:	200004a4 	.word	0x200004a4
 8000dac:	20000464 	.word	0x20000464
 8000db0:	200004a0 	.word	0x200004a0
 8000db4:	200004b0 	.word	0x200004b0
 8000db8:	00004e1f 	.word	0x00004e1f
 8000dbc:	20000498 	.word	0x20000498
 8000dc0:	2000045c 	.word	0x2000045c
 8000dc4:	200004d0 	.word	0x200004d0
 8000dc8:	000003ff 	.word	0x000003ff
 8000dcc:	20000460 	.word	0x20000460

08000dd0 <Get_Temperature>:
	 Analog_Flag=0;
 8000dd0:	2200      	movs	r2, #0
{
 8000dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
	 Analog_Flag=0;
 8000dd4:	4b52      	ldr	r3, [pc, #328]	@ (8000f20 <Get_Temperature+0x150>)
	 NTC.Value=ADC_to_NTC(Analog_Read);
 8000dd6:	4c53      	ldr	r4, [pc, #332]	@ (8000f24 <Get_Temperature+0x154>)
 8000dd8:	4f53      	ldr	r7, [pc, #332]	@ (8000f28 <Get_Temperature+0x158>)
{
 8000dda:	b087      	sub	sp, #28
	 Analog_Flag=0;
 8000ddc:	601a      	str	r2, [r3, #0]
{
 8000dde:	9005      	str	r0, [sp, #20]
	 NTC.Value=ADC_to_NTC(Analog_Read);
 8000de0:	6820      	ldr	r0, [r4, #0]
 8000de2:	6839      	ldr	r1, [r7, #0]
	 p_aux=Display1;
 8000de4:	4b51      	ldr	r3, [pc, #324]	@ (8000f2c <Get_Temperature+0x15c>)
	 NTC.Value=ADC_to_NTC(Analog_Read);
 8000de6:	4348      	muls	r0, r1
 8000de8:	2180      	movs	r1, #128	@ 0x80
	 p_aux=Display1;
 8000dea:	681b      	ldr	r3, [r3, #0]
	 NTC.Value=ADC_to_NTC(Analog_Read);
 8000dec:	4d50      	ldr	r5, [pc, #320]	@ (8000f30 <Get_Temperature+0x160>)
	 p_aux=Display1;
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	9a01      	ldr	r2, [sp, #4]
 8000df2:	4b50      	ldr	r3, [pc, #320]	@ (8000f34 <Get_Temperature+0x164>)
	 NTC.Value=ADC_to_NTC(Analog_Read);
 8000df4:	0149      	lsls	r1, r1, #5
	 p_aux=Display1;
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	9304      	str	r3, [sp, #16]
	 NTC.Value=ADC_to_NTC(Analog_Read);
 8000dfa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	0f5b      	lsrs	r3, r3, #29
 8000e00:	4099      	lsls	r1, r3
 8000e02:	1a89      	subs	r1, r1, r2
 8000e04:	f7ff f970 	bl	80000e8 <__udivsi3>
 8000e08:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8000e0a:	1b80      	subs	r0, r0, r6
 8000e0c:	6060      	str	r0, [r4, #4]
	 NTC.Log_Value=Log_ADC_to_NTC(Analog_Read);
 8000e0e:	6820      	ldr	r0, [r4, #0]
 8000e10:	683e      	ldr	r6, [r7, #0]
 8000e12:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000e14:	4370      	muls	r0, r6
 8000e16:	2680      	movs	r6, #128	@ 0x80
 8000e18:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8000e1a:	0176      	lsls	r6, r6, #5
 8000e1c:	0f52      	lsrs	r2, r2, #29
 8000e1e:	4096      	lsls	r6, r2
 8000e20:	6839      	ldr	r1, [r7, #0]
 8000e22:	1a72      	subs	r2, r6, r1
 8000e24:	4353      	muls	r3, r2
 8000e26:	1ac0      	subs	r0, r0, r3
 8000e28:	f7ff fbd4 	bl	80005d4 <log_q31>
 8000e2c:	0006      	movs	r6, r0
 8000e2e:	2080      	movs	r0, #128	@ 0x80
 8000e30:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000e32:	0140      	lsls	r0, r0, #5
 8000e34:	0f5b      	lsrs	r3, r3, #29
 8000e36:	4098      	lsls	r0, r3
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	1a80      	subs	r0, r0, r2
 8000e3c:	f7ff fbca 	bl	80005d4 <log_q31>
 8000e40:	4b3d      	ldr	r3, [pc, #244]	@ (8000f38 <Get_Temperature+0x168>)
 8000e42:	18f6      	adds	r6, r6, r3
 8000e44:	1a36      	subs	r6, r6, r0
 8000e46:	60a6      	str	r6, [r4, #8]
	 NTC.Temp=NTC.Beta/(NTC.Log_Value-NTC.Log_R0+NTC.Beta_T0K)+W1209PY.Temp_Offset-_100Kelvin;
 8000e48:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000e4a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000e4c:	9202      	str	r2, [sp, #8]
 8000e4e:	9303      	str	r3, [sp, #12]
 8000e50:	68a3      	ldr	r3, [r4, #8]
 8000e52:	6927      	ldr	r7, [r4, #16]
 8000e54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000e56:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8000e58:	1bdf      	subs	r7, r3, r7
 8000e5a:	0008      	movs	r0, r1
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	003a      	movs	r2, r7
 8000e60:	17fb      	asrs	r3, r7, #31
 8000e62:	1812      	adds	r2, r2, r0
 8000e64:	414b      	adcs	r3, r1
 8000e66:	9802      	ldr	r0, [sp, #8]
 8000e68:	9903      	ldr	r1, [sp, #12]
 8000e6a:	f7ff fab3 	bl	80003d4 <__aeabi_ldivmod>
 8000e6e:	68ee      	ldr	r6, [r5, #12]
 8000e70:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <Get_Temperature+0x16c>)
 8000e72:	18f6      	adds	r6, r6, r3
	 if(!Display_Temp) return;
 8000e74:	9b05      	ldr	r3, [sp, #20]
	 NTC.Temp=NTC.Beta/(NTC.Log_Value-NTC.Log_R0+NTC.Beta_T0K)+W1209PY.Temp_Offset-_100Kelvin;
 8000e76:	1836      	adds	r6, r6, r0
 8000e78:	63a6      	str	r6, [r4, #56]	@ 0x38
	 if(!Display_Temp) return;
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d04e      	beq.n	8000f1c <Get_Temperature+0x14c>
	 itoa(p_aux,(W1209PY.fahrenheit)?To_fahrenheit(NTC.Temp):To_Celsius(NTC.Temp),2);	
 8000e7e:	682b      	ldr	r3, [r5, #0]
 8000e80:	069b      	lsls	r3, r3, #26
 8000e82:	d525      	bpl.n	8000ed0 <Get_Temperature+0x100>
 8000e84:	2012      	movs	r0, #18
 8000e86:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8000e88:	210a      	movs	r1, #10
 8000e8a:	4358      	muls	r0, r3
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <Get_Temperature+0x170>)
 8000e8e:	18c0      	adds	r0, r0, r3
 8000e90:	f7ff f9b4 	bl	80001fc <__divsi3>
 8000e94:	23c8      	movs	r3, #200	@ 0xc8
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	18c1      	adds	r1, r0, r3
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	9801      	ldr	r0, [sp, #4]
 8000e9e:	f7ff fdc7 	bl	8000a30 <itoa>
	 p_temp=p_aux+str2len(p_aux);
 8000ea2:	9b04      	ldr	r3, [sp, #16]
 8000ea4:	681c      	ldr	r4, [r3, #0]
 8000ea6:	0020      	movs	r0, r4
 8000ea8:	f7ff fe04 	bl	8000ab4 <str2len>
	 if(W1209PY.fahrenheit)
 8000eac:	682b      	ldr	r3, [r5, #0]
	 p_temp=p_aux+str2len(p_aux);
 8000eae:	1820      	adds	r0, r4, r0
	 if(W1209PY.fahrenheit)
 8000eb0:	069b      	lsls	r3, r3, #26
 8000eb2:	4924      	ldr	r1, [pc, #144]	@ (8000f44 <Get_Temperature+0x174>)
 8000eb4:	0fdc      	lsrs	r4, r3, #31
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0e      	blt.n	8000ed8 <Get_Temperature+0x108>
 8000eba:	0003      	movs	r3, r0
			  strcpy(p_temp,MsgStr[30]);
 8000ebc:	680e      	ldr	r6, [r1, #0]
 8000ebe:	1a1a      	subs	r2, r3, r0
 8000ec0:	6fb6      	ldr	r6, [r6, #120]	@ 0x78
 8000ec2:	5cb2      	ldrb	r2, [r6, r2]
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	d00f      	beq.n	8000ee8 <Get_Temperature+0x118>
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	705c      	strb	r4, [r3, #1]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	e7f5      	b.n	8000ebc <Get_Temperature+0xec>
	 itoa(p_aux,(W1209PY.fahrenheit)?To_fahrenheit(NTC.Temp):To_Celsius(NTC.Temp),2);	
 8000ed0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <Get_Temperature+0x16c>)
 8000ed4:	18c9      	adds	r1, r1, r3
 8000ed6:	e7e0      	b.n	8000e9a <Get_Temperature+0xca>
	 if(W1209PY.fahrenheit)
 8000ed8:	0003      	movs	r3, r0
			  strcpy(p_temp,MsgStr[29]);
 8000eda:	2600      	movs	r6, #0
 8000edc:	680c      	ldr	r4, [r1, #0]
 8000ede:	1a1a      	subs	r2, r3, r0
 8000ee0:	6f64      	ldr	r4, [r4, #116]	@ 0x74
 8000ee2:	5ca2      	ldrb	r2, [r4, r2]
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	d106      	bne.n	8000ef6 <Get_Temperature+0x126>
	 if((!W1209PY.Timer_Enable)||W1209PY.TM_Seconds||W1209PY.TM_Minutes||W1209PY.TM_Days||W1209PY.TM_Hours)	System_Ready=1; 
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	055b      	lsls	r3, r3, #21
 8000eec:	d407      	bmi.n	8000efe <Get_Temperature+0x12e>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <Get_Temperature+0x178>)
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	e012      	b.n	8000f1c <Get_Temperature+0x14c>
			  strcpy(p_temp,MsgStr[29]);
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	705e      	strb	r6, [r3, #1]
 8000efa:	3301      	adds	r3, #1
 8000efc:	e7ee      	b.n	8000edc <Get_Temperature+0x10c>
	 if((!W1209PY.Timer_Enable)||W1209PY.TM_Seconds||W1209PY.TM_Minutes||W1209PY.TM_Days||W1209PY.TM_Hours)	System_Ready=1; 
 8000efe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	0e9b      	lsrs	r3, r3, #26
 8000f04:	d1f3      	bne.n	8000eee <Get_Temperature+0x11e>
 8000f06:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000f08:	025b      	lsls	r3, r3, #9
 8000f0a:	0e9b      	lsrs	r3, r3, #26
 8000f0c:	d1ef      	bne.n	8000eee <Get_Temperature+0x11e>
 8000f0e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000f10:	051b      	lsls	r3, r3, #20
 8000f12:	d1ec      	bne.n	8000eee <Get_Temperature+0x11e>
 8000f14:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000f16:	03db      	lsls	r3, r3, #15
 8000f18:	0edb      	lsrs	r3, r3, #27
 8000f1a:	d1e8      	bne.n	8000eee <Get_Temperature+0x11e>
}
 8000f1c:	b007      	add	sp, #28
 8000f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f20:	20000494 	.word	0x20000494
 8000f24:	200003e8 	.word	0x200003e8
 8000f28:	200000f0 	.word	0x200000f0
 8000f2c:	200000ac 	.word	0x200000ac
 8000f30:	200003b0 	.word	0x200003b0
 8000f34:	20000448 	.word	0x20000448
 8000f38:	aa0cbc64 	.word	0xaa0cbc64
 8000f3c:	ffff954d 	.word	0xffff954d
 8000f40:	fff87f6a 	.word	0xfff87f6a
 8000f44:	200004d4 	.word	0x200004d4
 8000f48:	2000048c 	.word	0x2000048c

08000f4c <MsgBox>:
int32_t MsgBox(unsigned char *msg, int32_t dot, int32_t Cyclic){
 8000f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(!W1209PY.Messages) return 0;
 8000f4e:	4b36      	ldr	r3, [pc, #216]	@ (8001028 <MsgBox+0xdc>)
int32_t MsgBox(unsigned char *msg, int32_t dot, int32_t Cyclic){
 8000f50:	9201      	str	r2, [sp, #4]
	if(!W1209PY.Messages) return 0;
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	0652      	lsls	r2, r2, #25
int32_t MsgBox(unsigned char *msg, int32_t dot, int32_t Cyclic){
 8000f58:	0007      	movs	r7, r0
 8000f5a:	000d      	movs	r5, r1
	if(!W1209PY.Messages) return 0;
 8000f5c:	0fd0      	lsrs	r0, r2, #31
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	da3f      	bge.n	8000fe2 <MsgBox+0x96>
	 Anykey=0;
 8000f62:	4c32      	ldr	r4, [pc, #200]	@ (800102c <MsgBox+0xe0>)
	 p_aux=msg;
 8000f64:	4e32      	ldr	r6, [pc, #200]	@ (8001030 <MsgBox+0xe4>)
	 strcpy(Display1,p_aux);
 8000f66:	4833      	ldr	r0, [pc, #204]	@ (8001034 <MsgBox+0xe8>)
	 Anykey=0;
 8000f68:	6023      	str	r3, [r4, #0]
	 p_aux=msg;
 8000f6a:	6037      	str	r7, [r6, #0]
	 strcpy(Display1,p_aux);
 8000f6c:	6832      	ldr	r2, [r6, #0]
 8000f6e:	1c59      	adds	r1, r3, #1
 8000f70:	5cd2      	ldrb	r2, [r2, r3]
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d136      	bne.n	8000fe4 <MsgBox+0x98>
	 if(dot>0) Display1[str2len(Display1)-dot]|=_DP;
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	dd0a      	ble.n	8000f90 <MsgBox+0x44>
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001034 <MsgBox+0xe8>)
 8000f7c:	681e      	ldr	r6, [r3, #0]
 8000f7e:	0030      	movs	r0, r6
 8000f80:	f7ff fd98 	bl	8000ab4 <str2len>
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	1b40      	subs	r0, r0, r5
 8000f88:	5c32      	ldrb	r2, [r6, r0]
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	5433      	strb	r3, [r6, r0]
	 for(p_roll=Display;(*p_roll||Cyclic)&&!Anykey;p_roll++)
 8000f90:	4829      	ldr	r0, [pc, #164]	@ (8001038 <MsgBox+0xec>)
 8000f92:	0006      	movs	r6, r0
 8000f94:	4d29      	ldr	r5, [pc, #164]	@ (800103c <MsgBox+0xf0>)
 8000f96:	6028      	str	r0, [r5, #0]
 8000f98:	7803      	ldrb	r3, [r0, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d102      	bne.n	8000fa4 <MsgBox+0x58>
 8000f9e:	9b01      	ldr	r3, [sp, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <MsgBox+0x5e>
 8000fa4:	6821      	ldr	r1, [r4, #0]
 8000fa6:	2900      	cmp	r1, #0
 8000fa8:	d023      	beq.n	8000ff2 <MsgBox+0xa6>
	 Display1[0]=Timeout=0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	4a24      	ldr	r2, [pc, #144]	@ (8001040 <MsgBox+0xf4>)
	 button=(Pressed_BSet?4:0)+(Pressed_BPlus?2:0)+(Pressed_BMinus?1:0);
 8000fae:	4925      	ldr	r1, [pc, #148]	@ (8001044 <MsgBox+0xf8>)
	 Display1[0]=Timeout=0;
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4a20      	ldr	r2, [pc, #128]	@ (8001034 <MsgBox+0xe8>)
	 button=(Pressed_BSet?4:0)+(Pressed_BPlus?2:0)+(Pressed_BMinus?1:0);
 8000fb4:	4e24      	ldr	r6, [pc, #144]	@ (8001048 <MsgBox+0xfc>)
	 Display1[0]=Timeout=0;
 8000fb6:	6812      	ldr	r2, [r2, #0]
	 button=(Pressed_BSet?4:0)+(Pressed_BPlus?2:0)+(Pressed_BMinus?1:0);
 8000fb8:	4d24      	ldr	r5, [pc, #144]	@ (800104c <MsgBox+0x100>)
	 Display1[0]=Timeout=0;
 8000fba:	7013      	strb	r3, [r2, #0]
	 button=(Pressed_BSet?4:0)+(Pressed_BPlus?2:0)+(Pressed_BMinus?1:0);
 8000fbc:	680a      	ldr	r2, [r1, #0]
 8000fbe:	6830      	ldr	r0, [r6, #0]
 8000fc0:	682f      	ldr	r7, [r5, #0]
	 Pressed_BSet=Pressed_BMinus=Pressed_BPlus=Anykey=0;
 8000fc2:	6023      	str	r3, [r4, #0]
	 button=(Pressed_BSet?4:0)+(Pressed_BPlus?2:0)+(Pressed_BMinus?1:0);
 8000fc4:	46bc      	mov	ip, r7
 8000fc6:	1e47      	subs	r7, r0, #1
 8000fc8:	41b8      	sbcs	r0, r7
 8000fca:	1e57      	subs	r7, r2, #1
 8000fcc:	41ba      	sbcs	r2, r7
 8000fce:	4667      	mov	r7, ip
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	0040      	lsls	r0, r0, #1
 8000fd4:	1880      	adds	r0, r0, r2
 8000fd6:	1e7a      	subs	r2, r7, #1
 8000fd8:	4197      	sbcs	r7, r2
	 Pressed_BSet=Pressed_BMinus=Pressed_BPlus=Anykey=0;
 8000fda:	6033      	str	r3, [r6, #0]
	 button=(Pressed_BSet?4:0)+(Pressed_BPlus?2:0)+(Pressed_BMinus?1:0);
 8000fdc:	19c0      	adds	r0, r0, r7
	 Pressed_BSet=Pressed_BMinus=Pressed_BPlus=Anykey=0;
 8000fde:	602b      	str	r3, [r5, #0]
 8000fe0:	600b      	str	r3, [r1, #0]
}
 8000fe2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	 strcpy(Display1,p_aux);
 8000fe4:	6807      	ldr	r7, [r0, #0]
 8000fe6:	54fa      	strb	r2, [r7, r3]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	6803      	ldr	r3, [r0, #0]
 8000fec:	545a      	strb	r2, [r3, r1]
 8000fee:	000b      	movs	r3, r1
 8000ff0:	e7bc      	b.n	8000f6c <MsgBox+0x20>
							Put_Buff_On_Display(p_roll,0);
 8000ff2:	f7ff fb99 	bl	8000728 <Put_Buff_On_Display>
							while(!Roll_Flag&&!Anykey) if(Analog_Flag) Get_Temperature(Dont_Put_Temp_On_Buffer);
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <MsgBox+0x104>)
 8000ff8:	4a16      	ldr	r2, [pc, #88]	@ (8001054 <MsgBox+0x108>)
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	2900      	cmp	r1, #0
 8000ffe:	d102      	bne.n	8001006 <MsgBox+0xba>
 8001000:	6820      	ldr	r0, [r4, #0]
 8001002:	2800      	cmp	r0, #0
 8001004:	d009      	beq.n	800101a <MsgBox+0xce>
							Roll_Flag=0;
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
							if(!*p_roll) p_roll=Display;
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4293      	cmp	r3, r2
 8001010:	d100      	bne.n	8001014 <MsgBox+0xc8>
 8001012:	602e      	str	r6, [r5, #0]
	 for(p_roll=Display;(*p_roll||Cyclic)&&!Anykey;p_roll++)
 8001014:	6828      	ldr	r0, [r5, #0]
 8001016:	3001      	adds	r0, #1
 8001018:	e7bc      	b.n	8000f94 <MsgBox+0x48>
							while(!Roll_Flag&&!Anykey) if(Analog_Flag) Get_Temperature(Dont_Put_Temp_On_Buffer);
 800101a:	6811      	ldr	r1, [r2, #0]
 800101c:	2900      	cmp	r1, #0
 800101e:	d0ec      	beq.n	8000ffa <MsgBox+0xae>
 8001020:	f7ff fed6 	bl	8000dd0 <Get_Temperature>
 8001024:	e7e7      	b.n	8000ff6 <MsgBox+0xaa>
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	200003b0 	.word	0x200003b0
 800102c:	2000044c 	.word	0x2000044c
 8001030:	20000448 	.word	0x20000448
 8001034:	200000ac 	.word	0x200000ac
 8001038:	200000b0 	.word	0x200000b0
 800103c:	200000a8 	.word	0x200000a8
 8001040:	200004b0 	.word	0x200004b0
 8001044:	20000464 	.word	0x20000464
 8001048:	2000045c 	.word	0x2000045c
 800104c:	20000460 	.word	0x20000460
 8001050:	200004ac 	.word	0x200004ac
 8001054:	20000494 	.word	0x20000494

08001058 <MsgBox2>:
	 Anykey=Timeout=0;
 8001058:	2300      	movs	r3, #0
int32_t MsgBox2(int32_t dot, int32_t Cyclic, int32_t Touts){
 800105a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	 Anykey=Timeout=0;
 800105c:	4c31      	ldr	r4, [pc, #196]	@ (8001124 <MsgBox2+0xcc>)
 800105e:	4e32      	ldr	r6, [pc, #200]	@ (8001128 <MsgBox2+0xd0>)
 8001060:	6023      	str	r3, [r4, #0]
int32_t MsgBox2(int32_t dot, int32_t Cyclic, int32_t Touts){
 8001062:	0005      	movs	r5, r0
 8001064:	9101      	str	r1, [sp, #4]
 8001066:	9200      	str	r2, [sp, #0]
	 Anykey=Timeout=0;
 8001068:	6033      	str	r3, [r6, #0]
	 if(dot>0) Display1[str2len(Display1)-dot]|=_DP;
 800106a:	4298      	cmp	r0, r3
 800106c:	dd0a      	ble.n	8001084 <MsgBox2+0x2c>
 800106e:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <MsgBox2+0xd4>)
 8001070:	681f      	ldr	r7, [r3, #0]
 8001072:	0038      	movs	r0, r7
 8001074:	f7ff fd1e 	bl	8000ab4 <str2len>
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	1b40      	subs	r0, r0, r5
 800107c:	5c3a      	ldrb	r2, [r7, r0]
 800107e:	425b      	negs	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	543b      	strb	r3, [r7, r0]
	 for(p_roll=Display;(*p_roll||Cyclic)&&!Anykey&&Touts;p_roll++)
 8001084:	482a      	ldr	r0, [pc, #168]	@ (8001130 <MsgBox2+0xd8>)
 8001086:	0007      	movs	r7, r0
 8001088:	4d2a      	ldr	r5, [pc, #168]	@ (8001134 <MsgBox2+0xdc>)
 800108a:	6028      	str	r0, [r5, #0]
 800108c:	7803      	ldrb	r3, [r0, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <MsgBox2+0x40>
 8001092:	9b01      	ldr	r3, [sp, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <MsgBox2+0x4c>
 8001098:	6831      	ldr	r1, [r6, #0]
 800109a:	2900      	cmp	r1, #0
 800109c:	d102      	bne.n	80010a4 <MsgBox2+0x4c>
 800109e:	9b00      	ldr	r3, [sp, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d11b      	bne.n	80010dc <MsgBox2+0x84>
	 Display1[0]=Timeout=0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	4a21      	ldr	r2, [pc, #132]	@ (800112c <MsgBox2+0xd4>)
 80010a8:	6023      	str	r3, [r4, #0]
 80010aa:	6812      	ldr	r2, [r2, #0]
	 button=(Pressed_BSet?4:0)+(Pressed_BPlus?2:0)+(Pressed_BMinus?1:0);
 80010ac:	4e22      	ldr	r6, [pc, #136]	@ (8001138 <MsgBox2+0xe0>)
 80010ae:	4c23      	ldr	r4, [pc, #140]	@ (800113c <MsgBox2+0xe4>)
	 Display1[0]=Timeout=0;
 80010b0:	7013      	strb	r3, [r2, #0]
	 button=(Pressed_BSet?4:0)+(Pressed_BPlus?2:0)+(Pressed_BMinus?1:0);
 80010b2:	6822      	ldr	r2, [r4, #0]
 80010b4:	4d22      	ldr	r5, [pc, #136]	@ (8001140 <MsgBox2+0xe8>)
 80010b6:	6830      	ldr	r0, [r6, #0]
	 Pressed_BSet=Pressed_BMinus=Pressed_BPlus=Anykey=0;
 80010b8:	4f1b      	ldr	r7, [pc, #108]	@ (8001128 <MsgBox2+0xd0>)
	 button=(Pressed_BSet?4:0)+(Pressed_BPlus?2:0)+(Pressed_BMinus?1:0);
 80010ba:	6829      	ldr	r1, [r5, #0]
	 Pressed_BSet=Pressed_BMinus=Pressed_BPlus=Anykey=0;
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	6033      	str	r3, [r6, #0]
 80010c0:	602b      	str	r3, [r5, #0]
 80010c2:	6023      	str	r3, [r4, #0]
	 button=(Pressed_BSet?4:0)+(Pressed_BPlus?2:0)+(Pressed_BMinus?1:0);
 80010c4:	1e43      	subs	r3, r0, #1
 80010c6:	4198      	sbcs	r0, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	1e5a      	subs	r2, r3, #1
 80010cc:	4193      	sbcs	r3, r2
 80010ce:	1e4a      	subs	r2, r1, #1
 80010d0:	4191      	sbcs	r1, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	0040      	lsls	r0, r0, #1
 80010d6:	18c0      	adds	r0, r0, r3
 80010d8:	1840      	adds	r0, r0, r1
}
 80010da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
							Put_Buff_On_Display(p_roll,0);
 80010dc:	f7ff fb24 	bl	8000728 <Put_Buff_On_Display>
							while(!Roll_Flag&&!Anykey) if(Analog_Flag) Get_Temperature(Dont_Put_Temp_On_Buffer);
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MsgBox2+0xec>)
 80010e2:	4a19      	ldr	r2, [pc, #100]	@ (8001148 <MsgBox2+0xf0>)
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	2900      	cmp	r1, #0
 80010e8:	d102      	bne.n	80010f0 <MsgBox2+0x98>
 80010ea:	6830      	ldr	r0, [r6, #0]
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d012      	beq.n	8001116 <MsgBox2+0xbe>
							Roll_Flag=0;
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
							if(!*p_roll) p_roll=Display;
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d100      	bne.n	80010fe <MsgBox2+0xa6>
 80010fc:	602f      	str	r7, [r5, #0]
							if(Tout()){ Touts--; Timeout=0;}
 80010fe:	6822      	ldr	r2, [r4, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <MsgBox2+0xf4>)
 8001102:	429a      	cmp	r2, r3
 8001104:	dd04      	ble.n	8001110 <MsgBox2+0xb8>
 8001106:	9b00      	ldr	r3, [sp, #0]
 8001108:	3b01      	subs	r3, #1
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2300      	movs	r3, #0
 800110e:	6023      	str	r3, [r4, #0]
	 for(p_roll=Display;(*p_roll||Cyclic)&&!Anykey&&Touts;p_roll++)
 8001110:	6828      	ldr	r0, [r5, #0]
 8001112:	3001      	adds	r0, #1
 8001114:	e7b8      	b.n	8001088 <MsgBox2+0x30>
							while(!Roll_Flag&&!Anykey) if(Analog_Flag) Get_Temperature(Dont_Put_Temp_On_Buffer);
 8001116:	6811      	ldr	r1, [r2, #0]
 8001118:	2900      	cmp	r1, #0
 800111a:	d0e3      	beq.n	80010e4 <MsgBox2+0x8c>
 800111c:	f7ff fe58 	bl	8000dd0 <Get_Temperature>
 8001120:	e7de      	b.n	80010e0 <MsgBox2+0x88>
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	200004b0 	.word	0x200004b0
 8001128:	2000044c 	.word	0x2000044c
 800112c:	200000ac 	.word	0x200000ac
 8001130:	200000b0 	.word	0x200000b0
 8001134:	200000a8 	.word	0x200000a8
 8001138:	2000045c 	.word	0x2000045c
 800113c:	20000464 	.word	0x20000464
 8001140:	20000460 	.word	0x20000460
 8001144:	200004ac 	.word	0x200004ac
 8001148:	20000494 	.word	0x20000494
 800114c:	00004e1f 	.word	0x00004e1f

08001150 <Display_Menu>:
void Display_Menu(){
 8001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
				p_aux=(unsigned char *)MsgStr[3];
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <Display_Menu+0x6c>)
				if(Program_Menu<10) {
 8001154:	4e1a      	ldr	r6, [pc, #104]	@ (80011c0 <Display_Menu+0x70>)
				p_aux=(unsigned char *)MsgStr[3];
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4d1a      	ldr	r5, [pc, #104]	@ (80011c4 <Display_Menu+0x74>)
 800115a:	68db      	ldr	r3, [r3, #12]
				if(Program_Menu<10) {
 800115c:	6832      	ldr	r2, [r6, #0]
 800115e:	4c1a      	ldr	r4, [pc, #104]	@ (80011c8 <Display_Menu+0x78>)
				p_aux=(unsigned char *)MsgStr[3];
 8001160:	602b      	str	r3, [r5, #0]
				if(Program_Menu<10) {
 8001162:	2a09      	cmp	r2, #9
 8001164:	dd27      	ble.n	80011b6 <Display_Menu+0x66>
					p_aux++;
 8001166:	3301      	adds	r3, #1
 8001168:	602b      	str	r3, [r5, #0]
					strcpy(Display1, p_aux);
 800116a:	2300      	movs	r3, #0
 800116c:	001f      	movs	r7, r3
 800116e:	682a      	ldr	r2, [r5, #0]
 8001170:	6820      	ldr	r0, [r4, #0]
 8001172:	5cd2      	ldrb	r2, [r2, r3]
 8001174:	1c59      	adds	r1, r3, #1
 8001176:	2a00      	cmp	r2, #0
 8001178:	d00e      	beq.n	8001198 <Display_Menu+0x48>
 800117a:	54c2      	strb	r2, [r0, r3]
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	545f      	strb	r7, [r3, r1]
 8001180:	000b      	movs	r3, r1
 8001182:	e7f4      	b.n	800116e <Display_Menu+0x1e>
					strcpy(Display1, p_aux);
 8001184:	54c2      	strb	r2, [r0, r3]
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	545f      	strb	r7, [r3, r1]
 800118a:	000b      	movs	r3, r1
 800118c:	682a      	ldr	r2, [r5, #0]
 800118e:	6820      	ldr	r0, [r4, #0]
 8001190:	5cd2      	ldrb	r2, [r2, r3]
 8001192:	1c59      	adds	r1, r3, #1
 8001194:	2a00      	cmp	r2, #0
 8001196:	d1f5      	bne.n	8001184 <Display_Menu+0x34>
				p_aux=Display1+str2len(Display1);
 8001198:	6827      	ldr	r7, [r4, #0]
 800119a:	0038      	movs	r0, r7
 800119c:	f7ff fc8a 	bl	8000ab4 <str2len>
				itoa(p_aux, Program_Menu,0);
 80011a0:	6831      	ldr	r1, [r6, #0]
				p_aux=Display1+str2len(Display1);
 80011a2:	1838      	adds	r0, r7, r0
				itoa(p_aux, Program_Menu,0);
 80011a4:	2200      	movs	r2, #0
				p_aux=Display1+str2len(Display1);
 80011a6:	6028      	str	r0, [r5, #0]
				itoa(p_aux, Program_Menu,0);
 80011a8:	f7ff fc42 	bl	8000a30 <itoa>
				Put_Buff_On_Display(Display1,0);
 80011ac:	2100      	movs	r1, #0
 80011ae:	6820      	ldr	r0, [r4, #0]
 80011b0:	f7ff faba 	bl	8000728 <Put_Buff_On_Display>
}			
 80011b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011b6:	2300      	movs	r3, #0
					strcpy(Display1, p_aux);
 80011b8:	001f      	movs	r7, r3
 80011ba:	e7e7      	b.n	800118c <Display_Menu+0x3c>
 80011bc:	200004d4 	.word	0x200004d4
 80011c0:	20000438 	.word	0x20000438
 80011c4:	20000448 	.word	0x20000448
 80011c8:	200000ac 	.word	0x200000ac

080011cc <DisplayOptions>:
				strcpy(Display1, MsgStr[FirstStr+value]);
 80011cc:	2300      	movs	r3, #0
int32_t DisplayOptions(int32_t FirstStr, int32_t value, int32_t n_opt){
 80011ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				strcpy(Display1, MsgStr[FirstStr+value]);
 80011d0:	469c      	mov	ip, r3
int32_t DisplayOptions(int32_t FirstStr, int32_t value, int32_t n_opt){
 80011d2:	000c      	movs	r4, r1
 80011d4:	9201      	str	r2, [sp, #4]
				strcpy(Display1, MsgStr[FirstStr+value]);
 80011d6:	4f2c      	ldr	r7, [pc, #176]	@ (8001288 <DisplayOptions+0xbc>)
 80011d8:	1842      	adds	r2, r0, r1
 80011da:	4e2c      	ldr	r6, [pc, #176]	@ (800128c <DisplayOptions+0xc0>)
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	6839      	ldr	r1, [r7, #0]
 80011e0:	6830      	ldr	r0, [r6, #0]
 80011e2:	5889      	ldr	r1, [r1, r2]
 80011e4:	1c5d      	adds	r5, r3, #1
 80011e6:	5cc9      	ldrb	r1, [r1, r3]
 80011e8:	2900      	cmp	r1, #0
 80011ea:	d122      	bne.n	8001232 <DisplayOptions+0x66>
				if(!Display1[3]){
 80011ec:	78c3      	ldrb	r3, [r0, #3]
 80011ee:	4e28      	ldr	r6, [pc, #160]	@ (8001290 <DisplayOptions+0xc4>)
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d128      	bne.n	8001246 <DisplayOptions+0x7a>
					Put_Buff_On_Display(Display1,0);
 80011f4:	0019      	movs	r1, r3
 80011f6:	f7ff fa97 	bl	8000728 <Put_Buff_On_Display>
					while (!Anykey&&!Tout());
 80011fa:	4926      	ldr	r1, [pc, #152]	@ (8001294 <DisplayOptions+0xc8>)
 80011fc:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <DisplayOptions+0xcc>)
 80011fe:	6832      	ldr	r2, [r6, #0]
 8001200:	2a00      	cmp	r2, #0
 8001202:	d01c      	beq.n	800123e <DisplayOptions+0x72>
				if((Pressed_BPlus==1)) value=((++value==n_opt)?0:value);
 8001204:	4925      	ldr	r1, [pc, #148]	@ (800129c <DisplayOptions+0xd0>)
 8001206:	680b      	ldr	r3, [r1, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d104      	bne.n	8001216 <DisplayOptions+0x4a>
 800120c:	9b01      	ldr	r3, [sp, #4]
 800120e:	3401      	adds	r4, #1
 8001210:	429c      	cmp	r4, r3
 8001212:	d100      	bne.n	8001216 <DisplayOptions+0x4a>
 8001214:	2400      	movs	r4, #0
				if((Pressed_BMinus==1)) value=((--value<0)?n_opt-1:value);
 8001216:	4a22      	ldr	r2, [pc, #136]	@ (80012a0 <DisplayOptions+0xd4>)
 8001218:	6813      	ldr	r3, [r2, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d103      	bne.n	8001226 <DisplayOptions+0x5a>
 800121e:	3c01      	subs	r4, #1
 8001220:	d501      	bpl.n	8001226 <DisplayOptions+0x5a>
 8001222:	9c01      	ldr	r4, [sp, #4]
 8001224:	3c01      	subs	r4, #1
				Anykey=Pressed_BMinus=Pressed_BPlus=0;
 8001226:	2300      	movs	r3, #0
 8001228:	600b      	str	r3, [r1, #0]
}
 800122a:	0020      	movs	r0, r4
				Anykey=Pressed_BMinus=Pressed_BPlus=0;
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	6033      	str	r3, [r6, #0]
}
 8001230:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				strcpy(Display1, MsgStr[FirstStr+value]);
 8001232:	54c1      	strb	r1, [r0, r3]
 8001234:	4661      	mov	r1, ip
 8001236:	6833      	ldr	r3, [r6, #0]
 8001238:	5559      	strb	r1, [r3, r5]
 800123a:	002b      	movs	r3, r5
 800123c:	e7cf      	b.n	80011de <DisplayOptions+0x12>
					while (!Anykey&&!Tout());
 800123e:	680a      	ldr	r2, [r1, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	dddc      	ble.n	80011fe <DisplayOptions+0x32>
 8001244:	e7de      	b.n	8001204 <DisplayOptions+0x38>
					p_roll=Display;
 8001246:	4f17      	ldr	r7, [pc, #92]	@ (80012a4 <DisplayOptions+0xd8>)
 8001248:	4d17      	ldr	r5, [pc, #92]	@ (80012a8 <DisplayOptions+0xdc>)
					Put_Buff_On_Display(p_roll,0);
 800124a:	0038      	movs	r0, r7
					p_roll=Display;
 800124c:	602f      	str	r7, [r5, #0]
					Put_Buff_On_Display(p_roll,0);
 800124e:	f7ff fa6b 	bl	8000728 <Put_Buff_On_Display>
					while (!Anykey&&!Tout()) if(Roll_Flag){
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <DisplayOptions+0xc8>)
 8001254:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <DisplayOptions+0xcc>)
 8001256:	469c      	mov	ip, r3
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <DisplayOptions+0xe0>)
 800125a:	6831      	ldr	r1, [r6, #0]
 800125c:	2900      	cmp	r1, #0
 800125e:	d1d1      	bne.n	8001204 <DisplayOptions+0x38>
 8001260:	4660      	mov	r0, ip
 8001262:	6800      	ldr	r0, [r0, #0]
 8001264:	4290      	cmp	r0, r2
 8001266:	dccd      	bgt.n	8001204 <DisplayOptions+0x38>
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	2800      	cmp	r0, #0
 800126c:	d0f5      	beq.n	800125a <DisplayOptions+0x8e>
						Put_Buff_On_Display(p_roll++,0);
 800126e:	6828      	ldr	r0, [r5, #0]
						Roll_Flag=0;
 8001270:	6019      	str	r1, [r3, #0]
						Put_Buff_On_Display(p_roll++,0);
 8001272:	1c43      	adds	r3, r0, #1
 8001274:	602b      	str	r3, [r5, #0]
 8001276:	f7ff fa57 	bl	8000728 <Put_Buff_On_Display>
						if(!(*p_roll)) p_roll=Display;
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1e7      	bne.n	8001252 <DisplayOptions+0x86>
 8001282:	602f      	str	r7, [r5, #0]
 8001284:	e7e5      	b.n	8001252 <DisplayOptions+0x86>
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	200004d4 	.word	0x200004d4
 800128c:	200000ac 	.word	0x200000ac
 8001290:	2000044c 	.word	0x2000044c
 8001294:	200004b0 	.word	0x200004b0
 8001298:	00004e1f 	.word	0x00004e1f
 800129c:	2000045c 	.word	0x2000045c
 80012a0:	20000460 	.word	0x20000460
 80012a4:	200000b0 	.word	0x200000b0
 80012a8:	200000a8 	.word	0x200000a8
 80012ac:	200004ac 	.word	0x200004ac

080012b0 <Edit_Scalars>:
void Edit_Scalars(int32_t MsgNumber, int32_t *Value, int32_t sign, int32_t dot){
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	b085      	sub	sp, #20
 80012b4:	9301      	str	r3, [sp, #4]
	strcpy(Display1,MsgStr[MsgNumber]);
 80012b6:	0083      	lsls	r3, r0, #2
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	2300      	movs	r3, #0
 80012bc:	001f      	movs	r7, r3
void Edit_Scalars(int32_t MsgNumber, int32_t *Value, int32_t sign, int32_t dot){
 80012be:	000d      	movs	r5, r1
	strcpy(Display1,MsgStr[MsgNumber]);
 80012c0:	4826      	ldr	r0, [pc, #152]	@ (800135c <Edit_Scalars+0xac>)
 80012c2:	4927      	ldr	r1, [pc, #156]	@ (8001360 <Edit_Scalars+0xb0>)
void Edit_Scalars(int32_t MsgNumber, int32_t *Value, int32_t sign, int32_t dot){
 80012c4:	9203      	str	r2, [sp, #12]
	strcpy(Display1,MsgStr[MsgNumber]);
 80012c6:	9c02      	ldr	r4, [sp, #8]
 80012c8:	6802      	ldr	r2, [r0, #0]
 80012ca:	680e      	ldr	r6, [r1, #0]
 80012cc:	5912      	ldr	r2, [r2, r4]
 80012ce:	5cd4      	ldrb	r4, [r2, r3]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	2c00      	cmp	r4, #0
 80012d4:	d118      	bne.n	8001308 <Edit_Scalars+0x58>
	p_aux=Display1+str2len(Display1);
 80012d6:	0030      	movs	r0, r6
 80012d8:	f7ff fbec 	bl	8000ab4 <str2len>
 80012dc:	4f21      	ldr	r7, [pc, #132]	@ (8001364 <Edit_Scalars+0xb4>)
 80012de:	1830      	adds	r0, r6, r0
	itoa(p_aux,*Value,dot);
 80012e0:	9a01      	ldr	r2, [sp, #4]
 80012e2:	6829      	ldr	r1, [r5, #0]
	p_aux=Display1+str2len(Display1);
 80012e4:	6038      	str	r0, [r7, #0]
	itoa(p_aux,*Value,dot);
 80012e6:	f7ff fba3 	bl	8000a30 <itoa>
	Aux=MsgBox2(0, 1, 1);
 80012ea:	2201      	movs	r2, #1
 80012ec:	0020      	movs	r0, r4
 80012ee:	0011      	movs	r1, r2
			Aux=MsgBox2(0, 1, 1);
 80012f0:	f7ff feb2 	bl	8001058 <MsgBox2>
	while((Aux==1||Aux==2)&&!Tout()){
 80012f4:	3801      	subs	r0, #1
 80012f6:	2801      	cmp	r0, #1
 80012f8:	d804      	bhi.n	8001304 <Edit_Scalars+0x54>
 80012fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <Edit_Scalars+0xb8>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <Edit_Scalars+0xbc>)
 8001300:	429a      	cmp	r2, r3
 8001302:	dd06      	ble.n	8001312 <Edit_Scalars+0x62>
}
 8001304:	b005      	add	sp, #20
 8001306:	bdf0      	pop	{r4, r5, r6, r7, pc}
	strcpy(Display1,MsgStr[MsgNumber]);
 8001308:	54f4      	strb	r4, [r6, r3]
 800130a:	680b      	ldr	r3, [r1, #0]
 800130c:	549f      	strb	r7, [r3, r2]
 800130e:	0013      	movs	r3, r2
 8001310:	e7d9      	b.n	80012c6 <Edit_Scalars+0x16>
			Edit_Value((int32_t *)Value, sign, dot);
 8001312:	0028      	movs	r0, r5
 8001314:	9903      	ldr	r1, [sp, #12]
 8001316:	9a01      	ldr	r2, [sp, #4]
 8001318:	f7ff fc10 	bl	8000b3c <Edit_Value>
			strcpy(Display1,MsgStr[MsgNumber]);
 800131c:	2300      	movs	r3, #0
 800131e:	469c      	mov	ip, r3
 8001320:	480e      	ldr	r0, [pc, #56]	@ (800135c <Edit_Scalars+0xac>)
 8001322:	490f      	ldr	r1, [pc, #60]	@ (8001360 <Edit_Scalars+0xb0>)
 8001324:	9c02      	ldr	r4, [sp, #8]
 8001326:	6802      	ldr	r2, [r0, #0]
 8001328:	5912      	ldr	r2, [r2, r4]
 800132a:	680c      	ldr	r4, [r1, #0]
 800132c:	5cd6      	ldrb	r6, [r2, r3]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	2e00      	cmp	r6, #0
 8001332:	d10c      	bne.n	800134e <Edit_Scalars+0x9e>
			p_aux=Display1+str2len(Display1);
 8001334:	0020      	movs	r0, r4
 8001336:	f7ff fbbd 	bl	8000ab4 <str2len>
			itoa(p_aux,*Value,dot);
 800133a:	9a01      	ldr	r2, [sp, #4]
			p_aux=Display1+str2len(Display1);
 800133c:	1820      	adds	r0, r4, r0
			itoa(p_aux,*Value,dot);
 800133e:	6829      	ldr	r1, [r5, #0]
			p_aux=Display1+str2len(Display1);
 8001340:	6038      	str	r0, [r7, #0]
			itoa(p_aux,*Value,dot);
 8001342:	f7ff fb75 	bl	8000a30 <itoa>
			Aux=MsgBox2(0, 1, 1);
 8001346:	2201      	movs	r2, #1
 8001348:	0030      	movs	r0, r6
 800134a:	0011      	movs	r1, r2
 800134c:	e7d0      	b.n	80012f0 <Edit_Scalars+0x40>
			strcpy(Display1,MsgStr[MsgNumber]);
 800134e:	54e6      	strb	r6, [r4, r3]
 8001350:	4664      	mov	r4, ip
 8001352:	680b      	ldr	r3, [r1, #0]
 8001354:	549c      	strb	r4, [r3, r2]
 8001356:	0013      	movs	r3, r2
 8001358:	e7e4      	b.n	8001324 <Edit_Scalars+0x74>
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	200004d4 	.word	0x200004d4
 8001360:	200000ac 	.word	0x200000ac
 8001364:	20000448 	.word	0x20000448
 8001368:	200004b0 	.word	0x200004b0
 800136c:	00004e1f 	.word	0x00004e1f

08001370 <Edit_Temperatures>:
void Edit_Temperatures(int32_t MsgNumber, int32_t *Value){
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
	Aux=(W1209PY.fahrenheit)?To_fahrenheit(*Value):To_Celsius(*Value);
 8001372:	4f76      	ldr	r7, [pc, #472]	@ (800154c <Edit_Temperatures+0x1dc>)
 8001374:	680d      	ldr	r5, [r1, #0]
 8001376:	4a76      	ldr	r2, [pc, #472]	@ (8001550 <Edit_Temperatures+0x1e0>)
 8001378:	683b      	ldr	r3, [r7, #0]
void Edit_Temperatures(int32_t MsgNumber, int32_t *Value){
 800137a:	b087      	sub	sp, #28
 800137c:	0004      	movs	r4, r0
 800137e:	9103      	str	r1, [sp, #12]
	Aux=(W1209PY.fahrenheit)?To_fahrenheit(*Value):To_Celsius(*Value);
 8001380:	18ad      	adds	r5, r5, r2
 8001382:	069b      	lsls	r3, r3, #26
 8001384:	d507      	bpl.n	8001396 <Edit_Temperatures+0x26>
 8001386:	2012      	movs	r0, #18
 8001388:	210a      	movs	r1, #10
 800138a:	4368      	muls	r0, r5
 800138c:	f7fe ff36 	bl	80001fc <__divsi3>
 8001390:	23c8      	movs	r3, #200	@ 0xc8
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	18c5      	adds	r5, r0, r3
	p_aux=(unsigned char *)MsgStr[MsgNumber];
 8001396:	00a3      	lsls	r3, r4, #2
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	4b6e      	ldr	r3, [pc, #440]	@ (8001554 <Edit_Temperatures+0x1e4>)
 800139c:	9a02      	ldr	r2, [sp, #8]
 800139e:	681b      	ldr	r3, [r3, #0]
	strcpy(Display1,p_aux);
 80013a0:	4e6d      	ldr	r6, [pc, #436]	@ (8001558 <Edit_Temperatures+0x1e8>)
	p_aux=(unsigned char *)MsgStr[MsgNumber];
 80013a2:	589b      	ldr	r3, [r3, r2]
 80013a4:	4a6d      	ldr	r2, [pc, #436]	@ (800155c <Edit_Temperatures+0x1ec>)
	Aux=(W1209PY.fahrenheit)?To_fahrenheit(*Value):To_Celsius(*Value);
 80013a6:	9505      	str	r5, [sp, #20]
	p_aux=(unsigned char *)MsgStr[MsgNumber];
 80013a8:	6013      	str	r3, [r2, #0]
	strcpy(Display1,p_aux);
 80013aa:	2300      	movs	r3, #0
 80013ac:	0019      	movs	r1, r3
	p_aux=(unsigned char *)MsgStr[MsgNumber];
 80013ae:	9200      	str	r2, [sp, #0]
	strcpy(Display1,p_aux);
 80013b0:	9a00      	ldr	r2, [sp, #0]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	5cd4      	ldrb	r4, [r2, r3]
 80013b6:	6832      	ldr	r2, [r6, #0]
 80013b8:	9201      	str	r2, [sp, #4]
 80013ba:	9801      	ldr	r0, [sp, #4]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	2c00      	cmp	r4, #0
 80013c0:	d124      	bne.n	800140c <Edit_Temperatures+0x9c>
	p_aux=Display1+str2len(Display1);
 80013c2:	f7ff fb77 	bl	8000ab4 <str2len>
 80013c6:	9b01      	ldr	r3, [sp, #4]
	itoa(p_aux,Aux,2);
 80013c8:	2202      	movs	r2, #2
	p_aux=Display1+str2len(Display1);
 80013ca:	1818      	adds	r0, r3, r0
 80013cc:	9b00      	ldr	r3, [sp, #0]
	itoa(p_aux,Aux,2);
 80013ce:	0029      	movs	r1, r5
	p_aux=Display1+str2len(Display1);
 80013d0:	6018      	str	r0, [r3, #0]
	itoa(p_aux,Aux,2);
 80013d2:	f7ff fb2d 	bl	8000a30 <itoa>
	p_aux=Display1+str2len(Display1);
 80013d6:	6835      	ldr	r5, [r6, #0]
 80013d8:	0028      	movs	r0, r5
 80013da:	f7ff fb6b 	bl	8000ab4 <str2len>
	if(W1209PY.fahrenheit){ 
 80013de:	683a      	ldr	r2, [r7, #0]
	p_aux=Display1+str2len(Display1);
 80013e0:	9b00      	ldr	r3, [sp, #0]
 80013e2:	182d      	adds	r5, r5, r0
	if(W1209PY.fahrenheit){ 
 80013e4:	0692      	lsls	r2, r2, #26
	p_aux=Display1+str2len(Display1);
 80013e6:	601d      	str	r5, [r3, #0]
	if(W1209PY.fahrenheit){ 
 80013e8:	485a      	ldr	r0, [pc, #360]	@ (8001554 <Edit_Temperatures+0x1e4>)
 80013ea:	0fd3      	lsrs	r3, r2, #31
 80013ec:	2a00      	cmp	r2, #0
 80013ee:	db3c      	blt.n	800146a <Edit_Temperatures+0xfa>
							  strcpy(p_aux,MsgStr[30]);
 80013f0:	001d      	movs	r5, r3
 80013f2:	4c5a      	ldr	r4, [pc, #360]	@ (800155c <Edit_Temperatures+0x1ec>)
 80013f4:	6802      	ldr	r2, [r0, #0]
 80013f6:	1c59      	adds	r1, r3, #1
 80013f8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80013fa:	5cd2      	ldrb	r2, [r2, r3]
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d015      	beq.n	800142c <Edit_Temperatures+0xbc>
 8001400:	6826      	ldr	r6, [r4, #0]
 8001402:	54f2      	strb	r2, [r6, r3]
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	545d      	strb	r5, [r3, r1]
 8001408:	000b      	movs	r3, r1
 800140a:	e7f3      	b.n	80013f4 <Edit_Temperatures+0x84>
	strcpy(Display1,p_aux);
 800140c:	54c4      	strb	r4, [r0, r3]
 800140e:	6833      	ldr	r3, [r6, #0]
 8001410:	5499      	strb	r1, [r3, r2]
 8001412:	0013      	movs	r3, r2
 8001414:	e7cc      	b.n	80013b0 <Edit_Temperatures+0x40>
							  strcpy(p_aux,MsgStr[29]);
 8001416:	680e      	ldr	r6, [r1, #0]
 8001418:	5533      	strb	r3, [r6, r4]
 800141a:	0014      	movs	r4, r2
 800141c:	680b      	ldr	r3, [r1, #0]
 800141e:	549d      	strb	r5, [r3, r2]
 8001420:	6803      	ldr	r3, [r0, #0]
 8001422:	1c62      	adds	r2, r4, #1
 8001424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001426:	5d1b      	ldrb	r3, [r3, r4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f4      	bne.n	8001416 <Edit_Temperatures+0xa6>
		Result=MsgBox2(0, 1, 1);
 800142c:	2201      	movs	r2, #1
 800142e:	2000      	movs	r0, #0
 8001430:	0011      	movs	r1, r2
 8001432:	f7ff fe11 	bl	8001058 <MsgBox2>
	while((Result==1||Result==2)&&!Tout()){
 8001436:	3801      	subs	r0, #1
 8001438:	2801      	cmp	r0, #1
 800143a:	d804      	bhi.n	8001446 <Edit_Temperatures+0xd6>
 800143c:	4b48      	ldr	r3, [pc, #288]	@ (8001560 <Edit_Temperatures+0x1f0>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b48      	ldr	r3, [pc, #288]	@ (8001564 <Edit_Temperatures+0x1f4>)
 8001442:	429a      	cmp	r2, r3
 8001444:	dd14      	ble.n	8001470 <Edit_Temperatures+0x100>
	*Value=(W1209PY.fahrenheit)?From_fahrenheit(Aux):From_Celsius(Aux);
 8001446:	9805      	ldr	r0, [sp, #20]
 8001448:	4c47      	ldr	r4, [pc, #284]	@ (8001568 <Edit_Temperatures+0x1f8>)
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	1903      	adds	r3, r0, r4
 800144e:	0692      	lsls	r2, r2, #26
 8001450:	d507      	bpl.n	8001462 <Edit_Temperatures+0xf2>
 8001452:	4b46      	ldr	r3, [pc, #280]	@ (800156c <Edit_Temperatures+0x1fc>)
 8001454:	2112      	movs	r1, #18
 8001456:	18c3      	adds	r3, r0, r3
 8001458:	200a      	movs	r0, #10
 800145a:	4358      	muls	r0, r3
 800145c:	f7fe fece 	bl	80001fc <__divsi3>
 8001460:	1903      	adds	r3, r0, r4
 8001462:	9a03      	ldr	r2, [sp, #12]
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	b007      	add	sp, #28
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}
							  strcpy(p_aux,MsgStr[29]);
 800146a:	0025      	movs	r5, r4
 800146c:	493b      	ldr	r1, [pc, #236]	@ (800155c <Edit_Temperatures+0x1ec>)
 800146e:	e7d7      	b.n	8001420 <Edit_Temperatures+0xb0>
		Edit_Value((int32_t *)&Aux, 1, 2);
 8001470:	2202      	movs	r2, #2
 8001472:	a805      	add	r0, sp, #20
 8001474:	2101      	movs	r1, #1
 8001476:	f7ff fb61 	bl	8000b3c <Edit_Value>
		Aux=(W1209PY.fahrenheit)?From_fahrenheit(Aux):From_Celsius(Aux);
 800147a:	4c3b      	ldr	r4, [pc, #236]	@ (8001568 <Edit_Temperatures+0x1f8>)
 800147c:	9805      	ldr	r0, [sp, #20]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	1903      	adds	r3, r0, r4
 8001482:	0692      	lsls	r2, r2, #26
 8001484:	d507      	bpl.n	8001496 <Edit_Temperatures+0x126>
 8001486:	4b39      	ldr	r3, [pc, #228]	@ (800156c <Edit_Temperatures+0x1fc>)
 8001488:	2112      	movs	r1, #18
 800148a:	18c0      	adds	r0, r0, r3
 800148c:	230a      	movs	r3, #10
 800148e:	4358      	muls	r0, r3
 8001490:	f7fe feb4 	bl	80001fc <__divsi3>
 8001494:	1903      	adds	r3, r0, r4
		Aux=(Aux>0)?Aux:0;
 8001496:	43da      	mvns	r2, r3
 8001498:	17d2      	asrs	r2, r2, #31
 800149a:	4013      	ands	r3, r2
		Aux=(W1209PY.fahrenheit)?To_fahrenheit(Aux):To_Celsius(Aux);
 800149c:	6839      	ldr	r1, [r7, #0]
 800149e:	4a2c      	ldr	r2, [pc, #176]	@ (8001550 <Edit_Temperatures+0x1e0>)
 80014a0:	189d      	adds	r5, r3, r2
 80014a2:	0689      	lsls	r1, r1, #26
 80014a4:	d507      	bpl.n	80014b6 <Edit_Temperatures+0x146>
 80014a6:	2012      	movs	r0, #18
 80014a8:	210a      	movs	r1, #10
 80014aa:	4368      	muls	r0, r5
 80014ac:	f7fe fea6 	bl	80001fc <__divsi3>
 80014b0:	23c8      	movs	r3, #200	@ 0xc8
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	18c5      	adds	r5, r0, r3
		strcpy(Display1,MsgStr[MsgNumber]);
 80014b6:	2300      	movs	r3, #0
 80014b8:	469c      	mov	ip, r3
 80014ba:	4926      	ldr	r1, [pc, #152]	@ (8001554 <Edit_Temperatures+0x1e4>)
 80014bc:	4e26      	ldr	r6, [pc, #152]	@ (8001558 <Edit_Temperatures+0x1e8>)
		Aux=(W1209PY.fahrenheit)?To_fahrenheit(Aux):To_Celsius(Aux);
 80014be:	9505      	str	r5, [sp, #20]
		strcpy(Display1,MsgStr[MsgNumber]);
 80014c0:	9802      	ldr	r0, [sp, #8]
 80014c2:	680a      	ldr	r2, [r1, #0]
 80014c4:	5812      	ldr	r2, [r2, r0]
 80014c6:	5cd4      	ldrb	r4, [r2, r3]
 80014c8:	6832      	ldr	r2, [r6, #0]
 80014ca:	9201      	str	r2, [sp, #4]
 80014cc:	9801      	ldr	r0, [sp, #4]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	2c00      	cmp	r4, #0
 80014d2:	d125      	bne.n	8001520 <Edit_Temperatures+0x1b0>
		p_aux=Display1+str2len(Display1);
 80014d4:	f7ff faee 	bl	8000ab4 <str2len>
 80014d8:	9b01      	ldr	r3, [sp, #4]
		itoa(p_aux,Aux,2);
 80014da:	2202      	movs	r2, #2
		p_aux=Display1+str2len(Display1);
 80014dc:	1818      	adds	r0, r3, r0
 80014de:	9b00      	ldr	r3, [sp, #0]
		itoa(p_aux,Aux,2);
 80014e0:	0029      	movs	r1, r5
		p_aux=Display1+str2len(Display1);
 80014e2:	6018      	str	r0, [r3, #0]
		itoa(p_aux,Aux,2);
 80014e4:	f7ff faa4 	bl	8000a30 <itoa>
		p_aux=Display1+str2len(Display1);
 80014e8:	6835      	ldr	r5, [r6, #0]
 80014ea:	0028      	movs	r0, r5
 80014ec:	f7ff fae2 	bl	8000ab4 <str2len>
		if(W1209PY.fahrenheit){
 80014f0:	683a      	ldr	r2, [r7, #0]
		p_aux=Display1+str2len(Display1);
 80014f2:	9b00      	ldr	r3, [sp, #0]
 80014f4:	182d      	adds	r5, r5, r0
		if(W1209PY.fahrenheit){
 80014f6:	0692      	lsls	r2, r2, #26
		p_aux=Display1+str2len(Display1);
 80014f8:	601d      	str	r5, [r3, #0]
		if(W1209PY.fahrenheit){
 80014fa:	4816      	ldr	r0, [pc, #88]	@ (8001554 <Edit_Temperatures+0x1e4>)
 80014fc:	0fd3      	lsrs	r3, r2, #31
 80014fe:	2a00      	cmp	r2, #0
 8001500:	db20      	blt.n	8001544 <Edit_Temperatures+0x1d4>
							    strcpy(p_aux,MsgStr[30]);
 8001502:	001d      	movs	r5, r3
 8001504:	4c15      	ldr	r4, [pc, #84]	@ (800155c <Edit_Temperatures+0x1ec>)
 8001506:	6802      	ldr	r2, [r0, #0]
 8001508:	1c59      	adds	r1, r3, #1
 800150a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800150c:	5cd2      	ldrb	r2, [r2, r3]
 800150e:	2a00      	cmp	r2, #0
 8001510:	d100      	bne.n	8001514 <Edit_Temperatures+0x1a4>
 8001512:	e78b      	b.n	800142c <Edit_Temperatures+0xbc>
 8001514:	6826      	ldr	r6, [r4, #0]
 8001516:	54f2      	strb	r2, [r6, r3]
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	545d      	strb	r5, [r3, r1]
 800151c:	000b      	movs	r3, r1
 800151e:	e7f2      	b.n	8001506 <Edit_Temperatures+0x196>
		strcpy(Display1,MsgStr[MsgNumber]);
 8001520:	54c4      	strb	r4, [r0, r3]
 8001522:	4660      	mov	r0, ip
 8001524:	6833      	ldr	r3, [r6, #0]
 8001526:	5498      	strb	r0, [r3, r2]
 8001528:	0013      	movs	r3, r2
 800152a:	e7c9      	b.n	80014c0 <Edit_Temperatures+0x150>
								strcpy(p_aux,MsgStr[29]); 
 800152c:	680e      	ldr	r6, [r1, #0]
 800152e:	5533      	strb	r3, [r6, r4]
 8001530:	0014      	movs	r4, r2
 8001532:	680b      	ldr	r3, [r1, #0]
 8001534:	549d      	strb	r5, [r3, r2]
 8001536:	6803      	ldr	r3, [r0, #0]
 8001538:	1c62      	adds	r2, r4, #1
 800153a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800153c:	5d1b      	ldrb	r3, [r3, r4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f4      	bne.n	800152c <Edit_Temperatures+0x1bc>
 8001542:	e773      	b.n	800142c <Edit_Temperatures+0xbc>
 8001544:	0025      	movs	r5, r4
 8001546:	4905      	ldr	r1, [pc, #20]	@ (800155c <Edit_Temperatures+0x1ec>)
 8001548:	e7f5      	b.n	8001536 <Edit_Temperatures+0x1c6>
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	200003b0 	.word	0x200003b0
 8001550:	ffff954d 	.word	0xffff954d
 8001554:	200004d4 	.word	0x200004d4
 8001558:	200000ac 	.word	0x200000ac
 800155c:	20000448 	.word	0x20000448
 8001560:	200004b0 	.word	0x200004b0
 8001564:	00004e1f 	.word	0x00004e1f
 8001568:	00006ab3 	.word	0x00006ab3
 800156c:	fffff380 	.word	0xfffff380

08001570 <Update_Beta>:
void Update_Beta(){
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NTC.Beta=(int64_t)(NTC.Log_R1-NTC.Log_R0)*(int64_t)(NTC.T0K*NTC.T1K)/((int32_t)(NTC.T0K-NTC.T1K));
 8001572:	2600      	movs	r6, #0
 8001574:	4c0f      	ldr	r4, [pc, #60]	@ (80015b4 <Update_Beta+0x44>)
 8001576:	69a0      	ldr	r0, [r4, #24]
 8001578:	6921      	ldr	r1, [r4, #16]
 800157a:	69e3      	ldr	r3, [r4, #28]
 800157c:	6a22      	ldr	r2, [r4, #32]
 800157e:	1a40      	subs	r0, r0, r1
 8001580:	69e5      	ldr	r5, [r4, #28]
 8001582:	6a27      	ldr	r7, [r4, #32]
 8001584:	435a      	muls	r2, r3
 8001586:	17c1      	asrs	r1, r0, #31
 8001588:	0033      	movs	r3, r6
 800158a:	f003 fbdd 	bl	8004d48 <__aeabi_lmul>
 800158e:	1bea      	subs	r2, r5, r7
 8001590:	17d3      	asrs	r3, r2, #31
 8001592:	f7fe ff1f 	bl	80003d4 <__aeabi_ldivmod>
 8001596:	0002      	movs	r2, r0
 8001598:	000b      	movs	r3, r1
 800159a:	62a2      	str	r2, [r4, #40]	@ 0x28
 800159c:	62e3      	str	r3, [r4, #44]	@ 0x2c
	NTC.Beta_T0K=(NTC.Beta)/NTC.T0K;
 800159e:	0033      	movs	r3, r6
 80015a0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80015a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80015a4:	69e2      	ldr	r2, [r4, #28]
 80015a6:	f7fe ff15 	bl	80003d4 <__aeabi_ldivmod>
 80015aa:	0002      	movs	r2, r0
 80015ac:	000b      	movs	r3, r1
 80015ae:	6322      	str	r2, [r4, #48]	@ 0x30
 80015b0:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80015b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015b4:	200003e8 	.word	0x200003e8

080015b8 <Edit_Temperatures_Simple>:
void Edit_Temperatures_Simple(int32_t *Value, int32_t Delta){
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	Aux=(W1209PY.fahrenheit)?To_fahrenheit(*Value):To_Celsius(*Value);
 80015ba:	4e5b      	ldr	r6, [pc, #364]	@ (8001728 <Edit_Temperatures_Simple+0x170>)
 80015bc:	6804      	ldr	r4, [r0, #0]
 80015be:	4a5b      	ldr	r2, [pc, #364]	@ (800172c <Edit_Temperatures_Simple+0x174>)
 80015c0:	6833      	ldr	r3, [r6, #0]
void Edit_Temperatures_Simple(int32_t *Value, int32_t Delta){
 80015c2:	b085      	sub	sp, #20
 80015c4:	9001      	str	r0, [sp, #4]
 80015c6:	9102      	str	r1, [sp, #8]
	Aux=(W1209PY.fahrenheit)?To_fahrenheit(*Value):To_Celsius(*Value);
 80015c8:	18a4      	adds	r4, r4, r2
 80015ca:	069b      	lsls	r3, r3, #26
 80015cc:	d507      	bpl.n	80015de <Edit_Temperatures_Simple+0x26>
 80015ce:	2012      	movs	r0, #18
 80015d0:	210a      	movs	r1, #10
 80015d2:	4360      	muls	r0, r4
 80015d4:	f7fe fe12 	bl	80001fc <__divsi3>
 80015d8:	23c8      	movs	r3, #200	@ 0xc8
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	18c4      	adds	r4, r0, r3
	p_aux=Display1;
 80015de:	4d54      	ldr	r5, [pc, #336]	@ (8001730 <Edit_Temperatures_Simple+0x178>)
 80015e0:	4b54      	ldr	r3, [pc, #336]	@ (8001734 <Edit_Temperatures_Simple+0x17c>)
 80015e2:	6828      	ldr	r0, [r5, #0]
	itoa(p_aux,Aux,2);
 80015e4:	2202      	movs	r2, #2
 80015e6:	0021      	movs	r1, r4
	p_aux=Display1;
 80015e8:	6018      	str	r0, [r3, #0]
 80015ea:	9300      	str	r3, [sp, #0]
	itoa(p_aux,Aux,2);
 80015ec:	f7ff fa20 	bl	8000a30 <itoa>
	Put_Buff_On_Display(Display1,0);
 80015f0:	2100      	movs	r1, #0
 80015f2:	6828      	ldr	r0, [r5, #0]
 80015f4:	f7ff f898 	bl	8000728 <Put_Buff_On_Display>
	Timeout=0;
 80015f8:	2200      	movs	r2, #0
 80015fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001738 <Edit_Temperatures_Simple+0x180>)
 80015fc:	601a      	str	r2, [r3, #0]
	while(!Pressed_BSet&&!Tout()){					
 80015fe:	4f4f      	ldr	r7, [pc, #316]	@ (800173c <Edit_Temperatures_Simple+0x184>)
 8001600:	683d      	ldr	r5, [r7, #0]
 8001602:	2d00      	cmp	r5, #0
 8001604:	d104      	bne.n	8001610 <Edit_Temperatures_Simple+0x58>
 8001606:	4b4c      	ldr	r3, [pc, #304]	@ (8001738 <Edit_Temperatures_Simple+0x180>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b4d      	ldr	r3, [pc, #308]	@ (8001740 <Edit_Temperatures_Simple+0x188>)
 800160c:	429a      	cmp	r2, r3
 800160e:	dd12      	ble.n	8001636 <Edit_Temperatures_Simple+0x7e>
	*Value=(W1209PY.fahrenheit)?From_fahrenheit(Aux):From_Celsius(Aux);
 8001610:	4d4c      	ldr	r5, [pc, #304]	@ (8001744 <Edit_Temperatures_Simple+0x18c>)
 8001612:	6833      	ldr	r3, [r6, #0]
 8001614:	1960      	adds	r0, r4, r5
 8001616:	069b      	lsls	r3, r3, #26
 8001618:	d507      	bpl.n	800162a <Edit_Temperatures_Simple+0x72>
 800161a:	200a      	movs	r0, #10
 800161c:	4b4a      	ldr	r3, [pc, #296]	@ (8001748 <Edit_Temperatures_Simple+0x190>)
 800161e:	2112      	movs	r1, #18
 8001620:	18e4      	adds	r4, r4, r3
 8001622:	4360      	muls	r0, r4
 8001624:	f7fe fdea 	bl	80001fc <__divsi3>
 8001628:	1940      	adds	r0, r0, r5
 800162a:	9b01      	ldr	r3, [sp, #4]
 800162c:	6018      	str	r0, [r3, #0]
	Pressed_BSet=0;	
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
}
 8001632:	b005      	add	sp, #20
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(Pressed_BMinus&&Pressed_BPlus){
 8001636:	4b45      	ldr	r3, [pc, #276]	@ (800174c <Edit_Temperatures_Simple+0x194>)
 8001638:	9303      	str	r3, [sp, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d012      	beq.n	8001666 <Edit_Temperatures_Simple+0xae>
 8001640:	4f43      	ldr	r7, [pc, #268]	@ (8001750 <Edit_Temperatures_Simple+0x198>)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00e      	beq.n	8001666 <Edit_Temperatures_Simple+0xae>
				Aux=0;
 8001648:	002c      	movs	r4, r5
				itoa(p_aux,Aux,2);
 800164a:	4b3a      	ldr	r3, [pc, #232]	@ (8001734 <Edit_Temperatures_Simple+0x17c>)
 800164c:	2202      	movs	r2, #2
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	0029      	movs	r1, r5
 8001652:	f7ff f9ed 	bl	8000a30 <itoa>
				Put_Buff_On_Display(Display1,0);
 8001656:	4b36      	ldr	r3, [pc, #216]	@ (8001730 <Edit_Temperatures_Simple+0x178>)
 8001658:	0029      	movs	r1, r5
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	f7ff f864 	bl	8000728 <Put_Buff_On_Display>
				Pressed_BMinus=Pressed_BPlus=0;
 8001660:	9b03      	ldr	r3, [sp, #12]
 8001662:	603d      	str	r5, [r7, #0]
 8001664:	601d      	str	r5, [r3, #0]
		if (((Pressed_BPlus>1)&&(!(Tick_Timer&(0x3FF>>(Pressed_BPlus>>2)))))||(Pressed_BPlus==1))
 8001666:	4b3a      	ldr	r3, [pc, #232]	@ (8001750 <Edit_Temperatures_Simple+0x198>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2a01      	cmp	r2, #1
 800166c:	d907      	bls.n	800167e <Edit_Temperatures_Simple+0xc6>
 800166e:	4a39      	ldr	r2, [pc, #228]	@ (8001754 <Edit_Temperatures_Simple+0x19c>)
 8001670:	6819      	ldr	r1, [r3, #0]
 8001672:	6810      	ldr	r0, [r2, #0]
 8001674:	4a38      	ldr	r2, [pc, #224]	@ (8001758 <Edit_Temperatures_Simple+0x1a0>)
 8001676:	0889      	lsrs	r1, r1, #2
 8001678:	410a      	asrs	r2, r1
 800167a:	4210      	tst	r0, r2
 800167c:	d002      	beq.n	8001684 <Edit_Temperatures_Simple+0xcc>
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2a01      	cmp	r2, #1
 8001682:	d115      	bne.n	80016b0 <Edit_Temperatures_Simple+0xf8>
				if(Pressed_BPlus==1) Pressed_BPlus=0;
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2a01      	cmp	r2, #1
 8001688:	d101      	bne.n	800168e <Edit_Temperatures_Simple+0xd6>
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
				Aux+=Delta;
 800168e:	9b02      	ldr	r3, [sp, #8]
				itoa(p_aux,Aux,2);
 8001690:	2202      	movs	r2, #2
				Aux+=Delta;
 8001692:	18e4      	adds	r4, r4, r3
				itoa(p_aux,Aux,2);
 8001694:	9b00      	ldr	r3, [sp, #0]
 8001696:	0021      	movs	r1, r4
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	f7ff f9c9 	bl	8000a30 <itoa>
				Put_Buff_On_Display(Display1,0);
 800169e:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <Edit_Temperatures_Simple+0x178>)
 80016a0:	2100      	movs	r1, #0
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	f7ff f840 	bl	8000728 <Put_Buff_On_Display>
				Tick_Timer++;
 80016a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001754 <Edit_Temperatures_Simple+0x19c>)
 80016aa:	6813      	ldr	r3, [r2, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	6013      	str	r3, [r2, #0]
		if (((Pressed_BMinus>1)&&(!(Tick_Timer&(0x3FF>>(Pressed_BMinus>>2)))))||(Pressed_BMinus==1))
 80016b0:	4b26      	ldr	r3, [pc, #152]	@ (800174c <Edit_Temperatures_Simple+0x194>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2a01      	cmp	r2, #1
 80016b6:	d907      	bls.n	80016c8 <Edit_Temperatures_Simple+0x110>
 80016b8:	4a26      	ldr	r2, [pc, #152]	@ (8001754 <Edit_Temperatures_Simple+0x19c>)
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	6810      	ldr	r0, [r2, #0]
 80016be:	4a26      	ldr	r2, [pc, #152]	@ (8001758 <Edit_Temperatures_Simple+0x1a0>)
 80016c0:	0889      	lsrs	r1, r1, #2
 80016c2:	410a      	asrs	r2, r1
 80016c4:	4210      	tst	r0, r2
 80016c6:	d002      	beq.n	80016ce <Edit_Temperatures_Simple+0x116>
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2a01      	cmp	r2, #1
 80016cc:	d115      	bne.n	80016fa <Edit_Temperatures_Simple+0x142>
				if(Pressed_BMinus==1) Pressed_BMinus=0;
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2a01      	cmp	r2, #1
 80016d2:	d101      	bne.n	80016d8 <Edit_Temperatures_Simple+0x120>
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
				Aux-=Delta;
 80016d8:	9b02      	ldr	r3, [sp, #8]
				itoa(p_aux,Aux,2);
 80016da:	2202      	movs	r2, #2
				Aux-=Delta;
 80016dc:	1ae4      	subs	r4, r4, r3
				itoa(p_aux,Aux,2);
 80016de:	9b00      	ldr	r3, [sp, #0]
 80016e0:	0021      	movs	r1, r4
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	f7ff f9a4 	bl	8000a30 <itoa>
				Put_Buff_On_Display(Display1,0);
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <Edit_Temperatures_Simple+0x178>)
 80016ea:	2100      	movs	r1, #0
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	f7ff f81b 	bl	8000728 <Put_Buff_On_Display>
				Tick_Timer++;
 80016f2:	4a18      	ldr	r2, [pc, #96]	@ (8001754 <Edit_Temperatures_Simple+0x19c>)
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	6013      	str	r3, [r2, #0]
		if(Aux>99900) Aux=99900;
 80016fa:	4b18      	ldr	r3, [pc, #96]	@ (800175c <Edit_Temperatures_Simple+0x1a4>)
 80016fc:	429c      	cmp	r4, r3
 80016fe:	dd00      	ble.n	8001702 <Edit_Temperatures_Simple+0x14a>
 8001700:	001c      	movs	r4, r3
		if(Aux<(W1209PY.fahrenheit?-46957:-_100Kelvin)) Aux=(W1209PY.fahrenheit?-46957:-_100Kelvin);
 8001702:	6833      	ldr	r3, [r6, #0]
 8001704:	4a16      	ldr	r2, [pc, #88]	@ (8001760 <Edit_Temperatures_Simple+0x1a8>)
 8001706:	069b      	lsls	r3, r3, #26
 8001708:	0fdb      	lsrs	r3, r3, #31
 800170a:	4916      	ldr	r1, [pc, #88]	@ (8001764 <Edit_Temperatures_Simple+0x1ac>)
 800170c:	3b01      	subs	r3, #1
 800170e:	4013      	ands	r3, r2
 8001710:	185b      	adds	r3, r3, r1
 8001712:	42a3      	cmp	r3, r4
 8001714:	dc00      	bgt.n	8001718 <Edit_Temperatures_Simple+0x160>
 8001716:	e772      	b.n	80015fe <Edit_Temperatures_Simple+0x46>
 8001718:	6834      	ldr	r4, [r6, #0]
 800171a:	06a4      	lsls	r4, r4, #26
 800171c:	0fe4      	lsrs	r4, r4, #31
 800171e:	3c01      	subs	r4, #1
 8001720:	4014      	ands	r4, r2
 8001722:	1864      	adds	r4, r4, r1
 8001724:	e76b      	b.n	80015fe <Edit_Temperatures_Simple+0x46>
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	200003b0 	.word	0x200003b0
 800172c:	ffff954d 	.word	0xffff954d
 8001730:	200000ac 	.word	0x200000ac
 8001734:	20000448 	.word	0x20000448
 8001738:	200004b0 	.word	0x200004b0
 800173c:	20000464 	.word	0x20000464
 8001740:	00004e1f 	.word	0x00004e1f
 8001744:	00006ab3 	.word	0x00006ab3
 8001748:	fffff380 	.word	0xfffff380
 800174c:	20000460 	.word	0x20000460
 8001750:	2000045c 	.word	0x2000045c
 8001754:	200004d0 	.word	0x200004d0
 8001758:	000003ff 	.word	0x000003ff
 800175c:	0001863c 	.word	0x0001863c
 8001760:	00004cba 	.word	0x00004cba
 8001764:	ffff4893 	.word	0xffff4893

08001768 <Align_Right>:
void Align_Right(unsigned char *Str){
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	0004      	movs	r4, r0
		Str[0]=' ';
 800176c:	2520      	movs	r5, #32
	while((Digit_Count=str2len(Str))<3){
 800176e:	0020      	movs	r0, r4
 8001770:	f7ff f9a0 	bl	8000ab4 <str2len>
 8001774:	2802      	cmp	r0, #2
 8001776:	dc0a      	bgt.n	800178e <Align_Right+0x26>
 8001778:	1820      	adds	r0, r4, r0
 800177a:	e004      	b.n	8001786 <Align_Right+0x1e>
		for(int __ind=Digit_Count;__ind;__ind--) {	Str[__ind+1]=Str[__ind]; Str[__ind]=Str[__ind-1]; }
 800177c:	7802      	ldrb	r2, [r0, #0]
 800177e:	3801      	subs	r0, #1
 8001780:	7082      	strb	r2, [r0, #2]
 8001782:	7802      	ldrb	r2, [r0, #0]
 8001784:	7042      	strb	r2, [r0, #1]
 8001786:	4284      	cmp	r4, r0
 8001788:	d1f8      	bne.n	800177c <Align_Right+0x14>
		Str[0]=' ';
 800178a:	7025      	strb	r5, [r4, #0]
 800178c:	e7ef      	b.n	800176e <Align_Right+0x6>
}
 800178e:	bd70      	pop	{r4, r5, r6, pc}

08001790 <Edit_Value_Simple>:
void Edit_Value_Simple(int32_t *Value, int32_t Highest, int32_t Lowest, int32_t dot){
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
	p_aux=Display1;
 8001792:	4d4d      	ldr	r5, [pc, #308]	@ (80018c8 <Edit_Value_Simple+0x138>)
void Edit_Value_Simple(int32_t *Value, int32_t Highest, int32_t Lowest, int32_t dot){
 8001794:	b087      	sub	sp, #28
	int32_t Aux=*Value;
 8001796:	6804      	ldr	r4, [r0, #0]
void Edit_Value_Simple(int32_t *Value, int32_t Highest, int32_t Lowest, int32_t dot){
 8001798:	9301      	str	r3, [sp, #4]
	p_aux=Display1;
 800179a:	4e4c      	ldr	r6, [pc, #304]	@ (80018cc <Edit_Value_Simple+0x13c>)
void Edit_Value_Simple(int32_t *Value, int32_t Highest, int32_t Lowest, int32_t dot){
 800179c:	9002      	str	r0, [sp, #8]
	p_aux=Display1;
 800179e:	6828      	ldr	r0, [r5, #0]
void Edit_Value_Simple(int32_t *Value, int32_t Highest, int32_t Lowest, int32_t dot){
 80017a0:	9103      	str	r1, [sp, #12]
 80017a2:	9204      	str	r2, [sp, #16]
	itoa(p_aux,Aux,dot);
 80017a4:	0021      	movs	r1, r4
 80017a6:	9a01      	ldr	r2, [sp, #4]
	p_aux=Display1;
 80017a8:	6030      	str	r0, [r6, #0]
	itoa(p_aux,Aux,dot);
 80017aa:	f7ff f941 	bl	8000a30 <itoa>
	Align_Right(Display1);
 80017ae:	6828      	ldr	r0, [r5, #0]
 80017b0:	f7ff ffda 	bl	8001768 <Align_Right>
	Put_Buff_On_Display(Display1,0);
 80017b4:	2100      	movs	r1, #0
 80017b6:	6828      	ldr	r0, [r5, #0]
 80017b8:	f7fe ffb6 	bl	8000728 <Put_Buff_On_Display>
	for (Timeout=0;!Pressed_BSet&&!Tout();){					
 80017bc:	2200      	movs	r2, #0
 80017be:	4b44      	ldr	r3, [pc, #272]	@ (80018d0 <Edit_Value_Simple+0x140>)
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	4b44      	ldr	r3, [pc, #272]	@ (80018d4 <Edit_Value_Simple+0x144>)
 80017c4:	681d      	ldr	r5, [r3, #0]
 80017c6:	2d00      	cmp	r5, #0
 80017c8:	d005      	beq.n	80017d6 <Edit_Value_Simple+0x46>
	*Value=Aux;
 80017ca:	9a02      	ldr	r2, [sp, #8]
 80017cc:	6014      	str	r4, [r2, #0]
	Pressed_BSet=0;	
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
}
 80017d2:	b007      	add	sp, #28
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (Timeout=0;!Pressed_BSet&&!Tout();){					
 80017d6:	4a3e      	ldr	r2, [pc, #248]	@ (80018d0 <Edit_Value_Simple+0x140>)
 80017d8:	6811      	ldr	r1, [r2, #0]
 80017da:	4a3f      	ldr	r2, [pc, #252]	@ (80018d8 <Edit_Value_Simple+0x148>)
 80017dc:	4291      	cmp	r1, r2
 80017de:	dcf4      	bgt.n	80017ca <Edit_Value_Simple+0x3a>
		if(Pressed_BMinus&&Pressed_BPlus){
 80017e0:	4b3e      	ldr	r3, [pc, #248]	@ (80018dc <Edit_Value_Simple+0x14c>)
 80017e2:	9305      	str	r3, [sp, #20]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d015      	beq.n	8001816 <Edit_Value_Simple+0x86>
 80017ea:	4f3d      	ldr	r7, [pc, #244]	@ (80018e0 <Edit_Value_Simple+0x150>)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d011      	beq.n	8001816 <Edit_Value_Simple+0x86>
				itoa(p_aux,Aux,dot);
 80017f2:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <Edit_Value_Simple+0x13c>)
 80017f4:	0029      	movs	r1, r5
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	9a01      	ldr	r2, [sp, #4]
 80017fa:	f7ff f919 	bl	8000a30 <itoa>
				Align_Right(Display1);
 80017fe:	4c32      	ldr	r4, [pc, #200]	@ (80018c8 <Edit_Value_Simple+0x138>)
 8001800:	6820      	ldr	r0, [r4, #0]
 8001802:	f7ff ffb1 	bl	8001768 <Align_Right>
				Put_Buff_On_Display(Display1,0);
 8001806:	6820      	ldr	r0, [r4, #0]
				Aux=0;
 8001808:	002c      	movs	r4, r5
				Put_Buff_On_Display(Display1,0);
 800180a:	0029      	movs	r1, r5
 800180c:	f7fe ff8c 	bl	8000728 <Put_Buff_On_Display>
				Pressed_BMinus=Pressed_BPlus=0;
 8001810:	9b05      	ldr	r3, [sp, #20]
 8001812:	603d      	str	r5, [r7, #0]
 8001814:	601d      	str	r5, [r3, #0]
		if (((Pressed_BPlus>1)&&(!(Tick_Timer&(0x3FF>>(Pressed_BPlus>>2)))))||(Pressed_BPlus==1))
 8001816:	4b32      	ldr	r3, [pc, #200]	@ (80018e0 <Edit_Value_Simple+0x150>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2a01      	cmp	r2, #1
 800181c:	d907      	bls.n	800182e <Edit_Value_Simple+0x9e>
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b30      	ldr	r3, [pc, #192]	@ (80018e4 <Edit_Value_Simple+0x154>)
 8001822:	0892      	lsrs	r2, r2, #2
 8001824:	6819      	ldr	r1, [r3, #0]
 8001826:	4b30      	ldr	r3, [pc, #192]	@ (80018e8 <Edit_Value_Simple+0x158>)
 8001828:	4113      	asrs	r3, r2
 800182a:	4219      	tst	r1, r3
 800182c:	d003      	beq.n	8001836 <Edit_Value_Simple+0xa6>
 800182e:	4b2c      	ldr	r3, [pc, #176]	@ (80018e0 <Edit_Value_Simple+0x150>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d11b      	bne.n	800186e <Edit_Value_Simple+0xde>
				if(Pressed_BPlus==1) Pressed_BPlus=0;
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <Edit_Value_Simple+0x150>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2a01      	cmp	r2, #1
 800183c:	d101      	bne.n	8001842 <Edit_Value_Simple+0xb2>
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
				Aux=((++Aux)>Highest)?Highest:Aux;
 8001842:	9b03      	ldr	r3, [sp, #12]
 8001844:	3401      	adds	r4, #1
 8001846:	429c      	cmp	r4, r3
 8001848:	dd00      	ble.n	800184c <Edit_Value_Simple+0xbc>
 800184a:	001c      	movs	r4, r3
				itoa(p_aux,Aux,dot);
 800184c:	9a01      	ldr	r2, [sp, #4]
 800184e:	0021      	movs	r1, r4
 8001850:	6830      	ldr	r0, [r6, #0]
 8001852:	f7ff f8ed 	bl	8000a30 <itoa>
				Align_Right(Display1);
 8001856:	4d1c      	ldr	r5, [pc, #112]	@ (80018c8 <Edit_Value_Simple+0x138>)
 8001858:	6828      	ldr	r0, [r5, #0]
 800185a:	f7ff ff85 	bl	8001768 <Align_Right>
				Put_Buff_On_Display(Display1,0);
 800185e:	2100      	movs	r1, #0
 8001860:	6828      	ldr	r0, [r5, #0]
 8001862:	f7fe ff61 	bl	8000728 <Put_Buff_On_Display>
				Tick_Timer++;
 8001866:	4a1f      	ldr	r2, [pc, #124]	@ (80018e4 <Edit_Value_Simple+0x154>)
 8001868:	6813      	ldr	r3, [r2, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	6013      	str	r3, [r2, #0]
		if (((Pressed_BMinus>1)&&(!(Tick_Timer&(0x3FF>>(Pressed_BMinus>>2)))))||(Pressed_BMinus==1))
 800186e:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <Edit_Value_Simple+0x14c>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2a01      	cmp	r2, #1
 8001874:	d907      	bls.n	8001886 <Edit_Value_Simple+0xf6>
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <Edit_Value_Simple+0x154>)
 800187a:	0892      	lsrs	r2, r2, #2
 800187c:	6819      	ldr	r1, [r3, #0]
 800187e:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <Edit_Value_Simple+0x158>)
 8001880:	4113      	asrs	r3, r2
 8001882:	4219      	tst	r1, r3
 8001884:	d003      	beq.n	800188e <Edit_Value_Simple+0xfe>
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <Edit_Value_Simple+0x14c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d199      	bne.n	80017c2 <Edit_Value_Simple+0x32>
				if(Pressed_BMinus==1) Pressed_BMinus=0;
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <Edit_Value_Simple+0x14c>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2a01      	cmp	r2, #1
 8001894:	d101      	bne.n	800189a <Edit_Value_Simple+0x10a>
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
				Aux=((--Aux)<Lowest)?Lowest:Aux;
 800189a:	9b04      	ldr	r3, [sp, #16]
 800189c:	3c01      	subs	r4, #1
 800189e:	429c      	cmp	r4, r3
 80018a0:	da00      	bge.n	80018a4 <Edit_Value_Simple+0x114>
 80018a2:	001c      	movs	r4, r3
				itoa(p_aux,Aux,dot);
 80018a4:	9a01      	ldr	r2, [sp, #4]
 80018a6:	0021      	movs	r1, r4
 80018a8:	6830      	ldr	r0, [r6, #0]
 80018aa:	f7ff f8c1 	bl	8000a30 <itoa>
				Align_Right(Display1);
 80018ae:	4d06      	ldr	r5, [pc, #24]	@ (80018c8 <Edit_Value_Simple+0x138>)
 80018b0:	6828      	ldr	r0, [r5, #0]
 80018b2:	f7ff ff59 	bl	8001768 <Align_Right>
				Put_Buff_On_Display(Display1,0);
 80018b6:	2100      	movs	r1, #0
 80018b8:	6828      	ldr	r0, [r5, #0]
 80018ba:	f7fe ff35 	bl	8000728 <Put_Buff_On_Display>
				Tick_Timer++;
 80018be:	4a09      	ldr	r2, [pc, #36]	@ (80018e4 <Edit_Value_Simple+0x154>)
 80018c0:	6813      	ldr	r3, [r2, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e77c      	b.n	80017c2 <Edit_Value_Simple+0x32>
 80018c8:	200000ac 	.word	0x200000ac
 80018cc:	20000448 	.word	0x20000448
 80018d0:	200004b0 	.word	0x200004b0
 80018d4:	20000464 	.word	0x20000464
 80018d8:	00004e1f 	.word	0x00004e1f
 80018dc:	20000460 	.word	0x20000460
 80018e0:	2000045c 	.word	0x2000045c
 80018e4:	200004d0 	.word	0x200004d0
 80018e8:	000003ff 	.word	0x000003ff

080018ec <Prepare_Boundaries>:
	int32_t Aux=(int32_t)W1209PY.Hysteresis-_100Kelvin;
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <Prepare_Boundaries+0x54>)
 80018ee:	4915      	ldr	r1, [pc, #84]	@ (8001944 <Prepare_Boundaries+0x58>)
 80018f0:	689a      	ldr	r2, [r3, #8]
void Prepare_Boundaries(){
 80018f2:	b510      	push	{r4, lr}
	int32_t Aux=(int32_t)W1209PY.Hysteresis-_100Kelvin;
 80018f4:	1852      	adds	r2, r2, r1
	if(W1209PY.Function!=1) {
 80018f6:	6819      	ldr	r1, [r3, #0]
 80018f8:	0789      	lsls	r1, r1, #30
 80018fa:	0f89      	lsrs	r1, r1, #30
 80018fc:	2901      	cmp	r1, #1
 80018fe:	d013      	beq.n	8001928 <Prepare_Boundaries+0x3c>
		if(Aux>=0){ Turn_On_Temp=(int32_t)W1209PY.Target-Aux; Turn_Off_Temp=W1209PY.Target; } else { Turn_On_Temp=W1209PY.Target; Turn_Off_Temp=(int32_t)W1209PY.Target-Aux; }
 8001900:	4c11      	ldr	r4, [pc, #68]	@ (8001948 <Prepare_Boundaries+0x5c>)
 8001902:	4812      	ldr	r0, [pc, #72]	@ (800194c <Prepare_Boundaries+0x60>)
		if(Aux>=0){ Turn_Off_Temp=(int32_t)W1209PY.Target-Aux; Turn_On_Temp=W1209PY.Target; } else { Turn_Off_Temp=W1209PY.Target; Turn_On_Temp=(int32_t)W1209PY.Target-Aux; }
 8001904:	6859      	ldr	r1, [r3, #4]
 8001906:	2a00      	cmp	r2, #0
 8001908:	db16      	blt.n	8001938 <Prepare_Boundaries+0x4c>
 800190a:	1a8a      	subs	r2, r1, r2
 800190c:	6022      	str	r2, [r4, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	6002      	str	r2, [r0, #0]
	Action_Delay_On=W1209PY.Delay_On*2000;
 8001912:	22fa      	movs	r2, #250	@ 0xfa
 8001914:	6919      	ldr	r1, [r3, #16]
 8001916:	00d2      	lsls	r2, r2, #3
 8001918:	4351      	muls	r1, r2
 800191a:	480d      	ldr	r0, [pc, #52]	@ (8001950 <Prepare_Boundaries+0x64>)
 800191c:	6001      	str	r1, [r0, #0]
	Action_Delay_Off=W1209PY.Delay_Off*2000;
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	435a      	muls	r2, r3
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <Prepare_Boundaries+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
}
 8001926:	bd10      	pop	{r4, pc}
	} else if(W1209PY.Function==1){ 
 8001928:	6819      	ldr	r1, [r3, #0]
 800192a:	0789      	lsls	r1, r1, #30
 800192c:	0f89      	lsrs	r1, r1, #30
 800192e:	2901      	cmp	r1, #1
 8001930:	d1ef      	bne.n	8001912 <Prepare_Boundaries+0x26>
		if(Aux>=0){ Turn_Off_Temp=(int32_t)W1209PY.Target-Aux; Turn_On_Temp=W1209PY.Target; } else { Turn_Off_Temp=W1209PY.Target; Turn_On_Temp=(int32_t)W1209PY.Target-Aux; }
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <Prepare_Boundaries+0x5c>)
 8001934:	4c05      	ldr	r4, [pc, #20]	@ (800194c <Prepare_Boundaries+0x60>)
 8001936:	e7e5      	b.n	8001904 <Prepare_Boundaries+0x18>
 8001938:	6021      	str	r1, [r4, #0]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	1a8a      	subs	r2, r1, r2
 800193e:	e7e7      	b.n	8001910 <Prepare_Boundaries+0x24>
 8001940:	200003b0 	.word	0x200003b0
 8001944:	ffff954d 	.word	0xffff954d
 8001948:	20000470 	.word	0x20000470
 800194c:	2000046c 	.word	0x2000046c
 8001950:	200004c0 	.word	0x200004c0
 8001954:	200004c4 	.word	0x200004c4

08001958 <Calculate_CRC>:
{
 8001958:	b530      	push	{r4, r5, lr}
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 800195a:	2401      	movs	r4, #1
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <Calculate_CRC+0x38>)
 800195e:	689d      	ldr	r5, [r3, #8]
 8001960:	432c      	orrs	r4, r5
 8001962:	609c      	str	r4, [r3, #8]
	for(idx=0;idx<(sizeof(struct Params)>>2);idx++) LL_CRC_FeedData32(CRC,p[idx]);
 8001964:	0004      	movs	r4, r0
 8001966:	3440      	adds	r4, #64	@ 0x40
 8001968:	c820      	ldmia	r0!, {r5}
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
  WRITE_REG(CRCx->DR, InData);
 800196a:	601d      	str	r5, [r3, #0]
 800196c:	42a0      	cmp	r0, r4
 800196e:	d1fb      	bne.n	8001968 <Calculate_CRC+0x10>
 8001970:	000c      	movs	r4, r1
 8001972:	0008      	movs	r0, r1
 8001974:	3434      	adds	r4, #52	@ 0x34
	for(idx=0, p=(uint32_t *)__W1209PY;idx<((sizeof(struct Params2)>>2)-1);idx++) LL_CRC_FeedData32(CRC,p[idx]);
 8001976:	c820      	ldmia	r0!, {r5}
 8001978:	601d      	str	r5, [r3, #0]
 800197a:	4284      	cmp	r4, r0
 800197c:	d1fb      	bne.n	8001976 <Calculate_CRC+0x1e>
	if(Set_CRC) { __W1209PY->Checksum=LL_CRC_ReadData32(CRC); return 0;}
 800197e:	2a00      	cmp	r2, #0
 8001980:	d003      	beq.n	800198a <Calculate_CRC+0x32>
 8001982:	2000      	movs	r0, #0
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
  return (uint32_t)(READ_REG(CRCx->DR));
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	634b      	str	r3, [r1, #52]	@ 0x34
}
 8001988:	bd30      	pop	{r4, r5, pc}
 800198a:	6818      	ldr	r0, [r3, #0]
	else return LL_CRC_ReadData32(CRC);
 800198c:	e7fc      	b.n	8001988 <Calculate_CRC+0x30>
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	40023000 	.word	0x40023000

08001994 <Default_Params>:
void Default_Params(void){
 8001994:	b570      	push	{r4, r5, r6, lr}
	NTC.R_Pullup=R_PULLUP; 				  //R_Pullup is a 10k resistor soldered on board connected to NTC and Vcc, but can be replaced.
 8001996:	4b3e      	ldr	r3, [pc, #248]	@ (8001a90 <Default_Params+0xfc>)
 8001998:	4c3e      	ldr	r4, [pc, #248]	@ (8001a94 <Default_Params+0x100>)
	NTC.Beta_T0K=(NTC.Beta)/NTC.T0K;	 // (Beta*100)/(T0*100) in Q37.26
 800199a:	2500      	movs	r5, #0
	NTC.R_Pullup=R_PULLUP; 				  //R_Pullup is a 10k resistor soldered on board connected to NTC and Vcc, but can be replaced.
 800199c:	6023      	str	r3, [r4, #0]
	NTC.R0=10000;  						//R_0 = 10kOhm.
 800199e:	60e3      	str	r3, [r4, #12]
	NTC.Log_R0=log_q31(NTC.R0);
 80019a0:	68e0      	ldr	r0, [r4, #12]
 80019a2:	f7fe fe17 	bl	80005d4 <log_q31>
	NTC.R1=1087;
 80019a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001a98 <Default_Params+0x104>)
	NTC.Log_R0=log_q31(NTC.R0);
 80019a8:	6120      	str	r0, [r4, #16]
	NTC.R1=1087;
 80019aa:	6163      	str	r3, [r4, #20]
	NTC.Log_R1=log_q31(NTC.R1);
 80019ac:	6960      	ldr	r0, [r4, #20]
 80019ae:	f7fe fe11 	bl	80005d4 <log_q31>
	NTC.Beta=(395000LL)<<26;			 //(Beta*100=3950) in Q37.26
 80019b2:	22e0      	movs	r2, #224	@ 0xe0
	NTC.T0K=From_Celsius(2500);			 //T0*100=25ºC
 80019b4:	4e39      	ldr	r6, [pc, #228]	@ (8001a9c <Default_Params+0x108>)
	NTC.T1K=From_Celsius(8500);			 //T0*100=85ºC
 80019b6:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa0 <Default_Params+0x10c>)
	NTC.Log_R1=log_q31(NTC.R1);
 80019b8:	61a0      	str	r0, [r4, #24]
	NTC.T0K=From_Celsius(2500);			 //T0*100=25ºC
 80019ba:	61e6      	str	r6, [r4, #28]
	NTC.T1K=From_Celsius(8500);			 //T0*100=85ºC
 80019bc:	6223      	str	r3, [r4, #32]
	NTC.Beta=(395000LL)<<26;			 //(Beta*100=3950) in Q37.26
 80019be:	4b39      	ldr	r3, [pc, #228]	@ (8001aa4 <Default_Params+0x110>)
 80019c0:	0612      	lsls	r2, r2, #24
 80019c2:	62a2      	str	r2, [r4, #40]	@ 0x28
 80019c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
	NTC.Beta_T0K=(NTC.Beta)/NTC.T0K;	 // (Beta*100)/(T0*100) in Q37.26
 80019c6:	002b      	movs	r3, r5
 80019c8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80019ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80019cc:	69e2      	ldr	r2, [r4, #28]
 80019ce:	f7fe fd01 	bl	80003d4 <__aeabi_ldivmod>
 80019d2:	0002      	movs	r2, r0
 80019d4:	000b      	movs	r3, r1
 80019d6:	6322      	str	r2, [r4, #48]	@ 0x30
 80019d8:	6363      	str	r3, [r4, #52]	@ 0x34
	W1209PY.Function=0; 				// 0 means heating, 1 means cooling, 2 means window (active inside the window), 3 means window (active outside)
 80019da:	2203      	movs	r2, #3
 80019dc:	4932      	ldr	r1, [pc, #200]	@ (8001aa8 <Default_Params+0x114>)
	NTC.R_Wires=0;
 80019de:	63e5      	str	r5, [r4, #60]	@ 0x3c
	W1209PY.Function=0; 				// 0 means heating, 1 means cooling, 2 means window (active inside the window), 3 means window (active outside)
 80019e0:	680b      	ldr	r3, [r1, #0]
	Calculate_CRC((struct Params *)&NTC,(struct Params2 *)&W1209PY, Set_Checksum);
 80019e2:	0020      	movs	r0, r4
	W1209PY.Function=0; 				// 0 means heating, 1 means cooling, 2 means window (active inside the window), 3 means window (active outside)
 80019e4:	4393      	bics	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
	W1209PY.fahrenheit=0;  				// 0 means Celsius scale.
 80019e8:	680b      	ldr	r3, [r1, #0]
 80019ea:	321d      	adds	r2, #29
 80019ec:	4393      	bics	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
	W1209PY.Temp_Roll=0;				// If this is one, the temperature on main display shows scrolling.
 80019f0:	680b      	ldr	r3, [r1, #0]
 80019f2:	3a1c      	subs	r2, #28
 80019f4:	4393      	bics	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
	W1209PY.Messages=1;					// Display menu messages by default
 80019f8:	2340      	movs	r3, #64	@ 0x40
 80019fa:	680a      	ldr	r2, [r1, #0]
 80019fc:	4313      	orrs	r3, r2
	W1209PY.Delay_Type=0;
 80019fe:	2280      	movs	r2, #128	@ 0x80
	W1209PY.Messages=1;					// Display menu messages by default
 8001a00:	600b      	str	r3, [r1, #0]
	W1209PY.Hysteresis=From_Celsius(0);				// When function is 1 or 2, this is the backlash (or forelash if negative), when function is 3 or 4, this is the window width.
 8001a02:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <Default_Params+0x118>)
 8001a04:	608b      	str	r3, [r1, #8]
	W1209PY.Temp_Offset=From_Celsius(0);
 8001a06:	60cb      	str	r3, [r1, #12]
	W1209PY.Max_TempK100=From_Celsius(11000);
 8001a08:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <Default_Params+0x11c>)
 8001a0a:	618b      	str	r3, [r1, #24]
	W1209PY.Min_TempK100=From_Celsius(-5000);
 8001a0c:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <Default_Params+0x120>)
 8001a0e:	61cb      	str	r3, [r1, #28]
	W1209PY.Delay_On=0;
 8001a10:	610d      	str	r5, [r1, #16]
	W1209PY.Delay_Off=0;
 8001a12:	614d      	str	r5, [r1, #20]
	W1209PY.Delay_Type=0;
 8001a14:	680b      	ldr	r3, [r1, #0]
 8001a16:	4393      	bics	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
	W1209PY.Delay_Ton=0;
 8001a1a:	680b      	ldr	r3, [r1, #0]
 8001a1c:	4a26      	ldr	r2, [pc, #152]	@ (8001ab8 <Default_Params+0x124>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
	W1209PY.Delay_Toff=0;
 8001a22:	680b      	ldr	r3, [r1, #0]
 8001a24:	4a25      	ldr	r2, [pc, #148]	@ (8001abc <Default_Params+0x128>)
 8001a26:	4013      	ands	r3, r2
	W1209PY.Alarm1=W1209PY.Alarm2=0;
 8001a28:	2210      	movs	r2, #16
	W1209PY.Delay_Toff=0;
 8001a2a:	600b      	str	r3, [r1, #0]
	W1209PY.Alarm1=W1209PY.Alarm2=0;
 8001a2c:	680b      	ldr	r3, [r1, #0]
 8001a2e:	4393      	bics	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
 8001a32:	680b      	ldr	r3, [r1, #0]
 8001a34:	3a08      	subs	r2, #8
 8001a36:	4393      	bics	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
	W1209PY.Alarm1_TempK100=W1209PY.Alarm2_TempK100=From_Celsius(3000);
 8001a3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <Default_Params+0x12c>)
 8001a3c:	624b      	str	r3, [r1, #36]	@ 0x24
 8001a3e:	620b      	str	r3, [r1, #32]
	W1209PY.Target=From_Celsius(2500);
 8001a40:	604e      	str	r6, [r1, #4]
	W1209PY.Filter_Depth=8;
 8001a42:	628a      	str	r2, [r1, #40]	@ 0x28
	W1209PY.Timer_Enable=0;
 8001a44:	680b      	ldr	r3, [r1, #0]
 8001a46:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac4 <Default_Params+0x130>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
	W1209PY.TM_Days=W1209PY.TM_Hours=W1209PY.TM_Minutes=W1209PY.TM_Seconds=0;
 8001a4c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8001a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <Default_Params+0x134>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	630b      	str	r3, [r1, #48]	@ 0x30
 8001a54:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8001a56:	4a1d      	ldr	r2, [pc, #116]	@ (8001acc <Default_Params+0x138>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	630b      	str	r3, [r1, #48]	@ 0x30
 8001a5c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad0 <Default_Params+0x13c>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	630b      	str	r3, [r1, #48]	@ 0x30
 8001a64:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
	W1209PY.Language=ENGLISH;
 8001a66:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad4 <Default_Params+0x140>)
	W1209PY.TM_Days=W1209PY.TM_Hours=W1209PY.TM_Minutes=W1209PY.TM_Seconds=0;
 8001a68:	0b1b      	lsrs	r3, r3, #12
 8001a6a:	031b      	lsls	r3, r3, #12
 8001a6c:	630b      	str	r3, [r1, #48]	@ 0x30
	W1209PY.Bits_Extended=0;
 8001a6e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	08db      	lsrs	r3, r3, #3
 8001a74:	630b      	str	r3, [r1, #48]	@ 0x30
	W1209PY.Language=ENGLISH;
 8001a76:	680b      	ldr	r3, [r1, #0]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
	W1209PY.Sound=1;
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	680a      	ldr	r2, [r1, #0]
 8001a80:	01db      	lsls	r3, r3, #7
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]
	Calculate_CRC((struct Params *)&NTC,(struct Params2 *)&W1209PY, Set_Checksum);
 8001a86:	2201      	movs	r2, #1
	W1209PY.ADC_Offset=0;
 8001a88:	62cd      	str	r5, [r1, #44]	@ 0x2c
	Calculate_CRC((struct Params *)&NTC,(struct Params2 *)&W1209PY, Set_Checksum);
 8001a8a:	f7ff ff65 	bl	8001958 <Calculate_CRC>
}
 8001a8e:	bd70      	pop	{r4, r5, r6, pc}
 8001a90:	00002710 	.word	0x00002710
 8001a94:	200003e8 	.word	0x200003e8
 8001a98:	0000043f 	.word	0x0000043f
 8001a9c:	00007477 	.word	0x00007477
 8001aa0:	00008be7 	.word	0x00008be7
 8001aa4:	0000181b 	.word	0x0000181b
 8001aa8:	200003b0 	.word	0x200003b0
 8001aac:	00006ab3 	.word	0x00006ab3
 8001ab0:	000095ab 	.word	0x000095ab
 8001ab4:	0000572b 	.word	0x0000572b
 8001ab8:	fffffeff 	.word	0xfffffeff
 8001abc:	fffffdff 	.word	0xfffffdff
 8001ac0:	0000766b 	.word	0x0000766b
 8001ac4:	fffffbff 	.word	0xfffffbff
 8001ac8:	e07fffff 	.word	0xe07fffff
 8001acc:	ff81ffff 	.word	0xff81ffff
 8001ad0:	fffe0fff 	.word	0xfffe0fff
 8001ad4:	ffffdfff 	.word	0xffffdfff

08001ad8 <Are_Settings_OK>:
uint32_t Are_Settings_OK(uint32_t *p){
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	0004      	movs	r4, r0
	struct Params2 *__W1209PY=(struct Params2 *)(p+1+(sizeof(struct Params)>>2));
 8001adc:	0021      	movs	r1, r4
	if((*p)==0xFFFFFFFF) return PROFILE_EMPTY;
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	2203      	movs	r2, #3
	struct Params *__NTC=(struct Params *)(p+1);
 8001ae2:	3004      	adds	r0, #4
	struct Params2 *__W1209PY=(struct Params2 *)(p+1+(sizeof(struct Params)>>2));
 8001ae4:	3144      	adds	r1, #68	@ 0x44
	if((*p)==0xFFFFFFFF) return PROFILE_EMPTY;
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	d010      	beq.n	8001b0c <Are_Settings_OK+0x34>
	My_Checksum=Calculate_CRC(__NTC,__W1209PY,Get_Checksum);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f7ff ff34 	bl	8001958 <Calculate_CRC>
	if(My_Checksum==__W1209PY->Checksum){ 
 8001af0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
	return PROFILE_BAD;	
 8001af2:	2200      	movs	r2, #0
	if(My_Checksum==__W1209PY->Checksum){ 
 8001af4:	4283      	cmp	r3, r0
 8001af6:	d109      	bne.n	8001b0c <Are_Settings_OK+0x34>
 8001af8:	6823      	ldr	r3, [r4, #0]
			if((*p)==0xDEADBEEF) return PROFILE_ACTIVE;
 8001afa:	4905      	ldr	r1, [pc, #20]	@ (8001b10 <Are_Settings_OK+0x38>)
 8001afc:	3201      	adds	r2, #1
 8001afe:	428b      	cmp	r3, r1
 8001b00:	d004      	beq.n	8001b0c <Are_Settings_OK+0x34>
			if((*p)==0xDEAD0000) return PROFILE_INACTIVE;
 8001b02:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <Are_Settings_OK+0x3c>)
 8001b04:	189b      	adds	r3, r3, r2
 8001b06:	425a      	negs	r2, r3
 8001b08:	4153      	adcs	r3, r2
 8001b0a:	005a      	lsls	r2, r3, #1
}
 8001b0c:	0010      	movs	r0, r2
 8001b0e:	bd10      	pop	{r4, pc}
 8001b10:	deadbeef 	.word	0xdeadbeef
 8001b14:	21530000 	.word	0x21530000

08001b18 <Lookfor_Profiles>:
uint32_t Lookfor_Profiles(){
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t idx, status=0;
 8001b1a:	2600      	movs	r6, #0
		status=1;
 8001b1c:	2701      	movs	r7, #1
	for(idx=0;idx<5;idx++) if((Profile_Statuses[idx]=Are_Settings_OK((uint32_t *)Profiles[idx]))==PROFILE_ACTIVE) {
 8001b1e:	0034      	movs	r4, r6
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <Lookfor_Profiles+0x2c>)
 8001b22:	00a5      	lsls	r5, r4, #2
 8001b24:	5958      	ldr	r0, [r3, r5]
 8001b26:	f7ff ffd7 	bl	8001ad8 <Are_Settings_OK>
 8001b2a:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <Lookfor_Profiles+0x30>)
 8001b2c:	5158      	str	r0, [r3, r5]
 8001b2e:	2801      	cmp	r0, #1
 8001b30:	d102      	bne.n	8001b38 <Lookfor_Profiles+0x20>
		status=1;
 8001b32:	003e      	movs	r6, r7
		Active_Profile=idx;
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <Lookfor_Profiles+0x34>)
 8001b36:	601c      	str	r4, [r3, #0]
	for(idx=0;idx<5;idx++) if((Profile_Statuses[idx]=Are_Settings_OK((uint32_t *)Profiles[idx]))==PROFILE_ACTIVE) {
 8001b38:	3401      	adds	r4, #1
 8001b3a:	2c05      	cmp	r4, #5
 8001b3c:	d1f0      	bne.n	8001b20 <Lookfor_Profiles+0x8>
}
 8001b3e:	0030      	movs	r0, r6
 8001b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	20000094 	.word	0x20000094
 8001b48:	20000080 	.word	0x20000080
 8001b4c:	20000430 	.word	0x20000430

08001b50 <Flash_Config>:
	__IO uint32_t F_TS0=(HSI_24M_EPPARA0)&0x000001FF;
 8001b50:	4a30      	ldr	r2, [pc, #192]	@ (8001c14 <Flash_Config+0xc4>)
void Flash_Config(){
 8001b52:	b08a      	sub	sp, #40	@ 0x28
	__IO uint32_t F_TS0=(HSI_24M_EPPARA0)&0x000001FF;
 8001b54:	6813      	ldr	r3, [r2, #0]
 8001b56:	05db      	lsls	r3, r3, #23
 8001b58:	0ddb      	lsrs	r3, r3, #23
 8001b5a:	9301      	str	r3, [sp, #4]
	__IO uint32_t F_TS3=(HSI_24M_EPPARA0>>9)&0x000001FF;
 8001b5c:	6813      	ldr	r3, [r2, #0]
 8001b5e:	039b      	lsls	r3, r3, #14
 8001b60:	0ddb      	lsrs	r3, r3, #23
 8001b62:	9302      	str	r3, [sp, #8]
	__IO uint32_t F_TS1=(HSI_24M_EPPARA0>>18)&0x000003FF;
 8001b64:	6813      	ldr	r3, [r2, #0]
	__IO uint32_t F_TS2P=(HSI_24M_EPPARA1)&0x000001FF;
 8001b66:	4a2c      	ldr	r2, [pc, #176]	@ (8001c18 <Flash_Config+0xc8>)
	__IO uint32_t F_TS1=(HSI_24M_EPPARA0>>18)&0x000003FF;
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	0d9b      	lsrs	r3, r3, #22
 8001b6c:	9303      	str	r3, [sp, #12]
	__IO uint32_t F_TS2P=(HSI_24M_EPPARA1)&0x000001FF;
 8001b6e:	6813      	ldr	r3, [r2, #0]
 8001b70:	05db      	lsls	r3, r3, #23
 8001b72:	0ddb      	lsrs	r3, r3, #23
 8001b74:	9304      	str	r3, [sp, #16]
	__IO uint32_t F_TPS3=(HSI_24M_EPPARA1>>16)&0x00000FFF;
 8001b76:	6813      	ldr	r3, [r2, #0]
	__IO uint32_t F_PRGTPE=(HSI_24M_EPPARA4)&0x0000FFFF;
 8001b78:	4a28      	ldr	r2, [pc, #160]	@ (8001c1c <Flash_Config+0xcc>)
	__IO uint32_t F_TPS3=(HSI_24M_EPPARA1>>16)&0x00000FFF;
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	0d1b      	lsrs	r3, r3, #20
 8001b7e:	9305      	str	r3, [sp, #20]
	__IO uint32_t F_PERTPE=(HSI_24M_EPPARA2)&0x0003FFFF;
 8001b80:	4b27      	ldr	r3, [pc, #156]	@ (8001c20 <Flash_Config+0xd0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	039b      	lsls	r3, r3, #14
 8001b86:	0b9b      	lsrs	r3, r3, #14
 8001b88:	9306      	str	r3, [sp, #24]
	__IO uint32_t F_SMERTPE=(HSI_24M_EPPARA3)&0x0003FFFF;
 8001b8a:	4b26      	ldr	r3, [pc, #152]	@ (8001c24 <Flash_Config+0xd4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	039b      	lsls	r3, r3, #14
 8001b90:	0b9b      	lsrs	r3, r3, #14
 8001b92:	9307      	str	r3, [sp, #28]
	__IO uint32_t F_PRGTPE=(HSI_24M_EPPARA4)&0x0000FFFF;
 8001b94:	6813      	ldr	r3, [r2, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	9308      	str	r3, [sp, #32]
	__IO uint32_t F_PRETPE=(HSI_24M_EPPARA4>>16)&0x0003FFF;
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	0c9b      	lsrs	r3, r3, #18
 8001ba0:	9309      	str	r3, [sp, #36]	@ 0x24
	if(FLASH->TS0!=F_TS0) FLASH->TS0=F_TS0;
 8001ba2:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <Flash_Config+0xd8>)
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	9a01      	ldr	r2, [sp, #4]
 8001ba8:	4291      	cmp	r1, r2
 8001baa:	d001      	beq.n	8001bb0 <Flash_Config+0x60>
 8001bac:	9a01      	ldr	r2, [sp, #4]
 8001bae:	605a      	str	r2, [r3, #4]
	if(FLASH->TS3!=F_TS3) FLASH->TS3=F_TS3;
 8001bb0:	6959      	ldr	r1, [r3, #20]
 8001bb2:	9a02      	ldr	r2, [sp, #8]
 8001bb4:	4291      	cmp	r1, r2
 8001bb6:	d001      	beq.n	8001bbc <Flash_Config+0x6c>
 8001bb8:	9a02      	ldr	r2, [sp, #8]
 8001bba:	615a      	str	r2, [r3, #20]
	if(FLASH->TS1!=F_TS1) FLASH->TS1=F_TS1;
 8001bbc:	6899      	ldr	r1, [r3, #8]
 8001bbe:	9a03      	ldr	r2, [sp, #12]
 8001bc0:	4291      	cmp	r1, r2
 8001bc2:	d001      	beq.n	8001bc8 <Flash_Config+0x78>
 8001bc4:	9a03      	ldr	r2, [sp, #12]
 8001bc6:	609a      	str	r2, [r3, #8]
	if(FLASH->TS2P!=F_TS2P) FLASH->TS2P=F_TS2P;
 8001bc8:	68d9      	ldr	r1, [r3, #12]
 8001bca:	9a04      	ldr	r2, [sp, #16]
 8001bcc:	4291      	cmp	r1, r2
 8001bce:	d001      	beq.n	8001bd4 <Flash_Config+0x84>
 8001bd0:	9a04      	ldr	r2, [sp, #16]
 8001bd2:	60da      	str	r2, [r3, #12]
	if(FLASH->TPS3!=F_TPS3) FLASH->TPS3=F_TPS3;
 8001bd4:	6919      	ldr	r1, [r3, #16]
 8001bd6:	9a05      	ldr	r2, [sp, #20]
 8001bd8:	4291      	cmp	r1, r2
 8001bda:	d001      	beq.n	8001be0 <Flash_Config+0x90>
 8001bdc:	9a05      	ldr	r2, [sp, #20]
 8001bde:	611a      	str	r2, [r3, #16]
	if(FLASH->PERTPE!=F_PERTPE) FLASH->PERTPE=F_PERTPE;
 8001be0:	6999      	ldr	r1, [r3, #24]
 8001be2:	9a06      	ldr	r2, [sp, #24]
 8001be4:	4291      	cmp	r1, r2
 8001be6:	d001      	beq.n	8001bec <Flash_Config+0x9c>
 8001be8:	9a06      	ldr	r2, [sp, #24]
 8001bea:	619a      	str	r2, [r3, #24]
	if(FLASH->SMERTPE!=F_SMERTPE) FLASH->SMERTPE=F_SMERTPE;
 8001bec:	69d9      	ldr	r1, [r3, #28]
 8001bee:	9a07      	ldr	r2, [sp, #28]
 8001bf0:	4291      	cmp	r1, r2
 8001bf2:	d001      	beq.n	8001bf8 <Flash_Config+0xa8>
 8001bf4:	9a07      	ldr	r2, [sp, #28]
 8001bf6:	61da      	str	r2, [r3, #28]
	if(FLASH->PRGTPE!=F_PRGTPE) FLASH->PRGTPE=F_PRGTPE;
 8001bf8:	6a19      	ldr	r1, [r3, #32]
 8001bfa:	9a08      	ldr	r2, [sp, #32]
 8001bfc:	4291      	cmp	r1, r2
 8001bfe:	d001      	beq.n	8001c04 <Flash_Config+0xb4>
 8001c00:	9a08      	ldr	r2, [sp, #32]
 8001c02:	621a      	str	r2, [r3, #32]
	if(FLASH->PRETPE!=F_PRETPE) FLASH->PRETPE=F_PRETPE;
 8001c04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001c06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c08:	4291      	cmp	r1, r2
 8001c0a:	d001      	beq.n	8001c10 <Flash_Config+0xc0>
 8001c0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c0e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001c10:	b00a      	add	sp, #40	@ 0x28
 8001c12:	4770      	bx	lr
 8001c14:	1fff011c 	.word	0x1fff011c
 8001c18:	1fff0120 	.word	0x1fff0120
 8001c1c:	1fff012c 	.word	0x1fff012c
 8001c20:	1fff0124 	.word	0x1fff0124
 8001c24:	1fff0128 	.word	0x1fff0128
 8001c28:	400220fc 	.word	0x400220fc

08001c2c <Unselect_Profile>:
void Unselect_Profile(uint32_t Profile_Address){
 8001c2c:	b530      	push	{r4, r5, lr}
	if(*((uint32_t *)Profile_Address)==0xFFFFFFFF) return;
 8001c2e:	6803      	ldr	r3, [r0, #0]
void Unselect_Profile(uint32_t Profile_Address){
 8001c30:	0005      	movs	r5, r0
 8001c32:	b0a1      	sub	sp, #132	@ 0x84
	if(*((uint32_t *)Profile_Address)==0xFFFFFFFF) return;
 8001c34:	3301      	adds	r3, #1
 8001c36:	d022      	beq.n	8001c7e <Unselect_Profile+0x52>
	for(idx=1, Profile_Mask[0]=0xdead0000; idx<32 ; idx++) Profile_Mask[idx]=0xFFFFFFFF; 
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <Unselect_Profile+0x58>)
 8001c3a:	227c      	movs	r2, #124	@ 0x7c
 8001c3c:	21ff      	movs	r1, #255	@ 0xff
 8001c3e:	a801      	add	r0, sp, #4
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	f7fe fc69 	bl	8000518 <memset>
	LL_FLASH_Unlock();
 8001c46:	f002 ff0b 	bl	8004a60 <LL_FLASH_Unlock>
	if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == SUCCESS) 	if(FLASH_Program_Page(Profile_Address, Profile_Mask)== ERROR) MsgBox((unsigned char *)MsgStr[74],0,1);
 8001c4a:	20fa      	movs	r0, #250	@ 0xfa
 8001c4c:	0080      	lsls	r0, r0, #2
 8001c4e:	f002 ff51 	bl	8004af4 <FLASH_WaitForLastOperation>
 8001c52:	1e04      	subs	r4, r0, #0
 8001c54:	d10d      	bne.n	8001c72 <Unselect_Profile+0x46>
 8001c56:	4669      	mov	r1, sp
 8001c58:	0028      	movs	r0, r5
 8001c5a:	f7fe fceb 	bl	8000634 <FLASH_Program_Page>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	2801      	cmp	r0, #1
 8001c62:	d106      	bne.n	8001c72 <Unselect_Profile+0x46>
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <Unselect_Profile+0x5c>)
 8001c66:	0021      	movs	r1, r4
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	33fc      	adds	r3, #252	@ 0xfc
 8001c6c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c6e:	f7ff f96d 	bl	8000f4c <MsgBox>
	FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c72:	20fa      	movs	r0, #250	@ 0xfa
 8001c74:	0080      	lsls	r0, r0, #2
 8001c76:	f002 ff3d 	bl	8004af4 <FLASH_WaitForLastOperation>
	LL_FLASH_Lock();	
 8001c7a:	f002 ff03 	bl	8004a84 <LL_FLASH_Lock>
}
 8001c7e:	b021      	add	sp, #132	@ 0x84
 8001c80:	bd30      	pop	{r4, r5, pc}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	dead0000 	.word	0xdead0000
 8001c88:	200004d4 	.word	0x200004d4

08001c8c <Save_Context>:
	while((FLASH->SR)&FLASH_SR_BSY);
 8001c8c:	2380      	movs	r3, #128	@ 0x80
void Save_Context(uint32_t Profile_Address){
 8001c8e:	b530      	push	{r4, r5, lr}
 8001c90:	0004      	movs	r4, r0
	while((FLASH->SR)&FLASH_SR_BSY);
 8001c92:	492a      	ldr	r1, [pc, #168]	@ (8001d3c <Save_Context+0xb0>)
void Save_Context(uint32_t Profile_Address){
 8001c94:	b0a1      	sub	sp, #132	@ 0x84
	while((FLASH->SR)&FLASH_SR_BSY);
 8001c96:	025b      	lsls	r3, r3, #9
 8001c98:	690a      	ldr	r2, [r1, #16]
 8001c9a:	0015      	movs	r5, r2
 8001c9c:	401d      	ands	r5, r3
 8001c9e:	421a      	tst	r2, r3
 8001ca0:	d1fa      	bne.n	8001c98 <Save_Context+0xc>
	LL_FLASH_Unlock();
 8001ca2:	f002 fedd 	bl	8004a60 <LL_FLASH_Unlock>
	for(idx=0;idx<32;idx++) Params_Buffer[idx]=0;
 8001ca6:	2280      	movs	r2, #128	@ 0x80
 8001ca8:	0029      	movs	r1, r5
 8001caa:	4668      	mov	r0, sp
 8001cac:	f7fe fc34 	bl	8000518 <memset>
	for(idx=0;idx<(sizeof(struct Params)>>2);idx++) Params_Buffer[idx+1]=p[idx];
 8001cb0:	2240      	movs	r2, #64	@ 0x40
 8001cb2:	4923      	ldr	r1, [pc, #140]	@ (8001d40 <Save_Context+0xb4>)
 8001cb4:	a801      	add	r0, sp, #4
 8001cb6:	f003 f985 	bl	8004fc4 <memcpy>
	for(idx=0, p=(uint32_t *)&W1209PY;idx<(sizeof(struct Params2)>>2);idx++) Params_Buffer[idx+1+(sizeof(struct Params)>>2)]=p[idx];
 8001cba:	2238      	movs	r2, #56	@ 0x38
 8001cbc:	4921      	ldr	r1, [pc, #132]	@ (8001d44 <Save_Context+0xb8>)
 8001cbe:	a811      	add	r0, sp, #68	@ 0x44
 8001cc0:	f003 f980 	bl	8004fc4 <memcpy>
	Calculate_CRC((struct Params *)(&Params_Buffer[1]),(struct Params2 *)&Params_Buffer[1+(sizeof(struct Params)>>2)],Set_Checksum);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	a911      	add	r1, sp, #68	@ 0x44
 8001cc8:	a801      	add	r0, sp, #4
 8001cca:	f7ff fe45 	bl	8001958 <Calculate_CRC>
	if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == SUCCESS)   FLASH_PageErase(Profile_Address); 
 8001cce:	20fa      	movs	r0, #250	@ 0xfa
	Params_Buffer[0]=0xdeadbeef;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <Save_Context+0xbc>)
	if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == SUCCESS)   FLASH_PageErase(Profile_Address); 
 8001cd2:	0080      	lsls	r0, r0, #2
	Params_Buffer[0]=0xdeadbeef;
 8001cd4:	9300      	str	r3, [sp, #0]
	if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == SUCCESS)   FLASH_PageErase(Profile_Address); 
 8001cd6:	f002 ff0d 	bl	8004af4 <FLASH_WaitForLastOperation>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d102      	bne.n	8001ce4 <Save_Context+0x58>
 8001cde:	0020      	movs	r0, r4
 8001ce0:	f7fe fcee 	bl	80006c0 <FLASH_PageErase>
	for(idx=0;(idx<32)&&(sp[idx]==0xFFFFFFFF);idx++);
 8001ce4:	00ab      	lsls	r3, r5, #2
 8001ce6:	591b      	ldr	r3, [r3, r4]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	d008      	beq.n	8001cfe <Save_Context+0x72>
				MsgBox((unsigned char *)MsgStr[74],0,1);
 8001cec:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <Save_Context+0xc0>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	33fc      	adds	r3, #252	@ 0xfc
 8001cf6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001cf8:	f7ff f928 	bl	8000f4c <MsgBox>
 8001cfc:	e01a      	b.n	8001d34 <Save_Context+0xa8>
	for(idx=0;(idx<32)&&(sp[idx]==0xFFFFFFFF);idx++);
 8001cfe:	3501      	adds	r5, #1
 8001d00:	2d20      	cmp	r5, #32
 8001d02:	d1ef      	bne.n	8001ce4 <Save_Context+0x58>
	if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == SUCCESS)	if(FLASH_Program_Page(Profile_Address,Params_Buffer)== ERROR) MsgBox((unsigned char *)MsgStr[74],0,1);
 8001d04:	20fa      	movs	r0, #250	@ 0xfa
 8001d06:	0080      	lsls	r0, r0, #2
 8001d08:	f002 fef4 	bl	8004af4 <FLASH_WaitForLastOperation>
 8001d0c:	1e05      	subs	r5, r0, #0
 8001d0e:	d10d      	bne.n	8001d2c <Save_Context+0xa0>
 8001d10:	4669      	mov	r1, sp
 8001d12:	0020      	movs	r0, r4
 8001d14:	f7fe fc8e 	bl	8000634 <FLASH_Program_Page>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	2801      	cmp	r0, #1
 8001d1c:	d106      	bne.n	8001d2c <Save_Context+0xa0>
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <Save_Context+0xc0>)
 8001d20:	0029      	movs	r1, r5
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	33fc      	adds	r3, #252	@ 0xfc
 8001d26:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001d28:	f7ff f910 	bl	8000f4c <MsgBox>
	FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d2c:	20fa      	movs	r0, #250	@ 0xfa
 8001d2e:	0080      	lsls	r0, r0, #2
 8001d30:	f002 fee0 	bl	8004af4 <FLASH_WaitForLastOperation>
				LL_FLASH_Lock();
 8001d34:	f002 fea6 	bl	8004a84 <LL_FLASH_Lock>
}
 8001d38:	b021      	add	sp, #132	@ 0x84
 8001d3a:	bd30      	pop	{r4, r5, pc}
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	200003e8 	.word	0x200003e8
 8001d44:	200003b0 	.word	0x200003b0
 8001d48:	deadbeef 	.word	0xdeadbeef
 8001d4c:	200004d4 	.word	0x200004d4

08001d50 <Load_Context>:
	uint32_t idx, *p=(uint32_t *)&NTC, *Stored_Params=(uint32_t *)Profiles[Active_Profile];
 8001d50:	4a10      	ldr	r2, [pc, #64]	@ (8001d94 <Load_Context+0x44>)
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <Load_Context+0x48>)
 8001d54:	6812      	ldr	r2, [r2, #0]
void Load_Context(){
 8001d56:	b570      	push	{r4, r5, r6, lr}
	uint32_t idx, *p=(uint32_t *)&NTC, *Stored_Params=(uint32_t *)Profiles[Active_Profile];
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	58d3      	ldr	r3, [r2, r3]
	for(idx=0;idx<(sizeof(struct Params)>>2);idx++) p[idx]=Stored_Params[idx+1];
 8001d5c:	4c0f      	ldr	r4, [pc, #60]	@ (8001d9c <Load_Context+0x4c>)
 8001d5e:	001a      	movs	r2, r3
 8001d60:	0020      	movs	r0, r4
 8001d62:	1d19      	adds	r1, r3, #4
 8001d64:	3244      	adds	r2, #68	@ 0x44
 8001d66:	c920      	ldmia	r1!, {r5}
 8001d68:	c420      	stmia	r4!, {r5}
 8001d6a:	4291      	cmp	r1, r2
 8001d6c:	d1fb      	bne.n	8001d66 <Load_Context+0x16>
 8001d6e:	490c      	ldr	r1, [pc, #48]	@ (8001da0 <Load_Context+0x50>)
 8001d70:	337c      	adds	r3, #124	@ 0x7c
 8001d72:	000c      	movs	r4, r1
	for(idx=0, p=(uint32_t *)&W1209PY;idx<(sizeof(struct Params2)>>2);idx++) p[idx]=Stored_Params[idx+1+(sizeof(struct Params)>>2)];
 8001d74:	ca20      	ldmia	r2!, {r5}
 8001d76:	c120      	stmia	r1!, {r5}
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d1fb      	bne.n	8001d74 <Load_Context+0x24>
	Calculate_CRC((struct Params *)&NTC,(struct Params2 *)&W1209PY,Set_Checksum);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	0021      	movs	r1, r4
 8001d80:	f7ff fdea 	bl	8001958 <Calculate_CRC>
	MsgStr=W1209PY.Language?(unsigned char **)MsgStrSp:(unsigned char **)MsgStrEn;
 8001d84:	6822      	ldr	r2, [r4, #0]
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <Load_Context+0x54>)
 8001d88:	0492      	lsls	r2, r2, #18
 8001d8a:	d500      	bpl.n	8001d8e <Load_Context+0x3e>
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <Load_Context+0x58>)
 8001d8e:	4a07      	ldr	r2, [pc, #28]	@ (8001dac <Load_Context+0x5c>)
 8001d90:	6013      	str	r3, [r2, #0]
}
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	20000430 	.word	0x20000430
 8001d98:	20000094 	.word	0x20000094
 8001d9c:	200003e8 	.word	0x200003e8
 8001da0:	200003b0 	.word	0x200003b0
 8001da4:	2000023c 	.word	0x2000023c
 8001da8:	200000f4 	.word	0x200000f4
 8001dac:	200004d4 	.word	0x200004d4

08001db0 <Erase_Profiles>:
{
 8001db0:	b570      	push	{r4, r5, r6, lr}
	for(uint32_t idx=0;idx<5;idx++) if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == SUCCESS)   FLASH_PageErase(Profiles[idx]);
 8001db2:	25fa      	movs	r5, #250	@ 0xfa
	LL_FLASH_Unlock();
 8001db4:	f002 fe54 	bl	8004a60 <LL_FLASH_Unlock>
	for(uint32_t idx=0;idx<5;idx++) if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == SUCCESS)   FLASH_PageErase(Profiles[idx]);
 8001db8:	2400      	movs	r4, #0
 8001dba:	00ad      	lsls	r5, r5, #2
 8001dbc:	0028      	movs	r0, r5
 8001dbe:	f002 fe99 	bl	8004af4 <FLASH_WaitForLastOperation>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	d104      	bne.n	8001dd0 <Erase_Profiles+0x20>
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001df8 <Erase_Profiles+0x48>)
 8001dc8:	00a3      	lsls	r3, r4, #2
 8001dca:	58d0      	ldr	r0, [r2, r3]
 8001dcc:	f7fe fc78 	bl	80006c0 <FLASH_PageErase>
 8001dd0:	3401      	adds	r4, #1
 8001dd2:	2c05      	cmp	r4, #5
 8001dd4:	d1f2      	bne.n	8001dbc <Erase_Profiles+0xc>
	FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dd6:	20fa      	movs	r0, #250	@ 0xfa
 8001dd8:	0080      	lsls	r0, r0, #2
 8001dda:	f002 fe8b 	bl	8004af4 <FLASH_WaitForLastOperation>
	LL_FLASH_Lock();
 8001dde:	f002 fe51 	bl	8004a84 <LL_FLASH_Lock>
	Active_Profile=1;
 8001de2:	2201      	movs	r2, #1
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <Erase_Profiles+0x4c>)
 8001de6:	601a      	str	r2, [r3, #0]
	for(uint32_t idx=0;idx<5;idx++) Profile_Statuses[idx]=3;
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <Erase_Profiles+0x50>)
 8001dea:	3202      	adds	r2, #2
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
 8001df4:	611a      	str	r2, [r3, #16]
}
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
 8001df8:	20000094 	.word	0x20000094
 8001dfc:	20000430 	.word	0x20000430
 8001e00:	20000080 	.word	0x20000080

08001e04 <Are_Settings_Changed>:
	uint32_t idx, *Stored_Params=(uint32_t *)Profiles[Active_Profile];
 8001e04:	4a77      	ldr	r2, [pc, #476]	@ (8001fe4 <Are_Settings_Changed+0x1e0>)
 8001e06:	4b78      	ldr	r3, [pc, #480]	@ (8001fe8 <Are_Settings_Changed+0x1e4>)
 8001e08:	6812      	ldr	r2, [r2, #0]
uint32_t Are_Settings_Changed(){
 8001e0a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t idx, *Stored_Params=(uint32_t *)Profiles[Active_Profile];
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	58d1      	ldr	r1, [r2, r3]
	for(idx=1;idx<32;idx++) Params_Buffer[idx]=Stored_Params[idx];
 8001e10:	4b76      	ldr	r3, [pc, #472]	@ (8001fec <Are_Settings_Changed+0x1e8>)
 8001e12:	0008      	movs	r0, r1
 8001e14:	1d0a      	adds	r2, r1, #4
 8001e16:	3080      	adds	r0, #128	@ 0x80
 8001e18:	1a59      	subs	r1, r3, r1
 8001e1a:	6814      	ldr	r4, [r2, #0]
 8001e1c:	508c      	str	r4, [r1, r2]
 8001e1e:	3204      	adds	r2, #4
 8001e20:	4282      	cmp	r2, r0
 8001e22:	d1fa      	bne.n	8001e1a <Are_Settings_Changed+0x16>
	if(__NTC->R_Pullup!=NTC.R_Pullup) return 1;
 8001e24:	4a72      	ldr	r2, [pc, #456]	@ (8001ff0 <Are_Settings_Changed+0x1ec>)
 8001e26:	685c      	ldr	r4, [r3, #4]
 8001e28:	6811      	ldr	r1, [r2, #0]
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	428c      	cmp	r4, r1
 8001e2e:	d000      	beq.n	8001e32 <Are_Settings_Changed+0x2e>
 8001e30:	e0d4      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__NTC->R0!=NTC.R0) return 1;
 8001e32:	68d1      	ldr	r1, [r2, #12]
 8001e34:	691c      	ldr	r4, [r3, #16]
 8001e36:	428c      	cmp	r4, r1
 8001e38:	d000      	beq.n	8001e3c <Are_Settings_Changed+0x38>
 8001e3a:	e0cf      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__NTC->R1!=NTC.R1) return 1;
 8001e3c:	6951      	ldr	r1, [r2, #20]
 8001e3e:	699c      	ldr	r4, [r3, #24]
 8001e40:	428c      	cmp	r4, r1
 8001e42:	d000      	beq.n	8001e46 <Are_Settings_Changed+0x42>
 8001e44:	e0ca      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__NTC->Log_R0!=NTC.Log_R0) return 1;
 8001e46:	6911      	ldr	r1, [r2, #16]
 8001e48:	695c      	ldr	r4, [r3, #20]
 8001e4a:	428c      	cmp	r4, r1
 8001e4c:	d000      	beq.n	8001e50 <Are_Settings_Changed+0x4c>
 8001e4e:	e0c5      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__NTC->Log_R1!=NTC.Log_R1) return 1;
 8001e50:	6991      	ldr	r1, [r2, #24]
 8001e52:	69dc      	ldr	r4, [r3, #28]
 8001e54:	428c      	cmp	r4, r1
 8001e56:	d000      	beq.n	8001e5a <Are_Settings_Changed+0x56>
 8001e58:	e0c0      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__NTC->T0K!=NTC.T0K) return 1;
 8001e5a:	69d1      	ldr	r1, [r2, #28]
 8001e5c:	6a1c      	ldr	r4, [r3, #32]
 8001e5e:	428c      	cmp	r4, r1
 8001e60:	d000      	beq.n	8001e64 <Are_Settings_Changed+0x60>
 8001e62:	e0bb      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__NTC->T1K!=NTC.T1K) return 1;
 8001e64:	6a11      	ldr	r1, [r2, #32]
 8001e66:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001e68:	428c      	cmp	r4, r1
 8001e6a:	d000      	beq.n	8001e6e <Are_Settings_Changed+0x6a>
 8001e6c:	e0b6      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__NTC->Beta!=NTC.Beta) return 1;
 8001e6e:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8001e70:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e72:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8001e74:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8001e76:	4285      	cmp	r5, r0
 8001e78:	d000      	beq.n	8001e7c <Are_Settings_Changed+0x78>
 8001e7a:	e0b0      	b.n	8001fde <Are_Settings_Changed+0x1da>
 8001e7c:	428c      	cmp	r4, r1
 8001e7e:	d000      	beq.n	8001e82 <Are_Settings_Changed+0x7e>
 8001e80:	e0ad      	b.n	8001fde <Are_Settings_Changed+0x1da>
	if(__NTC->Beta_T0K!=NTC.Beta_T0K) return 1;
 8001e82:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8001e84:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001e86:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8001e88:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001e8a:	4285      	cmp	r5, r0
 8001e8c:	d000      	beq.n	8001e90 <Are_Settings_Changed+0x8c>
 8001e8e:	e0a6      	b.n	8001fde <Are_Settings_Changed+0x1da>
 8001e90:	428c      	cmp	r4, r1
 8001e92:	d000      	beq.n	8001e96 <Are_Settings_Changed+0x92>
 8001e94:	e0a3      	b.n	8001fde <Are_Settings_Changed+0x1da>
	if(__NTC->R_Wires!=NTC.R_Wires) return 1;
 8001e96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e98:	6c19      	ldr	r1, [r3, #64]	@ 0x40
	if(__NTC->R_Pullup!=NTC.R_Pullup) return 1;
 8001e9a:	2001      	movs	r0, #1
	if(__NTC->R_Wires!=NTC.R_Wires) return 1;
 8001e9c:	4291      	cmp	r1, r2
 8001e9e:	d000      	beq.n	8001ea2 <Are_Settings_Changed+0x9e>
 8001ea0:	e09c      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Function!=W1209PY.Function) return 1;
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	4a53      	ldr	r2, [pc, #332]	@ (8001ff4 <Are_Settings_Changed+0x1f0>)
 8001ea6:	3144      	adds	r1, #68	@ 0x44
 8001ea8:	6814      	ldr	r4, [r2, #0]
 8001eaa:	7809      	ldrb	r1, [r1, #0]
 8001eac:	07a4      	lsls	r4, r4, #30
 8001eae:	078d      	lsls	r5, r1, #30
 8001eb0:	42a5      	cmp	r5, r4
 8001eb2:	d000      	beq.n	8001eb6 <Are_Settings_Changed+0xb2>
 8001eb4:	e092      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Temp_Roll!=W1209PY.Temp_Roll) return 1;
 8001eb6:	6814      	ldr	r4, [r2, #0]
 8001eb8:	074d      	lsls	r5, r1, #29
 8001eba:	0764      	lsls	r4, r4, #29
 8001ebc:	0fe4      	lsrs	r4, r4, #31
 8001ebe:	0fed      	lsrs	r5, r5, #31
 8001ec0:	42a5      	cmp	r5, r4
 8001ec2:	d000      	beq.n	8001ec6 <Are_Settings_Changed+0xc2>
 8001ec4:	e08a      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Alarm1!=W1209PY.Alarm1) return 1;
 8001ec6:	6814      	ldr	r4, [r2, #0]
 8001ec8:	070d      	lsls	r5, r1, #28
 8001eca:	0724      	lsls	r4, r4, #28
 8001ecc:	0fe4      	lsrs	r4, r4, #31
 8001ece:	0fed      	lsrs	r5, r5, #31
 8001ed0:	42a5      	cmp	r5, r4
 8001ed2:	d000      	beq.n	8001ed6 <Are_Settings_Changed+0xd2>
 8001ed4:	e082      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Alarm2!=W1209PY.Alarm2) return 1;
 8001ed6:	6814      	ldr	r4, [r2, #0]
 8001ed8:	06cd      	lsls	r5, r1, #27
 8001eda:	06e4      	lsls	r4, r4, #27
 8001edc:	0fe4      	lsrs	r4, r4, #31
 8001ede:	0fed      	lsrs	r5, r5, #31
 8001ee0:	42a5      	cmp	r5, r4
 8001ee2:	d17b      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Alarm1_TempK100!=W1209PY.Alarm1_TempK100) return 1;
 8001ee4:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8001ee6:	6a14      	ldr	r4, [r2, #32]
 8001ee8:	42a5      	cmp	r5, r4
 8001eea:	d177      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Alarm2_TempK100!=W1209PY.Alarm2_TempK100) return 1;
 8001eec:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
 8001eee:	6a56      	ldr	r6, [r2, #36]	@ 0x24
 8001ef0:	42b4      	cmp	r4, r6
 8001ef2:	d173      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->fahrenheit!=W1209PY.fahrenheit) return 1;
 8001ef4:	6816      	ldr	r6, [r2, #0]
 8001ef6:	0689      	lsls	r1, r1, #26
 8001ef8:	06b6      	lsls	r6, r6, #26
 8001efa:	0ff6      	lsrs	r6, r6, #31
 8001efc:	0fc9      	lsrs	r1, r1, #31
 8001efe:	42b1      	cmp	r1, r6
 8001f00:	d16c      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Messages!=W1209PY.Messages) return 1;
 8001f02:	0018      	movs	r0, r3
 8001f04:	3044      	adds	r0, #68	@ 0x44
 8001f06:	7806      	ldrb	r6, [r0, #0]
 8001f08:	6811      	ldr	r1, [r2, #0]
 8001f0a:	0677      	lsls	r7, r6, #25
 8001f0c:	0649      	lsls	r1, r1, #25
	if(__NTC->R_Pullup!=NTC.R_Pullup) return 1;
 8001f0e:	2001      	movs	r0, #1
	if(__W1209PY->Messages!=W1209PY.Messages) return 1;
 8001f10:	0fc9      	lsrs	r1, r1, #31
 8001f12:	0fff      	lsrs	r7, r7, #31
 8001f14:	428f      	cmp	r7, r1
 8001f16:	d161      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Delay_Type!=W1209PY.Delay_Type) return 1;
 8001f18:	6811      	ldr	r1, [r2, #0]
 8001f1a:	09f6      	lsrs	r6, r6, #7
 8001f1c:	0609      	lsls	r1, r1, #24
 8001f1e:	0fc9      	lsrs	r1, r1, #31
 8001f20:	428e      	cmp	r6, r1
 8001f22:	d15b      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Delay_Toff!=W1209PY.Delay_Toff) return 1;
 8001f24:	0019      	movs	r1, r3
 8001f26:	3145      	adds	r1, #69	@ 0x45
 8001f28:	6816      	ldr	r6, [r2, #0]
 8001f2a:	7809      	ldrb	r1, [r1, #0]
 8001f2c:	05b6      	lsls	r6, r6, #22
 8001f2e:	078f      	lsls	r7, r1, #30
 8001f30:	0ff6      	lsrs	r6, r6, #31
 8001f32:	0fff      	lsrs	r7, r7, #31
 8001f34:	42b7      	cmp	r7, r6
 8001f36:	d151      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Delay_Ton!=W1209PY.Delay_Ton) return 1;
 8001f38:	6816      	ldr	r6, [r2, #0]
 8001f3a:	07cf      	lsls	r7, r1, #31
 8001f3c:	05f6      	lsls	r6, r6, #23
 8001f3e:	0ff6      	lsrs	r6, r6, #31
 8001f40:	0fff      	lsrs	r7, r7, #31
 8001f42:	42b7      	cmp	r7, r6
 8001f44:	d14a      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Timer_Enable!=W1209PY.Timer_Enable) return 1;
 8001f46:	6816      	ldr	r6, [r2, #0]
 8001f48:	0749      	lsls	r1, r1, #29
 8001f4a:	0576      	lsls	r6, r6, #21
 8001f4c:	0ff6      	lsrs	r6, r6, #31
 8001f4e:	0fc9      	lsrs	r1, r1, #31
 8001f50:	42b1      	cmp	r1, r6
 8001f52:	d143      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Target!=W1209PY.Target) return 1;
 8001f54:	6851      	ldr	r1, [r2, #4]
 8001f56:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
 8001f58:	428e      	cmp	r6, r1
 8001f5a:	d13f      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Hysteresis!=W1209PY.Hysteresis) return 1;
 8001f5c:	6891      	ldr	r1, [r2, #8]
 8001f5e:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8001f60:	428e      	cmp	r6, r1
 8001f62:	d13b      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Temp_Offset!=W1209PY.Temp_Offset) return 1;
 8001f64:	68d1      	ldr	r1, [r2, #12]
 8001f66:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
 8001f68:	428e      	cmp	r6, r1
 8001f6a:	d137      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Delay_On!=W1209PY.Delay_On) return 1;
 8001f6c:	6911      	ldr	r1, [r2, #16]
 8001f6e:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 8001f70:	428e      	cmp	r6, r1
 8001f72:	d133      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Delay_Off!=W1209PY.Delay_Off) return 1;
 8001f74:	6951      	ldr	r1, [r2, #20]
 8001f76:	6d9e      	ldr	r6, [r3, #88]	@ 0x58
 8001f78:	428e      	cmp	r6, r1
 8001f7a:	d12f      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Max_TempK100!=W1209PY.Max_TempK100) return 1;
 8001f7c:	6991      	ldr	r1, [r2, #24]
 8001f7e:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 8001f80:	428e      	cmp	r6, r1
 8001f82:	d12b      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Min_TempK100!=W1209PY.Min_TempK100) return 1;
 8001f84:	69d1      	ldr	r1, [r2, #28]
 8001f86:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8001f88:	428e      	cmp	r6, r1
 8001f8a:	d127      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Alarm1_TempK100!=W1209PY.Alarm1_TempK100) return 1;
 8001f8c:	6a11      	ldr	r1, [r2, #32]
 8001f8e:	428d      	cmp	r5, r1
 8001f90:	d124      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Alarm2_TempK100!=W1209PY.Alarm2_TempK100) return 1;
 8001f92:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f94:	428c      	cmp	r4, r1
 8001f96:	d121      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Filter_Depth!=W1209PY.Filter_Depth) return 1;
 8001f98:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001f9a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
 8001f9c:	428c      	cmp	r4, r1
 8001f9e:	d11d      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Bits_Extended!=W1209PY.Bits_Extended) return 1;
 8001fa0:	001c      	movs	r4, r3
 8001fa2:	3477      	adds	r4, #119	@ 0x77
 8001fa4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001fa6:	7824      	ldrb	r4, [r4, #0]
 8001fa8:	0f49      	lsrs	r1, r1, #29
 8001faa:	0964      	lsrs	r4, r4, #5
 8001fac:	428c      	cmp	r4, r1
 8001fae:	d115      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Language!=W1209PY.Language) return 1;
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	3145      	adds	r1, #69	@ 0x45
 8001fb4:	6814      	ldr	r4, [r2, #0]
 8001fb6:	7809      	ldrb	r1, [r1, #0]
 8001fb8:	04a4      	lsls	r4, r4, #18
 8001fba:	068d      	lsls	r5, r1, #26
 8001fbc:	0fe4      	lsrs	r4, r4, #31
 8001fbe:	0fed      	lsrs	r5, r5, #31
 8001fc0:	42a5      	cmp	r5, r4
 8001fc2:	d10b      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->Sound!=W1209PY.Sound) return 1;
 8001fc4:	6814      	ldr	r4, [r2, #0]
 8001fc6:	0649      	lsls	r1, r1, #25
 8001fc8:	0464      	lsls	r4, r4, #17
 8001fca:	0fe4      	lsrs	r4, r4, #31
 8001fcc:	0fc9      	lsrs	r1, r1, #31
 8001fce:	42a1      	cmp	r1, r4
 8001fd0:	d104      	bne.n	8001fdc <Are_Settings_Changed+0x1d8>
	if(__W1209PY->ADC_Offset!=W1209PY.ADC_Offset) return 1;
 8001fd2:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8001fd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fd6:	1a80      	subs	r0, r0, r2
 8001fd8:	1e43      	subs	r3, r0, #1
 8001fda:	4198      	sbcs	r0, r3
}
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(__NTC->R_Pullup!=NTC.R_Pullup) return 1;
 8001fde:	2001      	movs	r0, #1
 8001fe0:	e7fc      	b.n	8001fdc <Are_Settings_Changed+0x1d8>
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	20000430 	.word	0x20000430
 8001fe8:	20000094 	.word	0x20000094
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	200003e8 	.word	0x200003e8
 8001ff4:	200003b0 	.word	0x200003b0

08001ff8 <main>:
{
 8001ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffa:	b08d      	sub	sp, #52	@ 0x34
  Default_Params(); 
 8001ffc:	f7ff fcca 	bl	8001994 <Default_Params>
  Prepare_Boundaries();
 8002000:	f7ff fc74 	bl	80018ec <Prepare_Boundaries>
  Flash_Config();
 8002004:	f7ff fda4 	bl	8001b50 <Flash_Config>
  MsgStr=(unsigned char **)MsgStrEn;
 8002008:	4b88      	ldr	r3, [pc, #544]	@ (800222c <main+0x234>)
 800200a:	4a89      	ldr	r2, [pc, #548]	@ (8002230 <main+0x238>)
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800200c:	4d89      	ldr	r5, [pc, #548]	@ (8002234 <main+0x23c>)
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	682a      	ldr	r2, [r5, #0]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4313      	orrs	r3, r2
 8002018:	602b      	str	r3, [r5, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	682a      	ldr	r2, [r5, #0]
 8002020:	421a      	tst	r2, r3
 8002022:	d0fc      	beq.n	800201e <main+0x26>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002024:	68ab      	ldr	r3, [r5, #8]
 8002026:	4a84      	ldr	r2, [pc, #528]	@ (8002238 <main+0x240>)
 8002028:	4013      	ands	r3, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800202a:	2207      	movs	r2, #7
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800202c:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800202e:	68ab      	ldr	r3, [r5, #8]
 8002030:	4393      	bics	r3, r2
 8002032:	60ab      	str	r3, [r5, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002034:	2338      	movs	r3, #56	@ 0x38
 8002036:	68aa      	ldr	r2, [r5, #8]
 8002038:	0011      	movs	r1, r2
 800203a:	4019      	ands	r1, r3
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSISYS)
 800203c:	421a      	tst	r2, r3
 800203e:	d1fa      	bne.n	8002036 <main+0x3e>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002040:	20c0      	movs	r0, #192	@ 0xc0
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8002042:	68ab      	ldr	r3, [r5, #8]
 8002044:	4a7d      	ldr	r2, [pc, #500]	@ (800223c <main+0x244>)
 8002046:	4c7e      	ldr	r4, [pc, #504]	@ (8002240 <main+0x248>)
 8002048:	4013      	ands	r3, r2
 800204a:	60ab      	str	r3, [r5, #8]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204c:	4a7d      	ldr	r2, [pc, #500]	@ (8002244 <main+0x24c>)
 800204e:	4b7e      	ldr	r3, [pc, #504]	@ (8002248 <main+0x250>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002050:	0600      	lsls	r0, r0, #24
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002052:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002054:	6a23      	ldr	r3, [r4, #32]
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	4303      	orrs	r3, r0
 800205c:	6223      	str	r3, [r4, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002060:	6091      	str	r1, [r2, #8]
  LL_SetSystemCoreClock(24000000);
 8002062:	487a      	ldr	r0, [pc, #488]	@ (800224c <main+0x254>)
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	f002 fe13 	bl	8004c90 <LL_SetSystemCoreClock>
  SET_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN); //Enable CRC peripheral
 800206a:	2280      	movs	r2, #128	@ 0x80
 800206c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800206e:	0152      	lsls	r2, r2, #5
 8002070:	4313      	orrs	r3, r2
  if (READ_BIT(FLASH->OPTR, OB_USER_SWD_NRST_MODE) != OB_SWD_PC0_GPIO_PB6)
 8002072:	22c0      	movs	r2, #192	@ 0xc0
  SET_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN); //Enable CRC peripheral
 8002074:	63ab      	str	r3, [r5, #56]	@ 0x38
  if (READ_BIT(FLASH->OPTR, OB_USER_SWD_NRST_MODE) != OB_SWD_PC0_GPIO_PB6)
 8002076:	4b76      	ldr	r3, [pc, #472]	@ (8002250 <main+0x258>)
 8002078:	01d2      	lsls	r2, r2, #7
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4013      	ands	r3, r2
 800207e:	4293      	cmp	r3, r2
 8002080:	d01c      	beq.n	80020bc <main+0xc4>
  LL_FLASH_Unlock();
 8002082:	f002 fced 	bl	8004a60 <LL_FLASH_Unlock>
  LL_FLASH_OB_Unlock();
 8002086:	f002 fd09 	bl	8004a9c <LL_FLASH_OB_Unlock>
  OBInitCfg.OptionType = OPTIONBYTE_USER;
 800208a:	2308      	movs	r3, #8
 800208c:	9306      	str	r3, [sp, #24]
  OBInitCfg.USERType = OB_USER_BOR_EN | OB_USER_BOR_LEV | OB_USER_IWDG_SW | OB_USER_SWD_NRST_MODE | OB_USER_IWDG_STOP;
 800208e:	23ff      	movs	r3, #255	@ 0xff
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	930a      	str	r3, [sp, #40]	@ 0x28
  OBInitCfg.USERConfig = OB_BOR_DISABLE | OB_BOR_LEVEL_3p1_3p2 | OB_IWDG_SW | OB_IWDG_STOP_ACTIVE | OB_SWD_PC0_GPIO_PB6;
 8002094:	3b01      	subs	r3, #1
 8002096:	3bff      	subs	r3, #255	@ 0xff
  LL_FLASH_OBProgram(&OBInitCfg);
 8002098:	a806      	add	r0, sp, #24
  OBInitCfg.USERConfig = OB_BOR_DISABLE | OB_BOR_LEVEL_3p1_3p2 | OB_IWDG_SW | OB_IWDG_STOP_ACTIVE | OB_SWD_PC0_GPIO_PB6;
 800209a:	930b      	str	r3, [sp, #44]	@ 0x2c
  LL_FLASH_OBProgram(&OBInitCfg);
 800209c:	f002 fd44 	bl	8004b28 <LL_FLASH_OBProgram>
  LL_FLASH_Lock();
 80020a0:	f002 fcf0 	bl	8004a84 <LL_FLASH_Lock>
  LL_FLASH_OB_Lock();
 80020a4:	f002 fd0e 	bl	8004ac4 <LL_FLASH_OB_Lock>
  LL_FLASH_OB_Launch();
 80020a8:	f002 fd1a 	bl	8004ae0 <LL_FLASH_OB_Launch>
  __ASM volatile ("dsb 0xF":::"memory");
 80020ac:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	4b68      	ldr	r3, [pc, #416]	@ (8002254 <main+0x25c>)
 80020b2:	60e3      	str	r3, [r4, #12]
 80020b4:	f3bf 8f4f 	dsb	sy
    __NOP();
 80020b8:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80020ba:	e7fd      	b.n	80020b8 <main+0xc0>
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80020bc:	24a0      	movs	r4, #160	@ 0xa0
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80020be:	2001      	movs	r0, #1
 80020c0:	f7fe fa56 	bl	8000570 <LL_IOP_GRP1_EnableClock>
 80020c4:	2101      	movs	r1, #1
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80020c6:	2603      	movs	r6, #3
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80020c8:	05e4      	lsls	r4, r4, #23
 80020ca:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80020cc:	4862      	ldr	r0, [pc, #392]	@ (8002258 <main+0x260>)
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80020ce:	438b      	bics	r3, r1
 80020d0:	6063      	str	r3, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80020d2:	68a3      	ldr	r3, [r4, #8]
 80020d4:	270c      	movs	r7, #12
 80020d6:	43b3      	bics	r3, r6
 80020d8:	4333      	orrs	r3, r6
 80020da:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80020dc:	68e3      	ldr	r3, [r4, #12]
 80020de:	43b3      	bics	r3, r6
 80020e0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	43b3      	bics	r3, r6
 80020e6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80020e8:	68a3      	ldr	r3, [r4, #8]
 80020ea:	4003      	ands	r3, r0
 80020ec:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	68e2      	ldr	r2, [r4, #12]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4002      	ands	r2, r0
 80020f6:	4313      	orrs	r3, r2
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80020f8:	2202      	movs	r2, #2
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80020fa:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	4003      	ands	r3, r0
 8002100:	6023      	str	r3, [r4, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002102:	6863      	ldr	r3, [r4, #4]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002104:	2002      	movs	r0, #2
 8002106:	4393      	bics	r3, r2
 8002108:	6063      	str	r3, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800210a:	68a3      	ldr	r3, [r4, #8]
 800210c:	43bb      	bics	r3, r7
 800210e:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002110:	68e3      	ldr	r3, [r4, #12]
 8002112:	43bb      	bics	r3, r7
 8002114:	60e3      	str	r3, [r4, #12]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002116:	62a2      	str	r2, [r4, #40]	@ 0x28
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	1892      	adds	r2, r2, r2
 800211c:	43bb      	bics	r3, r7
 800211e:	4313      	orrs	r3, r2
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	f7fe fa25 	bl	8000570 <LL_IOP_GRP1_EnableClock>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002126:	2104      	movs	r1, #4
 8002128:	4a4c      	ldr	r2, [pc, #304]	@ (800225c <main+0x264>)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800212a:	484b      	ldr	r0, [pc, #300]	@ (8002258 <main+0x260>)
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800212c:	6853      	ldr	r3, [r2, #4]
 800212e:	438b      	bics	r3, r1
 8002130:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002132:	6893      	ldr	r3, [r2, #8]
 8002134:	312c      	adds	r1, #44	@ 0x2c
 8002136:	438b      	bics	r3, r1
 8002138:	430b      	orrs	r3, r1
 800213a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800213c:	68d3      	ldr	r3, [r2, #12]
 800213e:	438b      	bics	r3, r1
 8002140:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002142:	6813      	ldr	r3, [r2, #0]
 8002144:	438b      	bics	r3, r1
 8002146:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002148:	6853      	ldr	r3, [r2, #4]
 800214a:	3928      	subs	r1, #40	@ 0x28
 800214c:	438b      	bics	r3, r1
 800214e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002150:	0011      	movs	r1, r2
 8002152:	6893      	ldr	r3, [r2, #8]
 8002154:	22c0      	movs	r2, #192	@ 0xc0
 8002156:	4393      	bics	r3, r2
 8002158:	4313      	orrs	r3, r2
 800215a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800215c:	68cb      	ldr	r3, [r1, #12]
 800215e:	4393      	bics	r3, r2
 8002160:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002162:	680b      	ldr	r3, [r1, #0]
 8002164:	4393      	bics	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002168:	684b      	ldr	r3, [r1, #4]
 800216a:	3ab0      	subs	r2, #176	@ 0xb0
 800216c:	4393      	bics	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002170:	23c0      	movs	r3, #192	@ 0xc0
 8002172:	688a      	ldr	r2, [r1, #8]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4002      	ands	r2, r0
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800217c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800217e:	000a      	movs	r2, r1
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002180:	4003      	ands	r3, r0
 8002182:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002184:	680b      	ldr	r3, [r1, #0]
 8002186:	4003      	ands	r3, r0
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002188:	2002      	movs	r0, #2
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800218a:	600b      	str	r3, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800218c:	684b      	ldr	r3, [r1, #4]
 800218e:	4383      	bics	r3, r0
 8002190:	604b      	str	r3, [r1, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002192:	688b      	ldr	r3, [r1, #8]
  if(!LL_GPIO_IsInputPinSet(GPIOA, Button_Plus)) {
 8002194:	300e      	adds	r0, #14
 8002196:	43bb      	bics	r3, r7
 8002198:	433b      	orrs	r3, r7
 800219a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800219c:	68cb      	ldr	r3, [r1, #12]
 800219e:	43bb      	bics	r3, r7
 80021a0:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80021a2:	680b      	ldr	r3, [r1, #0]
 80021a4:	43bb      	bics	r3, r7
 80021a6:	600b      	str	r3, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80021a8:	684b      	ldr	r3, [r1, #4]
 80021aa:	2101      	movs	r1, #1
 80021ac:	438b      	bics	r3, r1
 80021ae:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80021b0:	6893      	ldr	r3, [r2, #8]
 80021b2:	43b3      	bics	r3, r6
 80021b4:	4333      	orrs	r3, r6
 80021b6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80021b8:	68d3      	ldr	r3, [r2, #12]
 80021ba:	43b3      	bics	r3, r6
 80021bc:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80021be:	6813      	ldr	r3, [r2, #0]
 80021c0:	43b3      	bics	r3, r6
 80021c2:	6013      	str	r3, [r2, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80021c4:	2310      	movs	r3, #16
 80021c6:	6922      	ldr	r2, [r4, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	4202      	tst	r2, r0
 80021cc:	d154      	bne.n	8002278 <main+0x280>
		strcpy(Display1,p_aux);
 80021ce:	001c      	movs	r4, r3
		Flashing_Flag=1;
 80021d0:	4a23      	ldr	r2, [pc, #140]	@ (8002260 <main+0x268>)
		p_aux=(unsigned char*)(MsgStr[1]);
 80021d2:	4824      	ldr	r0, [pc, #144]	@ (8002264 <main+0x26c>)
		Flashing_Flag=1;
 80021d4:	6011      	str	r1, [r2, #0]
		p_aux=(unsigned char*)(MsgStr[1]);
 80021d6:	4a15      	ldr	r2, [pc, #84]	@ (800222c <main+0x234>)
 80021d8:	4e23      	ldr	r6, [pc, #140]	@ (8002268 <main+0x270>)
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	6852      	ldr	r2, [r2, #4]
 80021de:	6002      	str	r2, [r0, #0]
		strcpy(Display1,p_aux);
 80021e0:	6802      	ldr	r2, [r0, #0]
 80021e2:	5cd1      	ldrb	r1, [r2, r3]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	2900      	cmp	r1, #0
 80021e8:	d11a      	bne.n	8002220 <main+0x228>
		p_roll=Display;
 80021ea:	4d20      	ldr	r5, [pc, #128]	@ (800226c <main+0x274>)
 80021ec:	4c20      	ldr	r4, [pc, #128]	@ (8002270 <main+0x278>)
		Put_Buff_On_Display(p_roll,0);
 80021ee:	0028      	movs	r0, r5
		p_roll=Display;
 80021f0:	6025      	str	r5, [r4, #0]
		Put_Buff_On_Display(p_roll,0);
 80021f2:	f7fe fa99 	bl	8000728 <Put_Buff_On_Display>
			if(Roll_Flag&&Display1[3]!=0){
 80021f6:	6831      	ldr	r1, [r6, #0]
 80021f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002274 <main+0x27c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2a00      	cmp	r2, #0
 80021fe:	d0fc      	beq.n	80021fa <main+0x202>
 8002200:	78ca      	ldrb	r2, [r1, #3]
 8002202:	2a00      	cmp	r2, #0
 8002204:	d0f9      	beq.n	80021fa <main+0x202>
			Roll_Flag=0;
 8002206:	2100      	movs	r1, #0
			Put_Buff_On_Display(p_roll++,0);
 8002208:	6820      	ldr	r0, [r4, #0]
			Roll_Flag=0;
 800220a:	6019      	str	r1, [r3, #0]
			Put_Buff_On_Display(p_roll++,0);
 800220c:	1c43      	adds	r3, r0, #1
 800220e:	6023      	str	r3, [r4, #0]
 8002210:	f7fe fa8a 	bl	8000728 <Put_Buff_On_Display>
			if(!(*p_roll)) p_roll=Display;
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ec      	bne.n	80021f6 <main+0x1fe>
 800221c:	6025      	str	r5, [r4, #0]
 800221e:	e7ea      	b.n	80021f6 <main+0x1fe>
		strcpy(Display1,p_aux);
 8002220:	6835      	ldr	r5, [r6, #0]
 8002222:	54e9      	strb	r1, [r5, r3]
 8002224:	6833      	ldr	r3, [r6, #0]
 8002226:	549c      	strb	r4, [r3, r2]
 8002228:	0013      	movs	r3, r2
 800222a:	e7d9      	b.n	80021e0 <main+0x1e8>
 800222c:	200004d4 	.word	0x200004d4
 8002230:	2000023c 	.word	0x2000023c
 8002234:	40021000 	.word	0x40021000
 8002238:	fffff0ff 	.word	0xfffff0ff
 800223c:	ffff8fff 	.word	0xffff8fff
 8002240:	e000ed00 	.word	0xe000ed00
 8002244:	e000e010 	.word	0xe000e010
 8002248:	00002edf 	.word	0x00002edf
 800224c:	016e3600 	.word	0x016e3600
 8002250:	40022000 	.word	0x40022000
 8002254:	05fa0004 	.word	0x05fa0004
 8002258:	fffffcff 	.word	0xfffffcff
 800225c:	50000400 	.word	0x50000400
 8002260:	200004a4 	.word	0x200004a4
 8002264:	20000448 	.word	0x20000448
 8002268:	200000ac 	.word	0x200000ac
 800226c:	200000b0 	.word	0x200000b0
 8002270:	200000a8 	.word	0x200000a8
 8002274:	200004ac 	.word	0x200004ac
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8002278:	2004      	movs	r0, #4
 800227a:	f7fe f979 	bl	8000570 <LL_IOP_GRP1_EnableClock>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800227e:	2230      	movs	r2, #48	@ 0x30
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002280:	2110      	movs	r1, #16
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002282:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002284:	48d7      	ldr	r0, [pc, #860]	@ (80025e4 <main+0x5ec>)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002286:	4393      	bics	r3, r2
 8002288:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800228a:	68e3      	ldr	r3, [r4, #12]
 800228c:	4393      	bics	r3, r2
 800228e:	430b      	orrs	r3, r1
 8002290:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002292:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002294:	390f      	subs	r1, #15
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002296:	4393      	bics	r3, r2
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002298:	4ad3      	ldr	r2, [pc, #844]	@ (80025e8 <main+0x5f0>)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800229a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800229c:	6893      	ldr	r3, [r2, #8]
 800229e:	43b3      	bics	r3, r6
 80022a0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80022a2:	68d3      	ldr	r3, [r2, #12]
 80022a4:	43b3      	bics	r3, r6
 80022a6:	430b      	orrs	r3, r1
 80022a8:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80022aa:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80022ac:	313f      	adds	r1, #63	@ 0x3f
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80022ae:	43b3      	bics	r3, r6
 80022b0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80022b2:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80022b4:	4acd      	ldr	r2, [pc, #820]	@ (80025ec <main+0x5f4>)
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80022b6:	438b      	bics	r3, r1
 80022b8:	6043      	str	r3, [r0, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80022ba:	6883      	ldr	r3, [r0, #8]
 80022bc:	4013      	ands	r3, r2
 80022be:	6083      	str	r3, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80022c0:	68c3      	ldr	r3, [r0, #12]
 80022c2:	4013      	ands	r3, r2
 80022c4:	60c3      	str	r3, [r0, #12]
  WRITE_REG(GPIOx->BRR, PinMask);
 80022c6:	6281      	str	r1, [r0, #40]	@ 0x28
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80022c8:	6803      	ldr	r3, [r0, #0]
 80022ca:	0001      	movs	r1, r0
 80022cc:	2080      	movs	r0, #128	@ 0x80
 80022ce:	4013      	ands	r3, r2
  SET_BIT(RCC->APBENR2, Periphs);
 80022d0:	2280      	movs	r2, #128	@ 0x80
 80022d2:	0140      	lsls	r0, r0, #5
 80022d4:	4303      	orrs	r3, r0
 80022d6:	600b      	str	r3, [r1, #0]
 80022d8:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80022da:	0352      	lsls	r2, r2, #13
 80022dc:	4313      	orrs	r3, r2
 80022de:	642b      	str	r3, [r5, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80022e0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 80022e2:	49c3      	ldr	r1, [pc, #780]	@ (80025f0 <main+0x5f8>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	22c0      	movs	r2, #192	@ 0xc0
 80022e8:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 80022ea:	9b06      	ldr	r3, [sp, #24]
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	0212      	lsls	r2, r2, #8
 80022f0:	4313      	orrs	r3, r2
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	6023      	str	r3, [r4, #0]
 80022f6:	690b      	ldr	r3, [r1, #16]
 80022f8:	05d2      	lsls	r2, r2, #23
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	4313      	orrs	r3, r2
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RESSEL, Resolution);
 8002300:	2218      	movs	r2, #24
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
 8002302:	610b      	str	r3, [r1, #16]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RESSEL, Resolution);
 8002304:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_OVRMOD, Overrun);
 8002306:	0004      	movs	r4, r0
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RESSEL, Resolution);
 8002308:	4393      	bics	r3, r2
 800230a:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_ALIGN, DataAlignment);
 800230c:	68cb      	ldr	r3, [r1, #12]
 800230e:	3208      	adds	r2, #8
 8002310:	4393      	bics	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
 8002314:	000a      	movs	r2, r1
  MODIFY_REG(ADCx->CFGR1, (ADC_CFGR1_WAIT), LowPowerMode);
 8002316:	68cb      	ldr	r3, [r1, #12]
 8002318:	49b6      	ldr	r1, [pc, #728]	@ (80025f4 <main+0x5fc>)
 800231a:	400b      	ands	r3, r1
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800231c:	2107      	movs	r1, #7
  MODIFY_REG(ADCx->CFGR1, (ADC_CFGR1_WAIT), LowPowerMode);
 800231e:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002320:	6953      	ldr	r3, [r2, #20]
 8002322:	438b      	bics	r3, r1
 8002324:	430b      	orrs	r3, r1
 8002326:	0011      	movs	r1, r2
 8002328:	6153      	str	r3, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800232a:	68d3      	ldr	r3, [r2, #12]
 800232c:	4ab2      	ldr	r2, [pc, #712]	@ (80025f8 <main+0x600>)
 800232e:	4013      	ands	r3, r2
 8002330:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CONT, Continuous);
 8002332:	68cb      	ldr	r3, [r1, #12]
 8002334:	4ab1      	ldr	r2, [pc, #708]	@ (80025fc <main+0x604>)
 8002336:	4013      	ands	r3, r2
 8002338:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_OVRMOD, Overrun);
 800233a:	68cb      	ldr	r3, [r1, #12]
 800233c:	4ab0      	ldr	r2, [pc, #704]	@ (8002600 <main+0x608>)
 800233e:	4013      	ands	r3, r2
 8002340:	4303      	orrs	r3, r0
 8002342:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DISCEN, SeqDiscont);
 8002344:	68cb      	ldr	r3, [r1, #12]
 8002346:	4aaf      	ldr	r2, [pc, #700]	@ (8002604 <main+0x60c>)
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002348:	0008      	movs	r0, r1
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DISCEN, SeqDiscont);
 800234a:	4013      	ands	r3, r2
 800234c:	60cb      	str	r3, [r1, #12]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800234e:	2308      	movs	r3, #8
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8002350:	4aad      	ldr	r2, [pc, #692]	@ (8002608 <main+0x610>)
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002352:	628b      	str	r3, [r1, #40]	@ 0x28
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8002354:	6813      	ldr	r3, [r2, #0]
 8002356:	49ad      	ldr	r1, [pc, #692]	@ (800260c <main+0x614>)
 8002358:	400b      	ands	r3, r1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800235a:	2104      	movs	r1, #4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800235c:	6013      	str	r3, [r2, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800235e:	6843      	ldr	r3, [r0, #4]
 8002360:	430b      	orrs	r3, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002362:	21c3      	movs	r1, #195	@ 0xc3
 8002364:	6043      	str	r3, [r0, #4]
 8002366:	20ff      	movs	r0, #255	@ 0xff
 8002368:	4ba9      	ldr	r3, [pc, #676]	@ (8002610 <main+0x618>)
 800236a:	0089      	lsls	r1, r1, #2
 800236c:	585a      	ldr	r2, [r3, r1]
 800236e:	4382      	bics	r2, r0
 8002370:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	601c      	str	r4, [r3, #0]
  MsDelay(10);
 8002374:	4ca7      	ldr	r4, [pc, #668]	@ (8002614 <main+0x61c>)
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	3315      	adds	r3, #21
 800237a:	6822      	ldr	r2, [r4, #0]
 800237c:	4293      	cmp	r3, r2
 800237e:	dafc      	bge.n	800237a <main+0x382>
  ADCCalibrate();
 8002380:	f7fe fa00 	bl	8000784 <ADCCalibrate>
  MsDelay(10);
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	3315      	adds	r3, #21
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	4293      	cmp	r3, r2
 800238c:	dafc      	bge.n	8002388 <main+0x390>
  MODIFY_REG(ADCx->CR,ADC_CR_BITS_PROPERTY_RS,ADC_CR_ADEN);
 800238e:	4998      	ldr	r1, [pc, #608]	@ (80025f0 <main+0x5f8>)
 8002390:	4ba1      	ldr	r3, [pc, #644]	@ (8002618 <main+0x620>)
 8002392:	688a      	ldr	r2, [r1, #8]
 8002394:	401a      	ands	r2, r3
 8002396:	2301      	movs	r3, #1
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
  MsDelay(1);
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	3303      	adds	r3, #3
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	4293      	cmp	r3, r2
 80023a4:	dafc      	bge.n	80023a0 <main+0x3a8>
  if(Lookfor_Profiles()) Load_Context(); else {
 80023a6:	f7ff fbb7 	bl	8001b18 <Lookfor_Profiles>
 80023aa:	4c9c      	ldr	r4, [pc, #624]	@ (800261c <main+0x624>)
 80023ac:	1e05      	subs	r5, r0, #0
 80023ae:	d100      	bne.n	80023b2 <main+0x3ba>
 80023b0:	e29e      	b.n	80028f0 <main+0x8f8>
 80023b2:	f7ff fccd 	bl	8001d50 <Load_Context>
  MsgStr=W1209PY.Language?(unsigned char **)MsgStrSp:(unsigned char **)MsgStrEn;
 80023b6:	4b9a      	ldr	r3, [pc, #616]	@ (8002620 <main+0x628>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b9a      	ldr	r3, [pc, #616]	@ (8002624 <main+0x62c>)
 80023bc:	0492      	lsls	r2, r2, #18
 80023be:	d500      	bpl.n	80023c2 <main+0x3ca>
 80023c0:	4b99      	ldr	r3, [pc, #612]	@ (8002628 <main+0x630>)
  MsgBox((unsigned char*)MsgStr[0],3,0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	2103      	movs	r1, #3
  MsgStr=W1209PY.Language?(unsigned char **)MsgStrSp:(unsigned char **)MsgStrEn;
 80023c8:	6023      	str	r3, [r4, #0]
  MsgBox((unsigned char*)MsgStr[0],3,0);
 80023ca:	f7fe fdbf 	bl	8000f4c <MsgBox>
  Prepare_Boundaries();
 80023ce:	f7ff fa8d 	bl	80018ec <Prepare_Boundaries>
  ADC_Ready=1;
 80023d2:	2201      	movs	r2, #1
 80023d4:	4b95      	ldr	r3, [pc, #596]	@ (800262c <main+0x634>)
 80023d6:	601a      	str	r2, [r3, #0]
  p_roll=Display;
 80023d8:	4a95      	ldr	r2, [pc, #596]	@ (8002630 <main+0x638>)
 80023da:	4b96      	ldr	r3, [pc, #600]	@ (8002634 <main+0x63c>)
 80023dc:	601a      	str	r2, [r3, #0]
  while(!Analog_Flag);
 80023de:	4a96      	ldr	r2, [pc, #600]	@ (8002638 <main+0x640>)
 80023e0:	6813      	ldr	r3, [r2, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0fc      	beq.n	80023e0 <main+0x3e8>
  Get_Temperature(Put_Temp_On_Buffer);
 80023e6:	2001      	movs	r0, #1
 80023e8:	f7fe fcf2 	bl	8000dd0 <Get_Temperature>
    if(Roll_Flag){
 80023ec:	4d93      	ldr	r5, [pc, #588]	@ (800263c <main+0x644>)
 80023ee:	682b      	ldr	r3, [r5, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d100      	bne.n	80023f6 <main+0x3fe>
 80023f4:	e0a5      	b.n	8002542 <main+0x54a>
					if(W1209PY.Sensor_State) for(p_roll=Display;W1209PY.Sensor_State;){
 80023f6:	4c8a      	ldr	r4, [pc, #552]	@ (8002620 <main+0x628>)
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	04db      	lsls	r3, r3, #19
 80023fc:	0f9b      	lsrs	r3, r3, #30
 80023fe:	d000      	beq.n	8002402 <main+0x40a>
 8002400:	e2c4      	b.n	800298c <main+0x994>
					Roll_Flag=0;
 8002402:	2300      	movs	r3, #0
 8002404:	602b      	str	r3, [r5, #0]
					if(W1209PY.Timer_Enable&&Tout()){
 8002406:	6822      	ldr	r2, [r4, #0]
 8002408:	0552      	lsls	r2, r2, #21
 800240a:	d500      	bpl.n	800240e <main+0x416>
 800240c:	e35a      	b.n	8002ac4 <main+0xacc>
					if(Cleaning){Cleaning=0; Get_Temperature(Put_Temp_On_Buffer);}
 800240e:	4b8c      	ldr	r3, [pc, #560]	@ (8002640 <main+0x648>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <main+0x422>
 8002416:	f000 fc8a 	bl	8002d2e <main+0xd36>
					if(W1209PY.Temp_Roll||Alarm_Flag) Put_Buff_On_Display(p_roll++,0); else Put_Buff_On_Display(Display1,0);
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	4d89      	ldr	r5, [pc, #548]	@ (8002644 <main+0x64c>)
 800241e:	075b      	lsls	r3, r3, #29
 8002420:	d404      	bmi.n	800242c <main+0x434>
 8002422:	6829      	ldr	r1, [r5, #0]
 8002424:	2900      	cmp	r1, #0
 8002426:	d101      	bne.n	800242c <main+0x434>
 8002428:	f000 fcba 	bl	8002da0 <main+0xda8>
 800242c:	2100      	movs	r1, #0
 800242e:	4b81      	ldr	r3, [pc, #516]	@ (8002634 <main+0x63c>)
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	1c42      	adds	r2, r0, #1
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	f7fe f977 	bl	8000728 <Put_Buff_On_Display>
					if(((((NTC.Temp<W1209PY.Alarm1_TempK100)&&(W1209PY.Alarm1_TempK100>=Max(Turn_Off_Temp,Turn_On_Temp)))|| \
 800243a:	4b83      	ldr	r3, [pc, #524]	@ (8002648 <main+0x650>)
 800243c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800243e:	6a22      	ldr	r2, [r4, #32]
 8002440:	4291      	cmp	r1, r2
 8002442:	d20b      	bcs.n	800245c <main+0x464>
 8002444:	4981      	ldr	r1, [pc, #516]	@ (800264c <main+0x654>)
 8002446:	4a82      	ldr	r2, [pc, #520]	@ (8002650 <main+0x658>)
 8002448:	6a20      	ldr	r0, [r4, #32]
 800244a:	680f      	ldr	r7, [r1, #0]
 800244c:	6816      	ldr	r6, [r2, #0]
 800244e:	42b7      	cmp	r7, r6
 8002450:	d201      	bcs.n	8002456 <main+0x45e>
 8002452:	f000 fca9 	bl	8002da8 <main+0xdb0>
 8002456:	680a      	ldr	r2, [r1, #0]
 8002458:	4290      	cmp	r0, r2
 800245a:	d214      	bcs.n	8002486 <main+0x48e>
					    ((NTC.Temp>W1209PY.Alarm1_TempK100)&&(W1209PY.Alarm1_TempK100<=Min(Turn_Off_Temp,Turn_On_Temp))))||(!W1209PY.Alarm1))&& \
 800245c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800245e:	6a23      	ldr	r3, [r4, #32]
					if(((((NTC.Temp<W1209PY.Alarm1_TempK100)&&(W1209PY.Alarm1_TempK100>=Max(Turn_Off_Temp,Turn_On_Temp)))|| \
 8002460:	429a      	cmp	r2, r3
 8002462:	d90b      	bls.n	800247c <main+0x484>
					    ((NTC.Temp>W1209PY.Alarm1_TempK100)&&(W1209PY.Alarm1_TempK100<=Min(Turn_Off_Temp,Turn_On_Temp))))||(!W1209PY.Alarm1))&& \
 8002464:	4a79      	ldr	r2, [pc, #484]	@ (800264c <main+0x654>)
 8002466:	4b7a      	ldr	r3, [pc, #488]	@ (8002650 <main+0x658>)
 8002468:	6a21      	ldr	r1, [r4, #32]
 800246a:	6816      	ldr	r6, [r2, #0]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	4286      	cmp	r6, r0
 8002470:	d901      	bls.n	8002476 <main+0x47e>
 8002472:	f000 fc9c 	bl	8002dae <main+0xdb6>
 8002476:	6813      	ldr	r3, [r2, #0]
 8002478:	4299      	cmp	r1, r3
 800247a:	d904      	bls.n	8002486 <main+0x48e>
 800247c:	6823      	ldr	r3, [r4, #0]
 800247e:	071b      	lsls	r3, r3, #28
 8002480:	d501      	bpl.n	8002486 <main+0x48e>
 8002482:	f000 fcb5 	bl	8002df0 <main+0xdf8>
					   ((((NTC.Temp<W1209PY.Alarm2_TempK100)&&(W1209PY.Alarm2_TempK100>=Max(Turn_Off_Temp,Turn_On_Temp)))|| \
 8002486:	4b70      	ldr	r3, [pc, #448]	@ (8002648 <main+0x650>)
 8002488:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800248a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
					    ((NTC.Temp>W1209PY.Alarm1_TempK100)&&(W1209PY.Alarm1_TempK100<=Min(Turn_Off_Temp,Turn_On_Temp))))||(!W1209PY.Alarm1))&& \
 800248c:	4291      	cmp	r1, r2
 800248e:	d20b      	bcs.n	80024a8 <main+0x4b0>
					   ((((NTC.Temp<W1209PY.Alarm2_TempK100)&&(W1209PY.Alarm2_TempK100>=Max(Turn_Off_Temp,Turn_On_Temp)))|| \
 8002490:	496e      	ldr	r1, [pc, #440]	@ (800264c <main+0x654>)
 8002492:	4a6f      	ldr	r2, [pc, #444]	@ (8002650 <main+0x658>)
 8002494:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002496:	680f      	ldr	r7, [r1, #0]
 8002498:	6816      	ldr	r6, [r2, #0]
 800249a:	42b7      	cmp	r7, r6
 800249c:	d201      	bcs.n	80024a2 <main+0x4aa>
 800249e:	f000 fc89 	bl	8002db4 <main+0xdbc>
 80024a2:	680a      	ldr	r2, [r1, #0]
 80024a4:	4290      	cmp	r0, r2
 80024a6:	d214      	bcs.n	80024d2 <main+0x4da>
					    ((NTC.Temp>W1209PY.Alarm2_TempK100)&&(W1209PY.Alarm2_TempK100<=Min(Turn_Off_Temp,Turn_On_Temp))))||(!W1209PY.Alarm2))) {
 80024a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					   ((((NTC.Temp<W1209PY.Alarm2_TempK100)&&(W1209PY.Alarm2_TempK100>=Max(Turn_Off_Temp,Turn_On_Temp)))|| \
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d90b      	bls.n	80024c8 <main+0x4d0>
					    ((NTC.Temp>W1209PY.Alarm2_TempK100)&&(W1209PY.Alarm2_TempK100<=Min(Turn_Off_Temp,Turn_On_Temp))))||(!W1209PY.Alarm2))) {
 80024b0:	4a66      	ldr	r2, [pc, #408]	@ (800264c <main+0x654>)
 80024b2:	4b67      	ldr	r3, [pc, #412]	@ (8002650 <main+0x658>)
 80024b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80024b6:	6816      	ldr	r6, [r2, #0]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	4286      	cmp	r6, r0
 80024bc:	d901      	bls.n	80024c2 <main+0x4ca>
 80024be:	f000 fc7c 	bl	8002dba <main+0xdc2>
 80024c2:	6813      	ldr	r3, [r2, #0]
 80024c4:	4299      	cmp	r1, r3
 80024c6:	d904      	bls.n	80024d2 <main+0x4da>
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	06db      	lsls	r3, r3, #27
 80024cc:	d501      	bpl.n	80024d2 <main+0x4da>
 80024ce:	f000 fc8f 	bl	8002df0 <main+0xdf8>
						Alarm_Flag=0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	602b      	str	r3, [r5, #0]
						if(((!W1209PY.Timer_Enable)||W1209PY.TM_Seconds||W1209PY.TM_Minutes||W1209PY.TM_Days||W1209PY.TM_Hours)&&(!W1209PY.Sensor_State))	System_Ready=1;
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	055b      	lsls	r3, r3, #21
 80024da:	d50e      	bpl.n	80024fa <main+0x502>
 80024dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	d10a      	bne.n	80024fa <main+0x502>
 80024e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80024e6:	025b      	lsls	r3, r3, #9
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	d106      	bne.n	80024fa <main+0x502>
 80024ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80024ee:	051b      	lsls	r3, r3, #20
 80024f0:	d103      	bne.n	80024fa <main+0x502>
 80024f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80024f4:	03db      	lsls	r3, r3, #15
 80024f6:	0edb      	lsrs	r3, r3, #27
 80024f8:	d006      	beq.n	8002508 <main+0x510>
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	04db      	lsls	r3, r3, #19
 80024fe:	0f9b      	lsrs	r3, r3, #30
 8002500:	d102      	bne.n	8002508 <main+0x510>
 8002502:	2201      	movs	r2, #1
 8002504:	4b53      	ldr	r3, [pc, #332]	@ (8002654 <main+0x65c>)
 8002506:	601a      	str	r2, [r3, #0]
						Flashing_Flag=0;
 8002508:	2200      	movs	r2, #0
 800250a:	4b53      	ldr	r3, [pc, #332]	@ (8002658 <main+0x660>)
 800250c:	601a      	str	r2, [r3, #0]
						if((Analog_Flag)&&!(W1209PY.Temp_Roll&&*p_roll)) Get_Temperature(Put_Temp_On_Buffer); 
 800250e:	4b4a      	ldr	r3, [pc, #296]	@ (8002638 <main+0x640>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	2a00      	cmp	r2, #0
 8002514:	d101      	bne.n	800251a <main+0x522>
 8002516:	f000 fc53 	bl	8002dc0 <main+0xdc8>
 800251a:	6822      	ldr	r2, [r4, #0]
 800251c:	0752      	lsls	r2, r2, #29
 800251e:	d506      	bpl.n	800252e <main+0x536>
 8002520:	4a44      	ldr	r2, [pc, #272]	@ (8002634 <main+0x63c>)
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	2a00      	cmp	r2, #0
 8002528:	d001      	beq.n	800252e <main+0x536>
 800252a:	f000 fc49 	bl	8002dc0 <main+0xdc8>
 800252e:	2001      	movs	r0, #1
							else if(Analog_Flag) Get_Temperature(Dont_Put_Temp_On_Buffer);								
 8002530:	f7fe fc4e 	bl	8000dd0 <Get_Temperature>
					if(!(*p_roll)) p_roll=Display;
 8002534:	4b3f      	ldr	r3, [pc, #252]	@ (8002634 <main+0x63c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	2a00      	cmp	r2, #0
 800253c:	d101      	bne.n	8002542 <main+0x54a>
 800253e:	4a3c      	ldr	r2, [pc, #240]	@ (8002630 <main+0x638>)
 8002540:	601a      	str	r2, [r3, #0]
	if(Pressed_BSet==3) {
 8002542:	4a46      	ldr	r2, [pc, #280]	@ (800265c <main+0x664>)
 8002544:	6813      	ldr	r3, [r2, #0]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d12d      	bne.n	80025a6 <main+0x5ae>
							Pressed_BSet=0;
 800254a:	2300      	movs	r3, #0
 800254c:	6013      	str	r3, [r2, #0]
							Flashing_Flag=0;
 800254e:	4a42      	ldr	r2, [pc, #264]	@ (8002658 <main+0x660>)
 8002550:	6013      	str	r3, [r2, #0]
							Display_Menu();
 8002552:	f7fe fdfd 	bl	8001150 <Display_Menu>
							while((Pressed_BSet!=3)&&!Tout()){
 8002556:	4f41      	ldr	r7, [pc, #260]	@ (800265c <main+0x664>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d006      	beq.n	800256c <main+0x574>
 800255e:	4e40      	ldr	r6, [pc, #256]	@ (8002660 <main+0x668>)
 8002560:	4a40      	ldr	r2, [pc, #256]	@ (8002664 <main+0x66c>)
 8002562:	6833      	ldr	r3, [r6, #0]
 8002564:	4293      	cmp	r3, r2
 8002566:	dc01      	bgt.n	800256c <main+0x574>
 8002568:	f000 fd96 	bl	8003098 <main+0x10a0>
							if(W1209PY.Temp_Roll) {p_roll=Display; Cleaning=1;}
 800256c:	492c      	ldr	r1, [pc, #176]	@ (8002620 <main+0x628>)
 800256e:	680b      	ldr	r3, [r1, #0]
 8002570:	075b      	lsls	r3, r3, #29
 8002572:	d505      	bpl.n	8002580 <main+0x588>
 8002574:	4b2f      	ldr	r3, [pc, #188]	@ (8002634 <main+0x63c>)
 8002576:	4a2e      	ldr	r2, [pc, #184]	@ (8002630 <main+0x638>)
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	2201      	movs	r2, #1
 800257c:	4b30      	ldr	r3, [pc, #192]	@ (8002640 <main+0x648>)
 800257e:	601a      	str	r2, [r3, #0]
							Alarm_Flag=0;
 8002580:	2200      	movs	r2, #0
 8002582:	4b30      	ldr	r3, [pc, #192]	@ (8002644 <main+0x64c>)
							Calculate_CRC((struct Params *)&NTC,(struct Params2 *)&W1209PY, Set_Checksum);
 8002584:	4830      	ldr	r0, [pc, #192]	@ (8002648 <main+0x650>)
							Alarm_Flag=0;
 8002586:	601a      	str	r2, [r3, #0]
							Pressed_BSet=0;
 8002588:	603a      	str	r2, [r7, #0]
							Calculate_CRC((struct Params *)&NTC,(struct Params2 *)&W1209PY, Set_Checksum);
 800258a:	3201      	adds	r2, #1
 800258c:	f7ff f9e4 	bl	8001958 <Calculate_CRC>
							if(Are_Settings_Changed()) Save_Context(Profiles[Active_Profile]);
 8002590:	f7ff fc38 	bl	8001e04 <Are_Settings_Changed>
 8002594:	2800      	cmp	r0, #0
 8002596:	d006      	beq.n	80025a6 <main+0x5ae>
 8002598:	4a33      	ldr	r2, [pc, #204]	@ (8002668 <main+0x670>)
 800259a:	4b34      	ldr	r3, [pc, #208]	@ (800266c <main+0x674>)
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	58d0      	ldr	r0, [r2, r3]
 80025a2:	f7ff fb73 	bl	8001c8c <Save_Context>
	if(Pressed_BPlus==1||Pressed_BMinus==1){
 80025a6:	4d32      	ldr	r5, [pc, #200]	@ (8002670 <main+0x678>)
 80025a8:	4c1d      	ldr	r4, [pc, #116]	@ (8002620 <main+0x628>)
 80025aa:	682b      	ldr	r3, [r5, #0]
 80025ac:	4e31      	ldr	r6, [pc, #196]	@ (8002674 <main+0x67c>)
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d002      	beq.n	80025b8 <main+0x5c0>
 80025b2:	6833      	ldr	r3, [r6, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d161      	bne.n	800267c <main+0x684>
		if(W1209PY.TM_Days||W1209PY.TM_Hours||W1209PY.TM_Minutes||W1209PY.TM_Seconds) Timeout=The10seconds; 
 80025b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80025ba:	051b      	lsls	r3, r3, #20
 80025bc:	d10d      	bne.n	80025da <main+0x5e2>
 80025be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80025c0:	03db      	lsls	r3, r3, #15
 80025c2:	0edb      	lsrs	r3, r3, #27
 80025c4:	d109      	bne.n	80025da <main+0x5e2>
 80025c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80025c8:	025b      	lsls	r3, r3, #9
 80025ca:	0e9b      	lsrs	r3, r3, #26
 80025cc:	d105      	bne.n	80025da <main+0x5e2>
 80025ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	0e9b      	lsrs	r3, r3, #26
 80025d4:	d101      	bne.n	80025da <main+0x5e2>
 80025d6:	f001 fbd5 	bl	8003d84 <main+0x1d8c>
 80025da:	4b21      	ldr	r3, [pc, #132]	@ (8002660 <main+0x668>)
 80025dc:	4a26      	ldr	r2, [pc, #152]	@ (8002678 <main+0x680>)
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e04c      	b.n	800267c <main+0x684>
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	50000400 	.word	0x50000400
 80025e8:	50000800 	.word	0x50000800
 80025ec:	ffffcfff 	.word	0xffffcfff
 80025f0:	40012400 	.word	0x40012400
 80025f4:	ffffbfff 	.word	0xffffbfff
 80025f8:	fffff23f 	.word	0xfffff23f
 80025fc:	ffffdfff 	.word	0xffffdfff
 8002600:	ffffefff 	.word	0xffffefff
 8002604:	fffeffff 	.word	0xfffeffff
 8002608:	40012708 	.word	0x40012708
 800260c:	ff3fffff 	.word	0xff3fffff
 8002610:	e000e100 	.word	0xe000e100
 8002614:	200004d0 	.word	0x200004d0
 8002618:	7fffffe8 	.word	0x7fffffe8
 800261c:	200004d4 	.word	0x200004d4
 8002620:	200003b0 	.word	0x200003b0
 8002624:	2000023c 	.word	0x2000023c
 8002628:	200000f4 	.word	0x200000f4
 800262c:	20000490 	.word	0x20000490
 8002630:	200000b0 	.word	0x200000b0
 8002634:	200000a8 	.word	0x200000a8
 8002638:	20000494 	.word	0x20000494
 800263c:	200004ac 	.word	0x200004ac
 8002640:	20000434 	.word	0x20000434
 8002644:	2000042c 	.word	0x2000042c
 8002648:	200003e8 	.word	0x200003e8
 800264c:	2000046c 	.word	0x2000046c
 8002650:	20000470 	.word	0x20000470
 8002654:	2000048c 	.word	0x2000048c
 8002658:	200004a4 	.word	0x200004a4
 800265c:	20000464 	.word	0x20000464
 8002660:	200004b0 	.word	0x200004b0
 8002664:	00004e1f 	.word	0x00004e1f
 8002668:	20000430 	.word	0x20000430
 800266c:	20000094 	.word	0x20000094
 8002670:	2000045c 	.word	0x2000045c
 8002674:	20000460 	.word	0x20000460
 8002678:	00004e20 	.word	0x00004e20
	if((Pressed_BPlus==3)||(Pressed_BMinus==3)||W1209PY.Fixed_Off||W1209PY.Fixed_On){
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d009      	beq.n	8002696 <main+0x69e>
 8002682:	6833      	ldr	r3, [r6, #0]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d006      	beq.n	8002696 <main+0x69e>
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	03db      	lsls	r3, r3, #15
 800268c:	d403      	bmi.n	8002696 <main+0x69e>
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	d400      	bmi.n	8002696 <main+0x69e>
 8002694:	e0a5      	b.n	80027e2 <main+0x7ea>
		if(Pressed_BMinus) W1209PY.Fixed_Off=1; else if(Pressed_BPlus) W1209PY.Fixed_On=1;
 8002696:	6833      	ldr	r3, [r6, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <main+0x6a8>
 800269c:	f001 fb84 	bl	8003da8 <main+0x1db0>
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	6822      	ldr	r2, [r4, #0]
 80026a4:	025b      	lsls	r3, r3, #9
 80026a6:	4313      	orrs	r3, r2
 80026a8:	6023      	str	r3, [r4, #0]
		Pressed_BPlus=Pressed_BMinus=0;
 80026aa:	2400      	movs	r4, #0
 80026ac:	6034      	str	r4, [r6, #0]
		BK_ADC_Ready=ADC_Ready; BK_System_Ready=System_Ready; BK_Roll_Flag=Roll_Flag; BK_Flashing_Flag=Flashing_Flag; BK_Alarm_Flag=Alarm_Flag; BK_Beeper_Flag=Beeper_Flag;
 80026ae:	4edb      	ldr	r6, [pc, #876]	@ (8002a1c <main+0xa24>)
		Pressed_BPlus=Pressed_BMinus=0;
 80026b0:	602c      	str	r4, [r5, #0]
		BK_ADC_Ready=ADC_Ready; BK_System_Ready=System_Ready; BK_Roll_Flag=Roll_Flag; BK_Flashing_Flag=Flashing_Flag; BK_Alarm_Flag=Alarm_Flag; BK_Beeper_Flag=Beeper_Flag;
 80026b2:	6833      	ldr	r3, [r6, #0]
 80026b4:	4ada      	ldr	r2, [pc, #872]	@ (8002a20 <main+0xa28>)
 80026b6:	4ddb      	ldr	r5, [pc, #876]	@ (8002a24 <main+0xa2c>)
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4bdb      	ldr	r3, [pc, #876]	@ (8002a28 <main+0xa30>)
 80026bc:	9200      	str	r2, [sp, #0]
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4bda      	ldr	r3, [pc, #872]	@ (8002a2c <main+0xa34>)
 80026c4:	4fda      	ldr	r7, [pc, #872]	@ (8002a30 <main+0xa38>)
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	4bda      	ldr	r3, [pc, #872]	@ (8002a34 <main+0xa3c>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	9304      	str	r3, [sp, #16]
 80026ce:	4bda      	ldr	r3, [pc, #872]	@ (8002a38 <main+0xa40>)
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	682a      	ldr	r2, [r5, #0]
 80026d4:	4bd9      	ldr	r3, [pc, #868]	@ (8002a3c <main+0xa44>)
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	4bd9      	ldr	r3, [pc, #868]	@ (8002a40 <main+0xa48>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	9305      	str	r3, [sp, #20]
 80026de:	4bd9      	ldr	r3, [pc, #868]	@ (8002a44 <main+0xa4c>)
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4bd8      	ldr	r3, [pc, #864]	@ (8002a48 <main+0xa50>)
 80026e6:	601a      	str	r2, [r3, #0]
		Save_Context(Profiles[Active_Profile]);	
 80026e8:	4ad8      	ldr	r2, [pc, #864]	@ (8002a4c <main+0xa54>)
 80026ea:	4bd9      	ldr	r3, [pc, #868]	@ (8002a50 <main+0xa58>)
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	58d0      	ldr	r0, [r2, r3]
 80026f2:	f7ff facb 	bl	8001c8c <Save_Context>
		ADC_Ready=System_Ready=Roll_Flag=Alarm_Flag=Beeper_Flag=W1209PY.Timer_Enable=W1209PY.Sound=0;
 80026f6:	4bd7      	ldr	r3, [pc, #860]	@ (8002a54 <main+0xa5c>)
 80026f8:	49d7      	ldr	r1, [pc, #860]	@ (8002a58 <main+0xa60>)
 80026fa:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 80026fc:	48d7      	ldr	r0, [pc, #860]	@ (8002a5c <main+0xa64>)
 80026fe:	400a      	ands	r2, r1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	49d6      	ldr	r1, [pc, #856]	@ (8002a60 <main+0xa68>)
 8002706:	400a      	ands	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	9a05      	ldr	r2, [sp, #20]
 800270c:	603c      	str	r4, [r7, #0]
 800270e:	6014      	str	r4, [r2, #0]
 8002710:	9a04      	ldr	r2, [sp, #16]
		Aux=LL_GPIO_IsOutputPinSet(GPIOB, Relay_Out);
 8002712:	49d4      	ldr	r1, [pc, #848]	@ (8002a64 <main+0xa6c>)
		ADC_Ready=System_Ready=Roll_Flag=Alarm_Flag=Beeper_Flag=W1209PY.Timer_Enable=W1209PY.Sound=0;
 8002714:	6014      	str	r4, [r2, #0]
 8002716:	9a01      	ldr	r2, [sp, #4]
 8002718:	6014      	str	r4, [r2, #0]
 800271a:	6034      	str	r4, [r6, #0]
 800271c:	6942      	ldr	r2, [r0, #20]
 800271e:	3401      	adds	r4, #1
 8002720:	0992      	lsrs	r2, r2, #6
 8002722:	4022      	ands	r2, r4
		Flashing_Flag=1;
 8002724:	602c      	str	r4, [r5, #0]
		Aux=LL_GPIO_IsOutputPinSet(GPIOB, Relay_Out);
 8002726:	600a      	str	r2, [r1, #0]
		if(W1209PY.Fixed_Off) {
 8002728:	6819      	ldr	r1, [r3, #0]
 800272a:	4acf      	ldr	r2, [pc, #828]	@ (8002a68 <main+0xa70>)
 800272c:	03c9      	lsls	r1, r1, #15
 800272e:	d506      	bpl.n	800273e <main+0x746>
  WRITE_REG(GPIOx->BRR, PinMask);
 8002730:	2140      	movs	r1, #64	@ 0x40
 8002732:	6281      	str	r1, [r0, #40]	@ 0x28
			p_aux=(unsigned char *)MsgStr[33];
 8002734:	49cd      	ldr	r1, [pc, #820]	@ (8002a6c <main+0xa74>)
 8002736:	6809      	ldr	r1, [r1, #0]
 8002738:	3108      	adds	r1, #8
 800273a:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800273c:	6011      	str	r1, [r2, #0]
		if(W1209PY.Fixed_On)  {
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	d507      	bpl.n	8002754 <main+0x75c>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002744:	2140      	movs	r1, #64	@ 0x40
 8002746:	4bc5      	ldr	r3, [pc, #788]	@ (8002a5c <main+0xa64>)
 8002748:	6199      	str	r1, [r3, #24]
			p_aux=(unsigned char *)MsgStr[34];
 800274a:	4bc8      	ldr	r3, [pc, #800]	@ (8002a6c <main+0xa74>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3388      	adds	r3, #136	@ 0x88
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6013      	str	r3, [r2, #0]
		Put_Buff_On_Display(p_aux,0);
 8002754:	2100      	movs	r1, #0
 8002756:	6810      	ldr	r0, [r2, #0]
 8002758:	f7fd ffe6 	bl	8000728 <Put_Buff_On_Display>
		Anykey=0;
 800275c:	2300      	movs	r3, #0
 800275e:	4cc4      	ldr	r4, [pc, #784]	@ (8002a70 <main+0xa78>)
 8002760:	6023      	str	r3, [r4, #0]
		while(!Anykey);
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0fc      	beq.n	8002762 <main+0x76a>
		ADC_Ready=BK_ADC_Ready; System_Ready=BK_System_Ready; Roll_Flag=BK_Roll_Flag; Flashing_Flag=BK_Flashing_Flag; Alarm_Flag=BK_Alarm_Flag; Beeper_Flag=BK_Beeper_Flag;
 8002768:	9b00      	ldr	r3, [sp, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6033      	str	r3, [r6, #0]
 800276e:	4baf      	ldr	r3, [pc, #700]	@ (8002a2c <main+0xa34>)
		Load_Context(Profiles[Active_Profile]);
 8002770:	4eb6      	ldr	r6, [pc, #728]	@ (8002a4c <main+0xa54>)
		ADC_Ready=BK_ADC_Ready; System_Ready=BK_System_Ready; Roll_Flag=BK_Roll_Flag; Flashing_Flag=BK_Flashing_Flag; Alarm_Flag=BK_Alarm_Flag; Beeper_Flag=BK_Beeper_Flag;
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4bac      	ldr	r3, [pc, #688]	@ (8002a28 <main+0xa30>)
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	4baf      	ldr	r3, [pc, #700]	@ (8002a38 <main+0xa40>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4bad      	ldr	r3, [pc, #692]	@ (8002a34 <main+0xa3c>)
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	4bae      	ldr	r3, [pc, #696]	@ (8002a3c <main+0xa44>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	602b      	str	r3, [r5, #0]
 8002786:	4baf      	ldr	r3, [pc, #700]	@ (8002a44 <main+0xa4c>)
		Load_Context(Profiles[Active_Profile]);
 8002788:	4db1      	ldr	r5, [pc, #708]	@ (8002a50 <main+0xa58>)
		ADC_Ready=BK_ADC_Ready; System_Ready=BK_System_Ready; Roll_Flag=BK_Roll_Flag; Flashing_Flag=BK_Flashing_Flag; Alarm_Flag=BK_Alarm_Flag; Beeper_Flag=BK_Beeper_Flag;
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4bac      	ldr	r3, [pc, #688]	@ (8002a40 <main+0xa48>)
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	4bad      	ldr	r3, [pc, #692]	@ (8002a48 <main+0xa50>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4ba6      	ldr	r3, [pc, #664]	@ (8002a30 <main+0xa38>)
 8002796:	601a      	str	r2, [r3, #0]
		Load_Context(Profiles[Active_Profile]);
 8002798:	6833      	ldr	r3, [r6, #0]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	5958      	ldr	r0, [r3, r5]
 800279e:	f7ff fad7 	bl	8001d50 <Load_Context>
		Anykey=Pressed_BSet=Pressed_BMinus=Pressed_BPlus=W1209PY.Fixed_Off=W1209PY.Fixed_On=0;
 80027a2:	4aac      	ldr	r2, [pc, #688]	@ (8002a54 <main+0xa5c>)
 80027a4:	49b3      	ldr	r1, [pc, #716]	@ (8002a74 <main+0xa7c>)
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	400b      	ands	r3, r1
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	6813      	ldr	r3, [r2, #0]
 80027ae:	49b2      	ldr	r1, [pc, #712]	@ (8002a78 <main+0xa80>)
 80027b0:	400b      	ands	r3, r1
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	2300      	movs	r3, #0
 80027b6:	4ab1      	ldr	r2, [pc, #708]	@ (8002a7c <main+0xa84>)
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4ab1      	ldr	r2, [pc, #708]	@ (8002a80 <main+0xa88>)
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4ab1      	ldr	r2, [pc, #708]	@ (8002a84 <main+0xa8c>)
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	6023      	str	r3, [r4, #0]
		Save_Context(Profiles[Active_Profile]);	
 80027c4:	6833      	ldr	r3, [r6, #0]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	5958      	ldr	r0, [r3, r5]
 80027ca:	f7ff fa5f 	bl	8001c8c <Save_Context>
		LL_GPIO_SetOutputPin(GPIOB, Relay_Out<<(16*(1-Aux)));
 80027ce:	2201      	movs	r2, #1
 80027d0:	4ba4      	ldr	r3, [pc, #656]	@ (8002a64 <main+0xa6c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	323f      	adds	r2, #63	@ 0x3f
 80027da:	409a      	lsls	r2, r3
 80027dc:	0013      	movs	r3, r2
 80027de:	4a9f      	ldr	r2, [pc, #636]	@ (8002a5c <main+0xa64>)
 80027e0:	6193      	str	r3, [r2, #24]
	if(Pressed_BSet==1) {
 80027e2:	4ba8      	ldr	r3, [pc, #672]	@ (8002a84 <main+0xa8c>)
 80027e4:	681c      	ldr	r4, [r3, #0]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2c01      	cmp	r4, #1
 80027ea:	d16a      	bne.n	80028c2 <main+0x8ca>
							MsgBox((unsigned char *)MsgStr[2],0,0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	4b9f      	ldr	r3, [pc, #636]	@ (8002a6c <main+0xa74>)
 80027f0:	0011      	movs	r1, r2
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6898      	ldr	r0, [r3, #8]
 80027f6:	f7fe fba9 	bl	8000f4c <MsgBox>
							Pressed_BSet=0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	9a00      	ldr	r2, [sp, #0]
							Flashing_Flag=1;
 80027fe:	4d89      	ldr	r5, [pc, #548]	@ (8002a24 <main+0xa2c>)
							Pressed_BSet=0;
 8002800:	6013      	str	r3, [r2, #0]
							Flashing_Flag=1;
 8002802:	602c      	str	r4, [r5, #0]
							Aux=(W1209PY.fahrenheit)?To_fahrenheit(W1209PY.Target):To_Celsius(W1209PY.Target);
 8002804:	4c93      	ldr	r4, [pc, #588]	@ (8002a54 <main+0xa5c>)
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	069b      	lsls	r3, r3, #26
 800280a:	d401      	bmi.n	8002810 <main+0x818>
 800280c:	f001 fad6 	bl	8003dbc <main+0x1dc4>
 8002810:	2012      	movs	r0, #18
 8002812:	6863      	ldr	r3, [r4, #4]
 8002814:	210a      	movs	r1, #10
 8002816:	4358      	muls	r0, r3
 8002818:	4b9b      	ldr	r3, [pc, #620]	@ (8002a88 <main+0xa90>)
 800281a:	18c0      	adds	r0, r0, r3
 800281c:	f7fd fcee 	bl	80001fc <__divsi3>
 8002820:	23c8      	movs	r3, #200	@ 0xc8
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	18c1      	adds	r1, r0, r3
 8002826:	4b8f      	ldr	r3, [pc, #572]	@ (8002a64 <main+0xa6c>)
							p_aux=Display1;
 8002828:	4e98      	ldr	r6, [pc, #608]	@ (8002a8c <main+0xa94>)
							Aux=(W1209PY.fahrenheit)?To_fahrenheit(W1209PY.Target):To_Celsius(W1209PY.Target);
 800282a:	6019      	str	r1, [r3, #0]
							p_aux=Display1;
 800282c:	6830      	ldr	r0, [r6, #0]
 800282e:	4b8e      	ldr	r3, [pc, #568]	@ (8002a68 <main+0xa70>)
							itoa(p_aux,Aux,2);
 8002830:	2202      	movs	r2, #2
							p_aux=Display1;
 8002832:	6018      	str	r0, [r3, #0]
 8002834:	9301      	str	r3, [sp, #4]
							itoa(p_aux,Aux,2);
 8002836:	f7fe f8fb 	bl	8000a30 <itoa>
							Put_Buff_On_Display(Display1,0);
 800283a:	2100      	movs	r1, #0
 800283c:	6830      	ldr	r0, [r6, #0]
 800283e:	f7fd ff73 	bl	8000728 <Put_Buff_On_Display>
							Timeout=0;
 8002842:	2200      	movs	r2, #0
 8002844:	4b92      	ldr	r3, [pc, #584]	@ (8002a90 <main+0xa98>)
 8002846:	601a      	str	r2, [r3, #0]
							while(!Pressed_BSet&&!Tout()){					
 8002848:	9b00      	ldr	r3, [sp, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <main+0x866>
 8002850:	4b8f      	ldr	r3, [pc, #572]	@ (8002a90 <main+0xa98>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b8f      	ldr	r3, [pc, #572]	@ (8002a94 <main+0xa9c>)
 8002856:	429a      	cmp	r2, r3
 8002858:	dc01      	bgt.n	800285e <main+0x866>
 800285a:	f001 fab4 	bl	8003dc6 <main+0x1dce>
							W1209PY.Target=(W1209PY.fahrenheit)?From_fahrenheit(Aux):From_Celsius(Aux);
 800285e:	4b81      	ldr	r3, [pc, #516]	@ (8002a64 <main+0xa6c>)
 8002860:	4e8d      	ldr	r6, [pc, #564]	@ (8002a98 <main+0xaa0>)
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	6822      	ldr	r2, [r4, #0]
 8002866:	1983      	adds	r3, r0, r6
 8002868:	0692      	lsls	r2, r2, #26
 800286a:	d507      	bpl.n	800287c <main+0x884>
 800286c:	4b8b      	ldr	r3, [pc, #556]	@ (8002a9c <main+0xaa4>)
 800286e:	2112      	movs	r1, #18
 8002870:	18c3      	adds	r3, r0, r3
 8002872:	200a      	movs	r0, #10
 8002874:	4358      	muls	r0, r3
 8002876:	f7fd fcc1 	bl	80001fc <__divsi3>
 800287a:	1983      	adds	r3, r0, r6
 800287c:	6063      	str	r3, [r4, #4]
							Flashing_Flag=Pressed_BSet=0;	
 800287e:	2300      	movs	r3, #0
 8002880:	9a00      	ldr	r2, [sp, #0]
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	602b      	str	r3, [r5, #0]
							if(W1209PY.Temp_Roll) {p_roll=Display; Cleaning=1;}	
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	075b      	lsls	r3, r3, #29
 800288a:	d505      	bpl.n	8002898 <main+0x8a0>
 800288c:	4b84      	ldr	r3, [pc, #528]	@ (8002aa0 <main+0xaa8>)
 800288e:	4a85      	ldr	r2, [pc, #532]	@ (8002aa4 <main+0xaac>)
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	2201      	movs	r2, #1
 8002894:	4b84      	ldr	r3, [pc, #528]	@ (8002aa8 <main+0xab0>)
 8002896:	601a      	str	r2, [r3, #0]
							Alarm_Flag=0;
 8002898:	2200      	movs	r2, #0
 800289a:	4b69      	ldr	r3, [pc, #420]	@ (8002a40 <main+0xa48>)
 800289c:	601a      	str	r2, [r3, #0]
							Prepare_Boundaries();		
 800289e:	f7ff f825 	bl	80018ec <Prepare_Boundaries>
							Calculate_CRC((struct Params *)&NTC,(struct Params2 *)&W1209PY, Set_Checksum);
 80028a2:	2201      	movs	r2, #1
 80028a4:	0021      	movs	r1, r4
 80028a6:	4881      	ldr	r0, [pc, #516]	@ (8002aac <main+0xab4>)
 80028a8:	f7ff f856 	bl	8001958 <Calculate_CRC>
							if(Are_Settings_Changed()) Save_Context(Profiles[Active_Profile]);						
 80028ac:	f7ff faaa 	bl	8001e04 <Are_Settings_Changed>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d006      	beq.n	80028c2 <main+0x8ca>
 80028b4:	4a65      	ldr	r2, [pc, #404]	@ (8002a4c <main+0xa54>)
 80028b6:	4b66      	ldr	r3, [pc, #408]	@ (8002a50 <main+0xa58>)
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	58d0      	ldr	r0, [r2, r3]
 80028be:	f7ff f9e5 	bl	8001c8c <Save_Context>
	if(Calibration_Flag){
 80028c2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab0 <main+0xab8>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2a00      	cmp	r2, #0
 80028c8:	d100      	bne.n	80028cc <main+0x8d4>
 80028ca:	e58f      	b.n	80023ec <main+0x3f4>
			Calibration_Flag=0;
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 80028d0:	2302      	movs	r3, #2
 80028d2:	4978      	ldr	r1, [pc, #480]	@ (8002ab4 <main+0xabc>)
 80028d4:	4d78      	ldr	r5, [pc, #480]	@ (8002ab8 <main+0xac0>)
 80028d6:	688a      	ldr	r2, [r1, #8]
 80028d8:	000c      	movs	r4, r1
 80028da:	402a      	ands	r2, r5
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]
			ADCCalibrate();
 80028e0:	f7fd ff50 	bl	8000784 <ADCCalibrate>
  MODIFY_REG(ADCx->CR,ADC_CR_BITS_PROPERTY_RS,ADC_CR_ADEN);
 80028e4:	2101      	movs	r1, #1
 80028e6:	68a3      	ldr	r3, [r4, #8]
 80028e8:	402b      	ands	r3, r5
 80028ea:	430b      	orrs	r3, r1
 80028ec:	60a3      	str	r3, [r4, #8]
}
 80028ee:	e57d      	b.n	80023ec <main+0x3f4>
      Default_Params(); 
 80028f0:	f7ff f850 	bl	8001994 <Default_Params>
	  MsgBox((unsigned char *)MsgStr[69],0,0);		  
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	002a      	movs	r2, r5
 80028f8:	33fc      	adds	r3, #252	@ 0xfc
 80028fa:	0029      	movs	r1, r5
 80028fc:	6998      	ldr	r0, [r3, #24]
 80028fe:	f7fe fb25 	bl	8000f4c <MsgBox>
	  Aux=1;
 8002902:	2301      	movs	r3, #1
	  Aux2=0;
 8002904:	2700      	movs	r7, #0
	  Aux=1;
 8002906:	4d57      	ldr	r5, [pc, #348]	@ (8002a64 <main+0xa6c>)
	  Aux2=0;
 8002908:	4e6c      	ldr	r6, [pc, #432]	@ (8002abc <main+0xac4>)
	  Aux=1;
 800290a:	602b      	str	r3, [r5, #0]
	  MsgBox((unsigned char *)MsgStr[70],0,0);		  	  
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	003a      	movs	r2, r7
 8002910:	33fc      	adds	r3, #252	@ 0xfc
 8002912:	0039      	movs	r1, r7
 8002914:	69d8      	ldr	r0, [r3, #28]
	  Aux2=0;
 8002916:	6037      	str	r7, [r6, #0]
	  MsgBox((unsigned char *)MsgStr[70],0,0);		  	  
 8002918:	f7fe fb18 	bl	8000f4c <MsgBox>
	  Edit_Value_Simple(&Aux,5,1,0);
 800291c:	003b      	movs	r3, r7
 800291e:	2105      	movs	r1, #5
 8002920:	2201      	movs	r2, #1
 8002922:	0028      	movs	r0, r5
 8002924:	f7fe ff34 	bl	8001790 <Edit_Value_Simple>
	  if(Profile_Statuses[Aux-1]) {
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	4f65      	ldr	r7, [pc, #404]	@ (8002ac0 <main+0xac8>)
 800292c:	3b01      	subs	r3, #1
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	59d9      	ldr	r1, [r3, r7]
 8002932:	2900      	cmp	r1, #0
 8002934:	d00d      	beq.n	8002952 <main+0x95a>
		  Aux2=1;
 8002936:	2301      	movs	r3, #1
 8002938:	6033      	str	r3, [r6, #0]
	Active_Profile=Aux-1;
 800293a:	682b      	ldr	r3, [r5, #0]
 800293c:	4a43      	ldr	r2, [pc, #268]	@ (8002a4c <main+0xa54>)
 800293e:	3b01      	subs	r3, #1
 8002940:	6013      	str	r3, [r2, #0]
	Profile_Statuses[Active_Profile]=PROFILE_ACTIVE;
 8002942:	2201      	movs	r2, #1
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	50fa      	str	r2, [r7, r3]
	Save_Context(Profiles[Active_Profile]);
 8002948:	4a41      	ldr	r2, [pc, #260]	@ (8002a50 <main+0xa58>)
 800294a:	5898      	ldr	r0, [r3, r2]
 800294c:	f7ff f99e 	bl	8001c8c <Save_Context>
 8002950:	e531      	b.n	80023b6 <main+0x3be>
			MsgBox((unsigned char *)MsgStr[71],0,0);		  	  
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	000a      	movs	r2, r1
 8002956:	33fc      	adds	r3, #252	@ 0xfc
 8002958:	6a18      	ldr	r0, [r3, #32]
 800295a:	f7fe faf7 	bl	8000f4c <MsgBox>
			while((Pressed_BSet!=1)&&!Tout()) Aux2=DisplayOptions(31,Aux2,2);
 800295e:	4b49      	ldr	r3, [pc, #292]	@ (8002a84 <main+0xa8c>)
 8002960:	6831      	ldr	r1, [r6, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	484a      	ldr	r0, [pc, #296]	@ (8002a90 <main+0xa98>)
 8002966:	2a01      	cmp	r2, #1
 8002968:	d004      	beq.n	8002974 <main+0x97c>
 800296a:	6802      	ldr	r2, [r0, #0]
 800296c:	4694      	mov	ip, r2
 800296e:	4a49      	ldr	r2, [pc, #292]	@ (8002a94 <main+0xa9c>)
 8002970:	4594      	cmp	ip, r2
 8002972:	dd05      	ble.n	8002980 <main+0x988>
			Pressed_BSet=Timeout=0;
 8002974:	2200      	movs	r2, #0
 8002976:	6002      	str	r2, [r0, #0]
 8002978:	601a      	str	r2, [r3, #0]
	}while(!Aux2);
 800297a:	4291      	cmp	r1, r2
 800297c:	d0c1      	beq.n	8002902 <main+0x90a>
 800297e:	e7dc      	b.n	800293a <main+0x942>
			while((Pressed_BSet!=1)&&!Tout()) Aux2=DisplayOptions(31,Aux2,2);
 8002980:	2202      	movs	r2, #2
 8002982:	201f      	movs	r0, #31
 8002984:	f7fe fc22 	bl	80011cc <DisplayOptions>
 8002988:	6030      	str	r0, [r6, #0]
 800298a:	e7e8      	b.n	800295e <main+0x966>
					if(W1209PY.Sensor_State) for(p_roll=Display;W1209PY.Sensor_State;){
 800298c:	4b44      	ldr	r3, [pc, #272]	@ (8002aa0 <main+0xaa8>)
 800298e:	4a45      	ldr	r2, [pc, #276]	@ (8002aa4 <main+0xaac>)
						Cleaning=1;
 8002990:	601a      	str	r2, [r3, #0]
					if(W1209PY.Sensor_State) for(p_roll=Display;W1209PY.Sensor_State;){
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	04db      	lsls	r3, r3, #19
 8002996:	0f9b      	lsrs	r3, r3, #30
 8002998:	d100      	bne.n	800299c <main+0x9a4>
 800299a:	e532      	b.n	8002402 <main+0x40a>
 800299c:	2200      	movs	r2, #0
						strcpy(Display1, MsgStr[66+W1209PY.Sensor_State]);
 800299e:	4933      	ldr	r1, [pc, #204]	@ (8002a6c <main+0xa74>)
 80029a0:	4694      	mov	ip, r2
 80029a2:	4f3a      	ldr	r7, [pc, #232]	@ (8002a8c <main+0xa94>)
 80029a4:	e00c      	b.n	80029c0 <main+0x9c8>
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	04db      	lsls	r3, r3, #19
 80029aa:	0f9b      	lsrs	r3, r3, #30
 80029ac:	3342      	adds	r3, #66	@ 0x42
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	581b      	ldr	r3, [r3, r0]
 80029b2:	5c98      	ldrb	r0, [r3, r2]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	5498      	strb	r0, [r3, r2]
 80029b8:	4662      	mov	r2, ip
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	559a      	strb	r2, [r3, r6]
 80029be:	0032      	movs	r2, r6
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	6808      	ldr	r0, [r1, #0]
 80029c4:	04db      	lsls	r3, r3, #19
 80029c6:	0f9b      	lsrs	r3, r3, #30
 80029c8:	3342      	adds	r3, #66	@ 0x42
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	581b      	ldr	r3, [r3, r0]
 80029ce:	1c56      	adds	r6, r2, #1
 80029d0:	5c9b      	ldrb	r3, [r3, r2]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1e7      	bne.n	80029a6 <main+0x9ae>
						Put_Buff_On_Display(p_roll++,0);
 80029d6:	4e32      	ldr	r6, [pc, #200]	@ (8002aa0 <main+0xaa8>)
 80029d8:	0019      	movs	r1, r3
 80029da:	6830      	ldr	r0, [r6, #0]
 80029dc:	1c42      	adds	r2, r0, #1
 80029de:	6032      	str	r2, [r6, #0]
 80029e0:	f7fd fea2 	bl	8000728 <Put_Buff_On_Display>
						if(!(*p_roll)) p_roll=Display;
 80029e4:	6833      	ldr	r3, [r6, #0]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <main+0x9f8>
 80029ec:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa4 <main+0xaac>)
 80029ee:	6033      	str	r3, [r6, #0]
						if(System_Ready){
 80029f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <main+0xa30>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d009      	beq.n	8002a0c <main+0xa14>
								System_Ready=0;
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80029fc:	4b17      	ldr	r3, [pc, #92]	@ (8002a5c <main+0xa64>)
 80029fe:	3240      	adds	r2, #64	@ 0x40
 8002a00:	629a      	str	r2, [r3, #40]	@ 0x28
								p_roll=Display;
 8002a02:	4b28      	ldr	r3, [pc, #160]	@ (8002aa4 <main+0xaac>)
								Flashing_Flag=1;
 8002a04:	3a3f      	subs	r2, #63	@ 0x3f
								p_roll=Display;
 8002a06:	6033      	str	r3, [r6, #0]
								Flashing_Flag=1;
 8002a08:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <main+0xa2c>)
 8002a0a:	601a      	str	r2, [r3, #0]
						for(Roll_Flag=0;!Roll_Flag;);
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	602b      	str	r3, [r5, #0]
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0fc      	beq.n	8002a10 <main+0xa18>
						Cleaning=1;
 8002a16:	2201      	movs	r2, #1
 8002a18:	4b23      	ldr	r3, [pc, #140]	@ (8002aa8 <main+0xab0>)
 8002a1a:	e7b9      	b.n	8002990 <main+0x998>
 8002a1c:	20000490 	.word	0x20000490
 8002a20:	20000488 	.word	0x20000488
 8002a24:	200004a4 	.word	0x200004a4
 8002a28:	2000048c 	.word	0x2000048c
 8002a2c:	20000484 	.word	0x20000484
 8002a30:	200004a8 	.word	0x200004a8
 8002a34:	200004ac 	.word	0x200004ac
 8002a38:	20000480 	.word	0x20000480
 8002a3c:	2000047c 	.word	0x2000047c
 8002a40:	2000042c 	.word	0x2000042c
 8002a44:	20000478 	.word	0x20000478
 8002a48:	20000474 	.word	0x20000474
 8002a4c:	20000430 	.word	0x20000430
 8002a50:	20000094 	.word	0x20000094
 8002a54:	200003b0 	.word	0x200003b0
 8002a58:	ffffbfff 	.word	0xffffbfff
 8002a5c:	50000400 	.word	0x50000400
 8002a60:	fffffbff 	.word	0xfffffbff
 8002a64:	20000444 	.word	0x20000444
 8002a68:	20000448 	.word	0x20000448
 8002a6c:	200004d4 	.word	0x200004d4
 8002a70:	2000044c 	.word	0x2000044c
 8002a74:	ffff7fff 	.word	0xffff7fff
 8002a78:	fffeffff 	.word	0xfffeffff
 8002a7c:	2000045c 	.word	0x2000045c
 8002a80:	20000460 	.word	0x20000460
 8002a84:	20000464 	.word	0x20000464
 8002a88:	fff87f6a 	.word	0xfff87f6a
 8002a8c:	200000ac 	.word	0x200000ac
 8002a90:	200004b0 	.word	0x200004b0
 8002a94:	00004e1f 	.word	0x00004e1f
 8002a98:	00006ab3 	.word	0x00006ab3
 8002a9c:	fffff380 	.word	0xfffff380
 8002aa0:	200000a8 	.word	0x200000a8
 8002aa4:	200000b0 	.word	0x200000b0
 8002aa8:	20000434 	.word	0x20000434
 8002aac:	200003e8 	.word	0x200003e8
 8002ab0:	20000428 	.word	0x20000428
 8002ab4:	40012400 	.word	0x40012400
 8002ab8:	7fffffe8 	.word	0x7fffffe8
 8002abc:	20000440 	.word	0x20000440
 8002ac0:	20000080 	.word	0x20000080
					if(W1209PY.Timer_Enable&&Tout()){
 8002ac4:	4ac2      	ldr	r2, [pc, #776]	@ (8002dd0 <main+0xdd8>)
 8002ac6:	6811      	ldr	r1, [r2, #0]
 8002ac8:	9201      	str	r2, [sp, #4]
 8002aca:	4ac2      	ldr	r2, [pc, #776]	@ (8002dd4 <main+0xddc>)
 8002acc:	4291      	cmp	r1, r2
 8002ace:	dc00      	bgt.n	8002ad2 <main+0xada>
 8002ad0:	e49d      	b.n	800240e <main+0x416>
						Timeout=0;
 8002ad2:	9a01      	ldr	r2, [sp, #4]
 8002ad4:	6013      	str	r3, [r2, #0]
						if(W1209PY.TM_Seconds||W1209PY.TM_Minutes||W1209PY.TM_Days||W1209PY.TM_Hours) {
 8002ad6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
						} else MsgBox((unsigned char*)MsgStr[61],0,0);
 8002ad8:	4abf      	ldr	r2, [pc, #764]	@ (8002dd8 <main+0xde0>)
						if(W1209PY.TM_Seconds||W1209PY.TM_Minutes||W1209PY.TM_Days||W1209PY.TM_Hours) {
 8002ada:	00c9      	lsls	r1, r1, #3
						} else MsgBox((unsigned char*)MsgStr[61],0,0);
 8002adc:	6812      	ldr	r2, [r2, #0]
						if(W1209PY.TM_Seconds||W1209PY.TM_Minutes||W1209PY.TM_Days||W1209PY.TM_Hours) {
 8002ade:	0e89      	lsrs	r1, r1, #26
 8002ae0:	d105      	bne.n	8002aee <main+0xaf6>
 8002ae2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002ae4:	025b      	lsls	r3, r3, #9
 8002ae6:	0e9b      	lsrs	r3, r3, #26
 8002ae8:	d100      	bne.n	8002aec <main+0xaf4>
 8002aea:	e128      	b.n	8002d3e <main+0xd46>
 8002aec:	000b      	movs	r3, r1
							strcpy(Display1,MsgStr[58]);		
 8002aee:	2000      	movs	r0, #0
								itoa(Display1+str2len(Display1), W1209PY.TM_Days,0);
 8002af0:	4aba      	ldr	r2, [pc, #744]	@ (8002ddc <main+0xde4>)
							strcpy(Display1,MsgStr[58]);		
 8002af2:	49b9      	ldr	r1, [pc, #740]	@ (8002dd8 <main+0xde0>)
								itoa(Display1+str2len(Display1), W1209PY.TM_Days,0);
 8002af4:	9200      	str	r2, [sp, #0]
							strcpy(Display1,MsgStr[58]);		
 8002af6:	680a      	ldr	r2, [r1, #0]
 8002af8:	32e8      	adds	r2, #232	@ 0xe8
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	5cd5      	ldrb	r5, [r2, r3]
								itoa(Display1+str2len(Display1), W1209PY.TM_Days,0);
 8002afe:	9a00      	ldr	r2, [sp, #0]
 8002b00:	6816      	ldr	r6, [r2, #0]
							strcpy(Display1,MsgStr[58]);		
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	2d00      	cmp	r5, #0
 8002b06:	d000      	beq.n	8002b0a <main+0xb12>
 8002b08:	e125      	b.n	8002d56 <main+0xd5e>
							if(W1209PY.TM_Days){								
 8002b0a:	6b27      	ldr	r7, [r4, #48]	@ 0x30
								itoa(Display1+str2len(Display1), W1209PY.TM_Days,0);
 8002b0c:	0030      	movs	r0, r6
							if(W1209PY.TM_Days){								
 8002b0e:	053f      	lsls	r7, r7, #20
 8002b10:	0d3f      	lsrs	r7, r7, #20
								itoa(Display1+str2len(Display1), W1209PY.TM_Days,0);
 8002b12:	f7fd ffcf 	bl	8000ab4 <str2len>
							if(W1209PY.TM_Days){								
 8002b16:	2f00      	cmp	r7, #0
 8002b18:	d035      	beq.n	8002b86 <main+0xb8e>
								itoa(Display1+str2len(Display1), W1209PY.TM_Days,0);
 8002b1a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002b1c:	002a      	movs	r2, r5
 8002b1e:	0509      	lsls	r1, r1, #20
 8002b20:	0d09      	lsrs	r1, r1, #20
 8002b22:	1830      	adds	r0, r6, r0
 8002b24:	f7fd ff84 	bl	8000a30 <itoa>
								p_aux=Display1+str2len(Display1);
 8002b28:	9b00      	ldr	r3, [sp, #0]
 8002b2a:	681e      	ldr	r6, [r3, #0]
 8002b2c:	0030      	movs	r0, r6
 8002b2e:	f7fd ffc1 	bl	8000ab4 <str2len>
								strcpy(p_aux," ");
 8002b32:	2320      	movs	r3, #32
								p_aux=Display1+str2len(Display1);
 8002b34:	1830      	adds	r0, r6, r0
 8002b36:	4eaa      	ldr	r6, [pc, #680]	@ (8002de0 <main+0xde8>)
 8002b38:	6030      	str	r0, [r6, #0]
								strcpy(p_aux," ");
 8002b3a:	7003      	strb	r3, [r0, #0]
 8002b3c:	6833      	ldr	r3, [r6, #0]
 8002b3e:	705d      	strb	r5, [r3, #1]
								p_aux=Display1+str2len(Display1);
 8002b40:	9b00      	ldr	r3, [sp, #0]
 8002b42:	681f      	ldr	r7, [r3, #0]
 8002b44:	0038      	movs	r0, r7
 8002b46:	f7fd ffb5 	bl	8000ab4 <str2len>
								strcpy(p_aux,MsgStr[59]);
 8002b4a:	0029      	movs	r1, r5
								p_aux=Display1+str2len(Display1);
 8002b4c:	183f      	adds	r7, r7, r0
								strcpy(p_aux,MsgStr[59]);
 8002b4e:	4aa2      	ldr	r2, [pc, #648]	@ (8002dd8 <main+0xde0>)
								p_aux=Display1+str2len(Display1);
 8002b50:	6037      	str	r7, [r6, #0]
								strcpy(p_aux,MsgStr[59]);
 8002b52:	6813      	ldr	r3, [r2, #0]
 8002b54:	33ec      	adds	r3, #236	@ 0xec
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	5d5f      	ldrb	r7, [r3, r5]
 8002b5a:	1c6b      	adds	r3, r5, #1
 8002b5c:	2f00      	cmp	r7, #0
 8002b5e:	d000      	beq.n	8002b62 <main+0xb6a>
 8002b60:	e0ff      	b.n	8002d62 <main+0xd6a>
								p_aux=Display1+str2len(Display1)-2;
 8002b62:	4b9e      	ldr	r3, [pc, #632]	@ (8002ddc <main+0xde4>)
 8002b64:	681d      	ldr	r5, [r3, #0]
 8002b66:	0028      	movs	r0, r5
 8002b68:	f7fd ffa4 	bl	8000ab4 <str2len>
 8002b6c:	4a9c      	ldr	r2, [pc, #624]	@ (8002de0 <main+0xde8>)
 8002b6e:	3802      	subs	r0, #2
 8002b70:	1828      	adds	r0, r5, r0
 8002b72:	6010      	str	r0, [r2, #0]
								if(W1209PY.TM_Days==1) {strcpy(p_aux," ")};
 8002b74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002b76:	051b      	lsls	r3, r3, #20
 8002b78:	0d1b      	lsrs	r3, r3, #20
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d103      	bne.n	8002b86 <main+0xb8e>
 8002b7e:	331f      	adds	r3, #31
 8002b80:	7003      	strb	r3, [r0, #0]
 8002b82:	6813      	ldr	r3, [r2, #0]
 8002b84:	705f      	strb	r7, [r3, #1]
							if(W1209PY.TM_Days||W1209PY.TM_Hours){
 8002b86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002b88:	051b      	lsls	r3, r3, #20
 8002b8a:	d103      	bne.n	8002b94 <main+0xb9c>
 8002b8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002b8e:	03db      	lsls	r3, r3, #15
 8002b90:	0edb      	lsrs	r3, r3, #27
 8002b92:	d03b      	beq.n	8002c0c <main+0xc14>
								itoa(Display1+str2len(Display1), W1209PY.TM_Hours,0);
 8002b94:	9b00      	ldr	r3, [sp, #0]
 8002b96:	681d      	ldr	r5, [r3, #0]
 8002b98:	0028      	movs	r0, r5
 8002b9a:	f7fd ff8b 	bl	8000ab4 <str2len>
 8002b9e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	03c9      	lsls	r1, r1, #15
 8002ba4:	0ec9      	lsrs	r1, r1, #27
 8002ba6:	1828      	adds	r0, r5, r0
 8002ba8:	f7fd ff42 	bl	8000a30 <itoa>
								p_aux=Display1+str2len(Display1);
 8002bac:	9b00      	ldr	r3, [sp, #0]
 8002bae:	681d      	ldr	r5, [r3, #0]
 8002bb0:	0028      	movs	r0, r5
 8002bb2:	f7fd ff7f 	bl	8000ab4 <str2len>
								strcpy(p_aux," ");
 8002bb6:	2320      	movs	r3, #32
								p_aux=Display1+str2len(Display1);
 8002bb8:	4e89      	ldr	r6, [pc, #548]	@ (8002de0 <main+0xde8>)
 8002bba:	182d      	adds	r5, r5, r0
 8002bbc:	6035      	str	r5, [r6, #0]
								strcpy(p_aux," ");
 8002bbe:	702b      	strb	r3, [r5, #0]
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	6833      	ldr	r3, [r6, #0]
 8002bc4:	705d      	strb	r5, [r3, #1]
								p_aux=Display1+str2len(Display1);
 8002bc6:	9b00      	ldr	r3, [sp, #0]
 8002bc8:	681f      	ldr	r7, [r3, #0]
 8002bca:	0038      	movs	r0, r7
 8002bcc:	f7fd ff72 	bl	8000ab4 <str2len>
								strcpy(p_aux,MsgStr[60]);
 8002bd0:	0029      	movs	r1, r5
								p_aux=Display1+str2len(Display1);
 8002bd2:	183f      	adds	r7, r7, r0
								strcpy(p_aux,MsgStr[60]);
 8002bd4:	4a80      	ldr	r2, [pc, #512]	@ (8002dd8 <main+0xde0>)
								p_aux=Display1+str2len(Display1);
 8002bd6:	6037      	str	r7, [r6, #0]
								strcpy(p_aux,MsgStr[60]);
 8002bd8:	6813      	ldr	r3, [r2, #0]
 8002bda:	33f0      	adds	r3, #240	@ 0xf0
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	5d5f      	ldrb	r7, [r3, r5]
 8002be0:	1c6b      	adds	r3, r5, #1
 8002be2:	2f00      	cmp	r7, #0
 8002be4:	d000      	beq.n	8002be8 <main+0xbf0>
 8002be6:	e0c2      	b.n	8002d6e <main+0xd76>
								p_aux=Display1+str2len(Display1)-2;
 8002be8:	4b7c      	ldr	r3, [pc, #496]	@ (8002ddc <main+0xde4>)
 8002bea:	681d      	ldr	r5, [r3, #0]
 8002bec:	0028      	movs	r0, r5
 8002bee:	f7fd ff61 	bl	8000ab4 <str2len>
 8002bf2:	4a7b      	ldr	r2, [pc, #492]	@ (8002de0 <main+0xde8>)
 8002bf4:	3802      	subs	r0, #2
 8002bf6:	1828      	adds	r0, r5, r0
 8002bf8:	6010      	str	r0, [r2, #0]
								if(W1209PY.TM_Hours==1) {strcpy(p_aux," ")};
 8002bfa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002bfc:	03db      	lsls	r3, r3, #15
 8002bfe:	0edb      	lsrs	r3, r3, #27
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d103      	bne.n	8002c0c <main+0xc14>
 8002c04:	331f      	adds	r3, #31
 8002c06:	7003      	strb	r3, [r0, #0]
 8002c08:	6813      	ldr	r3, [r2, #0]
 8002c0a:	705f      	strb	r7, [r3, #1]
							if(W1209PY.TM_Days||W1209PY.TM_Hours||W1209PY.TM_Minutes){
 8002c0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002c0e:	051b      	lsls	r3, r3, #20
 8002c10:	d107      	bne.n	8002c22 <main+0xc2a>
 8002c12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002c14:	03db      	lsls	r3, r3, #15
 8002c16:	0edb      	lsrs	r3, r3, #27
 8002c18:	d103      	bne.n	8002c22 <main+0xc2a>
 8002c1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002c1c:	025b      	lsls	r3, r3, #9
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	d03b      	beq.n	8002c9a <main+0xca2>
								itoa(Display1+str2len(Display1), W1209PY.TM_Minutes,0);
 8002c22:	9b00      	ldr	r3, [sp, #0]
 8002c24:	681d      	ldr	r5, [r3, #0]
 8002c26:	0028      	movs	r0, r5
 8002c28:	f7fd ff44 	bl	8000ab4 <str2len>
 8002c2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002c2e:	2200      	movs	r2, #0
 8002c30:	0249      	lsls	r1, r1, #9
 8002c32:	0e89      	lsrs	r1, r1, #26
 8002c34:	1828      	adds	r0, r5, r0
 8002c36:	f7fd fefb 	bl	8000a30 <itoa>
								p_aux=Display1+str2len(Display1);
 8002c3a:	9b00      	ldr	r3, [sp, #0]
 8002c3c:	681d      	ldr	r5, [r3, #0]
 8002c3e:	0028      	movs	r0, r5
 8002c40:	f7fd ff38 	bl	8000ab4 <str2len>
								strcpy(p_aux," ");
 8002c44:	2320      	movs	r3, #32
								p_aux=Display1+str2len(Display1);
 8002c46:	4e66      	ldr	r6, [pc, #408]	@ (8002de0 <main+0xde8>)
 8002c48:	182d      	adds	r5, r5, r0
 8002c4a:	6035      	str	r5, [r6, #0]
								strcpy(p_aux," ");
 8002c4c:	702b      	strb	r3, [r5, #0]
 8002c4e:	2500      	movs	r5, #0
 8002c50:	6833      	ldr	r3, [r6, #0]
 8002c52:	705d      	strb	r5, [r3, #1]
								p_aux=Display1+str2len(Display1);
 8002c54:	9b00      	ldr	r3, [sp, #0]
 8002c56:	681f      	ldr	r7, [r3, #0]
 8002c58:	0038      	movs	r0, r7
 8002c5a:	f7fd ff2b 	bl	8000ab4 <str2len>
								strcpy(p_aux,MsgStr[45]);
 8002c5e:	0029      	movs	r1, r5
								p_aux=Display1+str2len(Display1);
 8002c60:	183f      	adds	r7, r7, r0
								strcpy(p_aux,MsgStr[45]);
 8002c62:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd8 <main+0xde0>)
								p_aux=Display1+str2len(Display1);
 8002c64:	6037      	str	r7, [r6, #0]
								strcpy(p_aux,MsgStr[45]);
 8002c66:	6813      	ldr	r3, [r2, #0]
 8002c68:	33b4      	adds	r3, #180	@ 0xb4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	5d5f      	ldrb	r7, [r3, r5]
 8002c6e:	1c6b      	adds	r3, r5, #1
 8002c70:	2f00      	cmp	r7, #0
 8002c72:	d000      	beq.n	8002c76 <main+0xc7e>
 8002c74:	e081      	b.n	8002d7a <main+0xd82>
								p_aux=Display1+str2len(Display1)-2;
 8002c76:	4b59      	ldr	r3, [pc, #356]	@ (8002ddc <main+0xde4>)
 8002c78:	681d      	ldr	r5, [r3, #0]
 8002c7a:	0028      	movs	r0, r5
 8002c7c:	f7fd ff1a 	bl	8000ab4 <str2len>
 8002c80:	4a57      	ldr	r2, [pc, #348]	@ (8002de0 <main+0xde8>)
 8002c82:	3802      	subs	r0, #2
 8002c84:	1828      	adds	r0, r5, r0
 8002c86:	6010      	str	r0, [r2, #0]
								if(W1209PY.TM_Minutes==1) {strcpy(p_aux," ")};
 8002c88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002c8a:	025b      	lsls	r3, r3, #9
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d103      	bne.n	8002c9a <main+0xca2>
 8002c92:	331f      	adds	r3, #31
 8002c94:	7003      	strb	r3, [r0, #0]
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	705f      	strb	r7, [r3, #1]
							itoa(Display1+str2len(Display1), W1209PY.TM_Seconds,0);
 8002c9a:	9b00      	ldr	r3, [sp, #0]
 8002c9c:	681d      	ldr	r5, [r3, #0]
 8002c9e:	0028      	movs	r0, r5
 8002ca0:	f7fd ff08 	bl	8000ab4 <str2len>
 8002ca4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	00c9      	lsls	r1, r1, #3
 8002caa:	0e89      	lsrs	r1, r1, #26
 8002cac:	1828      	adds	r0, r5, r0
 8002cae:	f7fd febf 	bl	8000a30 <itoa>
							p_aux=Display1+str2len(Display1);
 8002cb2:	9b00      	ldr	r3, [sp, #0]
 8002cb4:	681d      	ldr	r5, [r3, #0]
 8002cb6:	0028      	movs	r0, r5
 8002cb8:	f7fd fefc 	bl	8000ab4 <str2len>
							strcpy(p_aux," ");
 8002cbc:	2320      	movs	r3, #32
							p_aux=Display1+str2len(Display1);
 8002cbe:	4e48      	ldr	r6, [pc, #288]	@ (8002de0 <main+0xde8>)
 8002cc0:	182d      	adds	r5, r5, r0
 8002cc2:	6035      	str	r5, [r6, #0]
							strcpy(p_aux," ");
 8002cc4:	702b      	strb	r3, [r5, #0]
 8002cc6:	2500      	movs	r5, #0
 8002cc8:	6833      	ldr	r3, [r6, #0]
 8002cca:	705d      	strb	r5, [r3, #1]
							p_aux=Display1+str2len(Display1);
 8002ccc:	9b00      	ldr	r3, [sp, #0]
 8002cce:	681f      	ldr	r7, [r3, #0]
 8002cd0:	0038      	movs	r0, r7
 8002cd2:	f7fd feef 	bl	8000ab4 <str2len>
							strcpy(p_aux,MsgStr[46]);	
 8002cd6:	0029      	movs	r1, r5
							p_aux=Display1+str2len(Display1);
 8002cd8:	183f      	adds	r7, r7, r0
							strcpy(p_aux,MsgStr[46]);	
 8002cda:	4a3f      	ldr	r2, [pc, #252]	@ (8002dd8 <main+0xde0>)
							p_aux=Display1+str2len(Display1);
 8002cdc:	6037      	str	r7, [r6, #0]
							strcpy(p_aux,MsgStr[46]);	
 8002cde:	6813      	ldr	r3, [r2, #0]
 8002ce0:	33b8      	adds	r3, #184	@ 0xb8
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	5d5f      	ldrb	r7, [r3, r5]
 8002ce6:	1c6b      	adds	r3, r5, #1
 8002ce8:	2f00      	cmp	r7, #0
 8002cea:	d14c      	bne.n	8002d86 <main+0xd8e>
							p_aux=Display1+str2len(Display1)-2;
 8002cec:	4b3b      	ldr	r3, [pc, #236]	@ (8002ddc <main+0xde4>)
 8002cee:	681d      	ldr	r5, [r3, #0]
 8002cf0:	0028      	movs	r0, r5
 8002cf2:	f7fd fedf 	bl	8000ab4 <str2len>
 8002cf6:	3802      	subs	r0, #2
 8002cf8:	182d      	adds	r5, r5, r0
 8002cfa:	6035      	str	r5, [r6, #0]
							if(W1209PY.TM_Seconds==1) {strcpy(p_aux," ")};
 8002cfc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d103      	bne.n	8002d0e <main+0xd16>
 8002d06:	331f      	adds	r3, #31
 8002d08:	702b      	strb	r3, [r5, #0]
 8002d0a:	6833      	ldr	r3, [r6, #0]
 8002d0c:	705f      	strb	r7, [r3, #1]
							MsgBox2(0,0, 2);
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2202      	movs	r2, #2
 8002d12:	0008      	movs	r0, r1
 8002d14:	f7fe f9a0 	bl	8001058 <MsgBox2>
						Timeout=0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9a01      	ldr	r2, [sp, #4]
 8002d1c:	6013      	str	r3, [r2, #0]
						if(W1209PY.Temp_Roll) {p_roll=Display; Cleaning=1;}
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	075b      	lsls	r3, r3, #29
 8002d22:	d401      	bmi.n	8002d28 <main+0xd30>
 8002d24:	f7ff fb73 	bl	800240e <main+0x416>
 8002d28:	4b2e      	ldr	r3, [pc, #184]	@ (8002de4 <main+0xdec>)
 8002d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002de8 <main+0xdf0>)
 8002d2c:	601a      	str	r2, [r3, #0]
					if(Cleaning){Cleaning=0; Get_Temperature(Put_Temp_On_Buffer);}
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4b2e      	ldr	r3, [pc, #184]	@ (8002dec <main+0xdf4>)
 8002d32:	2001      	movs	r0, #1
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f7fe f84b 	bl	8000dd0 <Get_Temperature>
 8002d3a:	f7ff fb6e 	bl	800241a <main+0x422>
						if(W1209PY.TM_Seconds||W1209PY.TM_Minutes||W1209PY.TM_Days||W1209PY.TM_Hours) {
 8002d3e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002d40:	0509      	lsls	r1, r1, #20
 8002d42:	0d08      	lsrs	r0, r1, #20
 8002d44:	2900      	cmp	r1, #0
 8002d46:	d000      	beq.n	8002d4a <main+0xd52>
 8002d48:	e6d1      	b.n	8002aee <main+0xaf6>
 8002d4a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002d4c:	03c9      	lsls	r1, r1, #15
 8002d4e:	0ec9      	lsrs	r1, r1, #27
 8002d50:	d01f      	beq.n	8002d92 <main+0xd9a>
 8002d52:	0003      	movs	r3, r0
 8002d54:	e6cb      	b.n	8002aee <main+0xaf6>
							strcpy(Display1,MsgStr[58]);		
 8002d56:	54f5      	strb	r5, [r6, r3]
 8002d58:	9b00      	ldr	r3, [sp, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	5498      	strb	r0, [r3, r2]
 8002d5e:	0013      	movs	r3, r2
 8002d60:	e6c9      	b.n	8002af6 <main+0xafe>
								strcpy(p_aux,MsgStr[59]);
 8002d62:	6830      	ldr	r0, [r6, #0]
 8002d64:	5547      	strb	r7, [r0, r5]
 8002d66:	6830      	ldr	r0, [r6, #0]
 8002d68:	001d      	movs	r5, r3
 8002d6a:	54c1      	strb	r1, [r0, r3]
 8002d6c:	e6f1      	b.n	8002b52 <main+0xb5a>
								strcpy(p_aux,MsgStr[60]);
 8002d6e:	6830      	ldr	r0, [r6, #0]
 8002d70:	5547      	strb	r7, [r0, r5]
 8002d72:	6830      	ldr	r0, [r6, #0]
 8002d74:	001d      	movs	r5, r3
 8002d76:	54c1      	strb	r1, [r0, r3]
 8002d78:	e72e      	b.n	8002bd8 <main+0xbe0>
								strcpy(p_aux,MsgStr[45]);
 8002d7a:	6830      	ldr	r0, [r6, #0]
 8002d7c:	5547      	strb	r7, [r0, r5]
 8002d7e:	6830      	ldr	r0, [r6, #0]
 8002d80:	001d      	movs	r5, r3
 8002d82:	54c1      	strb	r1, [r0, r3]
 8002d84:	e76f      	b.n	8002c66 <main+0xc6e>
							strcpy(p_aux,MsgStr[46]);	
 8002d86:	6830      	ldr	r0, [r6, #0]
 8002d88:	5547      	strb	r7, [r0, r5]
 8002d8a:	6830      	ldr	r0, [r6, #0]
 8002d8c:	001d      	movs	r5, r3
 8002d8e:	54c1      	strb	r1, [r0, r3]
 8002d90:	e7a5      	b.n	8002cde <main+0xce6>
						} else MsgBox((unsigned char*)MsgStr[61],0,0);
 8002d92:	0013      	movs	r3, r2
 8002d94:	33f4      	adds	r3, #244	@ 0xf4
 8002d96:	000a      	movs	r2, r1
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	f7fe f8d7 	bl	8000f4c <MsgBox>
 8002d9e:	e7bb      	b.n	8002d18 <main+0xd20>
					if(W1209PY.Temp_Roll||Alarm_Flag) Put_Buff_On_Display(p_roll++,0); else Put_Buff_On_Display(Display1,0);
 8002da0:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <main+0xde4>)
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	f7ff fb47 	bl	8002436 <main+0x43e>
					if(((((NTC.Temp<W1209PY.Alarm1_TempK100)&&(W1209PY.Alarm1_TempK100>=Max(Turn_Off_Temp,Turn_On_Temp)))|| \
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	f7ff fb55 	bl	8002458 <main+0x460>
					    ((NTC.Temp>W1209PY.Alarm1_TempK100)&&(W1209PY.Alarm1_TempK100<=Min(Turn_Off_Temp,Turn_On_Temp))))||(!W1209PY.Alarm1))&& \
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f7ff fb62 	bl	8002478 <main+0x480>
					   ((((NTC.Temp<W1209PY.Alarm2_TempK100)&&(W1209PY.Alarm2_TempK100>=Max(Turn_Off_Temp,Turn_On_Temp)))|| \
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	f7ff fb75 	bl	80024a4 <main+0x4ac>
					    ((NTC.Temp>W1209PY.Alarm2_TempK100)&&(W1209PY.Alarm2_TempK100<=Min(Turn_Off_Temp,Turn_On_Temp))))||(!W1209PY.Alarm2))) {
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f7ff fb82 	bl	80024c4 <main+0x4cc>
							else if(Analog_Flag) Get_Temperature(Dont_Put_Temp_On_Buffer);								
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <main+0xdd2>
 8002dc6:	f7ff fbb5 	bl	8002534 <main+0x53c>
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7ff fbb0 	bl	8002530 <main+0x538>
 8002dd0:	200004b0 	.word	0x200004b0
 8002dd4:	00004e1f 	.word	0x00004e1f
 8002dd8:	200004d4 	.word	0x200004d4
 8002ddc:	200000ac 	.word	0x200000ac
 8002de0:	20000448 	.word	0x20000448
 8002de4:	200000a8 	.word	0x200000a8
 8002de8:	200000b0 	.word	0x200000b0
 8002dec:	20000434 	.word	0x20000434
						if(!Alarm_Flag) {
 8002df0:	682b      	ldr	r3, [r5, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <main+0xe14>
								System_Ready=0;
 8002df6:	4a9c      	ldr	r2, [pc, #624]	@ (8003068 <main+0x1070>)
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	2240      	movs	r2, #64	@ 0x40
 8002dfc:	4b9b      	ldr	r3, [pc, #620]	@ (800306c <main+0x1074>)
 8002dfe:	629a      	str	r2, [r3, #40]	@ 0x28
								p_roll=Display;
 8002e00:	4b9b      	ldr	r3, [pc, #620]	@ (8003070 <main+0x1078>)
 8002e02:	4a9c      	ldr	r2, [pc, #624]	@ (8003074 <main+0x107c>)
 8002e04:	601a      	str	r2, [r3, #0]
								Flashing_Flag=1;
 8002e06:	2201      	movs	r2, #1
 8002e08:	4b9b      	ldr	r3, [pc, #620]	@ (8003078 <main+0x1080>)
 8002e0a:	601a      	str	r2, [r3, #0]
						if(Analog_Flag) Get_Temperature(Dont_Put_Temp_On_Buffer);
 8002e0c:	4b9b      	ldr	r3, [pc, #620]	@ (800307c <main+0x1084>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <main+0xe22>
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd ffdb 	bl	8000dd0 <Get_Temperature>
						Alarm_Flag=0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	602b      	str	r3, [r5, #0]
						if(W1209PY.Alarm1){
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	071b      	lsls	r3, r3, #28
 8002e22:	d524      	bpl.n	8002e6e <main+0xe76>
							if((NTC.Temp>=W1209PY.Alarm1_TempK100)&&(W1209PY.Alarm1_TempK100>=Max(Turn_Off_Temp,Turn_On_Temp)))  Alarm_Flag|=1;
 8002e24:	4b96      	ldr	r3, [pc, #600]	@ (8003080 <main+0x1088>)
 8002e26:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002e28:	6a22      	ldr	r2, [r4, #32]
 8002e2a:	4291      	cmp	r1, r2
 8002e2c:	d30d      	bcc.n	8002e4a <main+0xe52>
 8002e2e:	4995      	ldr	r1, [pc, #596]	@ (8003084 <main+0x108c>)
 8002e30:	4a95      	ldr	r2, [pc, #596]	@ (8003088 <main+0x1090>)
 8002e32:	6a20      	ldr	r0, [r4, #32]
 8002e34:	680f      	ldr	r7, [r1, #0]
 8002e36:	6816      	ldr	r6, [r2, #0]
 8002e38:	42b7      	cmp	r7, r6
 8002e3a:	d34d      	bcc.n	8002ed8 <main+0xee0>
 8002e3c:	680a      	ldr	r2, [r1, #0]
 8002e3e:	4290      	cmp	r0, r2
 8002e40:	d303      	bcc.n	8002e4a <main+0xe52>
 8002e42:	2101      	movs	r1, #1
 8002e44:	682a      	ldr	r2, [r5, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	602a      	str	r2, [r5, #0]
							if((NTC.Temp<=W1209PY.Alarm1_TempK100)&&(W1209PY.Alarm1_TempK100<=Min(Turn_Off_Temp,Turn_On_Temp))) Alarm_Flag|=4;
 8002e4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e4c:	6a23      	ldr	r3, [r4, #32]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d80d      	bhi.n	8002e6e <main+0xe76>
 8002e52:	4a8c      	ldr	r2, [pc, #560]	@ (8003084 <main+0x108c>)
 8002e54:	4b8c      	ldr	r3, [pc, #560]	@ (8003088 <main+0x1090>)
 8002e56:	6a21      	ldr	r1, [r4, #32]
 8002e58:	6816      	ldr	r6, [r2, #0]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	4286      	cmp	r6, r0
 8002e5e:	d83d      	bhi.n	8002edc <main+0xee4>
 8002e60:	6813      	ldr	r3, [r2, #0]
 8002e62:	4299      	cmp	r1, r3
 8002e64:	d803      	bhi.n	8002e6e <main+0xe76>
 8002e66:	2304      	movs	r3, #4
 8002e68:	682a      	ldr	r2, [r5, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	602b      	str	r3, [r5, #0]
						if(W1209PY.Alarm2){
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	06db      	lsls	r3, r3, #27
 8002e72:	d524      	bpl.n	8002ebe <main+0xec6>
							if((NTC.Temp>=W1209PY.Alarm2_TempK100)&&(W1209PY.Alarm2_TempK100>=Max(Turn_Off_Temp,Turn_On_Temp))) Alarm_Flag|=2;
 8002e74:	4b82      	ldr	r3, [pc, #520]	@ (8003080 <main+0x1088>)
 8002e76:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002e78:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002e7a:	4291      	cmp	r1, r2
 8002e7c:	d30d      	bcc.n	8002e9a <main+0xea2>
 8002e7e:	4981      	ldr	r1, [pc, #516]	@ (8003084 <main+0x108c>)
 8002e80:	4a81      	ldr	r2, [pc, #516]	@ (8003088 <main+0x1090>)
 8002e82:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002e84:	680f      	ldr	r7, [r1, #0]
 8002e86:	6816      	ldr	r6, [r2, #0]
 8002e88:	42b7      	cmp	r7, r6
 8002e8a:	d329      	bcc.n	8002ee0 <main+0xee8>
 8002e8c:	680a      	ldr	r2, [r1, #0]
 8002e8e:	4290      	cmp	r0, r2
 8002e90:	d303      	bcc.n	8002e9a <main+0xea2>
 8002e92:	2202      	movs	r2, #2
 8002e94:	6829      	ldr	r1, [r5, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	602a      	str	r2, [r5, #0]
							if((NTC.Temp<=W1209PY.Alarm2_TempK100)&&(W1209PY.Alarm2_TempK100<=Min(Turn_Off_Temp,Turn_On_Temp))) Alarm_Flag|=8;
 8002e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e9c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d80d      	bhi.n	8002ebe <main+0xec6>
 8002ea2:	4a78      	ldr	r2, [pc, #480]	@ (8003084 <main+0x108c>)
 8002ea4:	4b78      	ldr	r3, [pc, #480]	@ (8003088 <main+0x1090>)
 8002ea6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002ea8:	6816      	ldr	r6, [r2, #0]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	4286      	cmp	r6, r0
 8002eae:	d819      	bhi.n	8002ee4 <main+0xeec>
 8002eb0:	6813      	ldr	r3, [r2, #0]
 8002eb2:	4299      	cmp	r1, r3
 8002eb4:	d803      	bhi.n	8002ebe <main+0xec6>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	682a      	ldr	r2, [r5, #0]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	602b      	str	r3, [r5, #0]
						switch(Alarm_Flag){
 8002ebe:	6828      	ldr	r0, [r5, #0]
 8002ec0:	3801      	subs	r0, #1
 8002ec2:	280b      	cmp	r0, #11
 8002ec4:	d900      	bls.n	8002ec8 <main+0xed0>
 8002ec6:	e0ba      	b.n	800303e <main+0x1046>
 8002ec8:	f7fd f8fa 	bl	80000c0 <__gnu_thumb1_case_uqi>
 8002ecc:	7b484331 	.word	0x7b484331
 8002ed0:	8db9b9b9 	.word	0x8db9b9b9
 8002ed4:	92b9b9b9 	.word	0x92b9b9b9
							if((NTC.Temp>=W1209PY.Alarm1_TempK100)&&(W1209PY.Alarm1_TempK100>=Max(Turn_Off_Temp,Turn_On_Temp)))  Alarm_Flag|=1;
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	e7b0      	b.n	8002e3e <main+0xe46>
							if((NTC.Temp<=W1209PY.Alarm1_TempK100)&&(W1209PY.Alarm1_TempK100<=Min(Turn_Off_Temp,Turn_On_Temp))) Alarm_Flag|=4;
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	e7c0      	b.n	8002e62 <main+0xe6a>
							if((NTC.Temp>=W1209PY.Alarm2_TempK100)&&(W1209PY.Alarm2_TempK100>=Max(Turn_Off_Temp,Turn_On_Temp))) Alarm_Flag|=2;
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	e7d4      	b.n	8002e8e <main+0xe96>
							if((NTC.Temp<=W1209PY.Alarm2_TempK100)&&(W1209PY.Alarm2_TempK100<=Min(Turn_Off_Temp,Turn_On_Temp))) Alarm_Flag|=8;
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	e7e4      	b.n	8002eb2 <main+0xeba>
									{strcpy(Display1, MsgStr[51])}
 8002ee8:	6807      	ldr	r7, [r0, #0]
 8002eea:	54fa      	strb	r2, [r7, r3]
 8002eec:	6803      	ldr	r3, [r0, #0]
 8002eee:	545e      	strb	r6, [r3, r1]
 8002ef0:	000b      	movs	r3, r1
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	1c59      	adds	r1, r3, #1
 8002ef6:	32cc      	adds	r2, #204	@ 0xcc
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	5cd2      	ldrb	r2, [r2, r3]
 8002efc:	2a00      	cmp	r2, #0
 8002efe:	d1f3      	bne.n	8002ee8 <main+0xef0>
						if(Alarm_Flag) Display1[1]|=_DP;
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d006      	beq.n	8002f14 <main+0xf1c>
 8002f06:	4b61      	ldr	r3, [pc, #388]	@ (800308c <main+0x1094>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	2380      	movs	r3, #128	@ 0x80
 8002f0c:	7851      	ldrb	r1, [r2, #1]
 8002f0e:	425b      	negs	r3, r3
 8002f10:	430b      	orrs	r3, r1
 8002f12:	7053      	strb	r3, [r2, #1]
						if(Alarm_Flag&&!Beeper_Flag) Beeper_Flag=1;  else if(!Alarm_Flag&&Beeper_Flag)
 8002f14:	682b      	ldr	r3, [r5, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d100      	bne.n	8002f1c <main+0xf24>
 8002f1a:	e093      	b.n	8003044 <main+0x104c>
 8002f1c:	4b5c      	ldr	r3, [pc, #368]	@ (8003090 <main+0x1098>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2a00      	cmp	r2, #0
 8002f22:	d000      	beq.n	8002f26 <main+0xf2e>
 8002f24:	e08e      	b.n	8003044 <main+0x104c>
 8002f26:	3201      	adds	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f7ff fb03 	bl	8002534 <main+0x53c>
						switch(Alarm_Flag){
 8002f2e:	2300      	movs	r3, #0
									{strcpy(Display1, MsgStr[51])}
 8002f30:	4c58      	ldr	r4, [pc, #352]	@ (8003094 <main+0x109c>)
 8002f32:	001e      	movs	r6, r3
 8002f34:	4855      	ldr	r0, [pc, #340]	@ (800308c <main+0x1094>)
 8002f36:	e7dc      	b.n	8002ef2 <main+0xefa>
									{strcpy(Display1, MsgStr[53])}
 8002f38:	6807      	ldr	r7, [r0, #0]
 8002f3a:	54fa      	strb	r2, [r7, r3]
 8002f3c:	6803      	ldr	r3, [r0, #0]
 8002f3e:	545e      	strb	r6, [r3, r1]
 8002f40:	000b      	movs	r3, r1
 8002f42:	6822      	ldr	r2, [r4, #0]
 8002f44:	1c59      	adds	r1, r3, #1
 8002f46:	32d4      	adds	r2, #212	@ 0xd4
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	5cd2      	ldrb	r2, [r2, r3]
 8002f4c:	2a00      	cmp	r2, #0
 8002f4e:	d1f3      	bne.n	8002f38 <main+0xf40>
 8002f50:	e7d6      	b.n	8002f00 <main+0xf08>
						switch(Alarm_Flag){
 8002f52:	2300      	movs	r3, #0
									{strcpy(Display1, MsgStr[53])}
 8002f54:	4c4f      	ldr	r4, [pc, #316]	@ (8003094 <main+0x109c>)
 8002f56:	001e      	movs	r6, r3
 8002f58:	484c      	ldr	r0, [pc, #304]	@ (800308c <main+0x1094>)
 8002f5a:	e7f2      	b.n	8002f42 <main+0xf4a>
									if(W1209PY.Alarm2_TempK100>=W1209PY.Alarm1_TempK100) { strcpy(Display1, MsgStr[53]) } else { strcpy(Display1, MsgStr[51]) }
 8002f5c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002f5e:	6a23      	ldr	r3, [r4, #32]
 8002f60:	484c      	ldr	r0, [pc, #304]	@ (8003094 <main+0x109c>)
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d21c      	bcs.n	8002fa0 <main+0xfa8>
 8002f66:	2300      	movs	r3, #0
 8002f68:	001e      	movs	r6, r3
 8002f6a:	4c48      	ldr	r4, [pc, #288]	@ (800308c <main+0x1094>)
 8002f6c:	6802      	ldr	r2, [r0, #0]
 8002f6e:	1c59      	adds	r1, r3, #1
 8002f70:	32cc      	adds	r2, #204	@ 0xcc
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	5cd2      	ldrb	r2, [r2, r3]
 8002f76:	2a00      	cmp	r2, #0
 8002f78:	d0c2      	beq.n	8002f00 <main+0xf08>
 8002f7a:	6827      	ldr	r7, [r4, #0]
 8002f7c:	54fa      	strb	r2, [r7, r3]
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	545e      	strb	r6, [r3, r1]
 8002f82:	000b      	movs	r3, r1
 8002f84:	e7f2      	b.n	8002f6c <main+0xf74>
 8002f86:	6827      	ldr	r7, [r4, #0]
 8002f88:	54fa      	strb	r2, [r7, r3]
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	545e      	strb	r6, [r3, r1]
 8002f8e:	000b      	movs	r3, r1
 8002f90:	6802      	ldr	r2, [r0, #0]
 8002f92:	1c59      	adds	r1, r3, #1
 8002f94:	32d4      	adds	r2, #212	@ 0xd4
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	5cd2      	ldrb	r2, [r2, r3]
 8002f9a:	2a00      	cmp	r2, #0
 8002f9c:	d1f3      	bne.n	8002f86 <main+0xf8e>
 8002f9e:	e7af      	b.n	8002f00 <main+0xf08>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	4c3a      	ldr	r4, [pc, #232]	@ (800308c <main+0x1094>)
 8002fa4:	001e      	movs	r6, r3
 8002fa6:	e7f3      	b.n	8002f90 <main+0xf98>
									{strcpy(Display1, MsgStr[50])}
 8002fa8:	6807      	ldr	r7, [r0, #0]
 8002faa:	54fa      	strb	r2, [r7, r3]
 8002fac:	6803      	ldr	r3, [r0, #0]
 8002fae:	545e      	strb	r6, [r3, r1]
 8002fb0:	000b      	movs	r3, r1
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	1c59      	adds	r1, r3, #1
 8002fb6:	32c8      	adds	r2, #200	@ 0xc8
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	5cd2      	ldrb	r2, [r2, r3]
 8002fbc:	2a00      	cmp	r2, #0
 8002fbe:	d1f3      	bne.n	8002fa8 <main+0xfb0>
 8002fc0:	e79e      	b.n	8002f00 <main+0xf08>
						switch(Alarm_Flag){
 8002fc2:	2300      	movs	r3, #0
									{strcpy(Display1, MsgStr[50])}
 8002fc4:	4c33      	ldr	r4, [pc, #204]	@ (8003094 <main+0x109c>)
 8002fc6:	001e      	movs	r6, r3
 8002fc8:	4830      	ldr	r0, [pc, #192]	@ (800308c <main+0x1094>)
 8002fca:	e7f2      	b.n	8002fb2 <main+0xfba>
									{strcpy(Display1, MsgStr[52])}
 8002fcc:	6807      	ldr	r7, [r0, #0]
 8002fce:	54fa      	strb	r2, [r7, r3]
 8002fd0:	6803      	ldr	r3, [r0, #0]
 8002fd2:	545e      	strb	r6, [r3, r1]
 8002fd4:	000b      	movs	r3, r1
 8002fd6:	6822      	ldr	r2, [r4, #0]
 8002fd8:	1c59      	adds	r1, r3, #1
 8002fda:	32d0      	adds	r2, #208	@ 0xd0
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	5cd2      	ldrb	r2, [r2, r3]
 8002fe0:	2a00      	cmp	r2, #0
 8002fe2:	d1f3      	bne.n	8002fcc <main+0xfd4>
 8002fe4:	e78c      	b.n	8002f00 <main+0xf08>
						switch(Alarm_Flag){
 8002fe6:	2300      	movs	r3, #0
									{strcpy(Display1, MsgStr[52])}
 8002fe8:	4c2a      	ldr	r4, [pc, #168]	@ (8003094 <main+0x109c>)
 8002fea:	001e      	movs	r6, r3
 8002fec:	4827      	ldr	r0, [pc, #156]	@ (800308c <main+0x1094>)
 8002fee:	e7f2      	b.n	8002fd6 <main+0xfde>
									if(W1209PY.Alarm2_TempK100<=W1209PY.Alarm1_TempK100) { strcpy(Display1, MsgStr[52]) } else { strcpy(Display1, MsgStr[50]) }
 8002ff0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002ff2:	6a23      	ldr	r3, [r4, #32]
 8002ff4:	4827      	ldr	r0, [pc, #156]	@ (8003094 <main+0x109c>)
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d91d      	bls.n	8003036 <main+0x103e>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	001e      	movs	r6, r3
 8002ffe:	4c23      	ldr	r4, [pc, #140]	@ (800308c <main+0x1094>)
 8003000:	6802      	ldr	r2, [r0, #0]
 8003002:	1c59      	adds	r1, r3, #1
 8003004:	32c8      	adds	r2, #200	@ 0xc8
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	5cd2      	ldrb	r2, [r2, r3]
 800300a:	2a00      	cmp	r2, #0
 800300c:	d100      	bne.n	8003010 <main+0x1018>
 800300e:	e777      	b.n	8002f00 <main+0xf08>
 8003010:	6827      	ldr	r7, [r4, #0]
 8003012:	54fa      	strb	r2, [r7, r3]
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	545e      	strb	r6, [r3, r1]
 8003018:	000b      	movs	r3, r1
 800301a:	e7f1      	b.n	8003000 <main+0x1008>
 800301c:	6827      	ldr	r7, [r4, #0]
 800301e:	54fa      	strb	r2, [r7, r3]
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	545e      	strb	r6, [r3, r1]
 8003024:	000b      	movs	r3, r1
 8003026:	6802      	ldr	r2, [r0, #0]
 8003028:	1c59      	adds	r1, r3, #1
 800302a:	32d0      	adds	r2, #208	@ 0xd0
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	5cd2      	ldrb	r2, [r2, r3]
 8003030:	2a00      	cmp	r2, #0
 8003032:	d1f3      	bne.n	800301c <main+0x1024>
 8003034:	e764      	b.n	8002f00 <main+0xf08>
 8003036:	2300      	movs	r3, #0
 8003038:	4c14      	ldr	r4, [pc, #80]	@ (800308c <main+0x1094>)
 800303a:	001e      	movs	r6, r3
 800303c:	e7f3      	b.n	8003026 <main+0x102e>
									Alarm_Flag=0;
 800303e:	2300      	movs	r3, #0
 8003040:	602b      	str	r3, [r5, #0]
									break;
 8003042:	e75d      	b.n	8002f00 <main+0xf08>
						if(Alarm_Flag&&!Beeper_Flag) Beeper_Flag=1;  else if(!Alarm_Flag&&Beeper_Flag)
 8003044:	682a      	ldr	r2, [r5, #0]
 8003046:	2a00      	cmp	r2, #0
 8003048:	d001      	beq.n	800304e <main+0x1056>
 800304a:	f7ff fa73 	bl	8002534 <main+0x53c>
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <main+0x1098>)
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	2900      	cmp	r1, #0
 8003054:	d101      	bne.n	800305a <main+0x1062>
 8003056:	f7ff fa6d 	bl	8002534 <main+0x53c>
								Beeper_Flag=0;
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	23a0      	movs	r3, #160	@ 0xa0
 800305e:	3202      	adds	r2, #2
 8003060:	05db      	lsls	r3, r3, #23
 8003062:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003064:	f7ff fa66 	bl	8002534 <main+0x53c>
 8003068:	2000048c 	.word	0x2000048c
 800306c:	50000400 	.word	0x50000400
 8003070:	200000a8 	.word	0x200000a8
 8003074:	200000b0 	.word	0x200000b0
 8003078:	200004a4 	.word	0x200004a4
 800307c:	20000494 	.word	0x20000494
 8003080:	200003e8 	.word	0x200003e8
 8003084:	2000046c 	.word	0x2000046c
 8003088:	20000470 	.word	0x20000470
 800308c:	200000ac 	.word	0x200000ac
 8003090:	200004a8 	.word	0x200004a8
 8003094:	200004d4 	.word	0x200004d4
								if (((Pressed_BPlus>1)&&(!(Tick_Timer&(0x3FF>>(Pressed_BPlus>>2)))))||(Pressed_BPlus==1))
 8003098:	4bc9      	ldr	r3, [pc, #804]	@ (80033c0 <main+0x13c8>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2a01      	cmp	r2, #1
 800309e:	d907      	bls.n	80030b0 <main+0x10b8>
 80030a0:	4ac8      	ldr	r2, [pc, #800]	@ (80033c4 <main+0x13cc>)
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	6810      	ldr	r0, [r2, #0]
 80030a6:	4ac8      	ldr	r2, [pc, #800]	@ (80033c8 <main+0x13d0>)
 80030a8:	0889      	lsrs	r1, r1, #2
 80030aa:	410a      	asrs	r2, r1
 80030ac:	4210      	tst	r0, r2
 80030ae:	d002      	beq.n	80030b6 <main+0x10be>
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	2a01      	cmp	r2, #1
 80030b4:	d112      	bne.n	80030dc <main+0x10e4>
										if(Pressed_BPlus==1) Pressed_BPlus=0;
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2a01      	cmp	r2, #1
 80030ba:	d101      	bne.n	80030c0 <main+0x10c8>
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
										Program_Menu+=(Program_Menu==30)?0:1;
 80030c0:	4ac2      	ldr	r2, [pc, #776]	@ (80033cc <main+0x13d4>)
 80030c2:	6811      	ldr	r1, [r2, #0]
 80030c4:	000b      	movs	r3, r1
 80030c6:	3b1e      	subs	r3, #30
 80030c8:	1e58      	subs	r0, r3, #1
 80030ca:	4183      	sbcs	r3, r0
 80030cc:	185b      	adds	r3, r3, r1
 80030ce:	6013      	str	r3, [r2, #0]
										Display_Menu();
 80030d0:	f7fe f83e 	bl	8001150 <Display_Menu>
										Tick_Timer++;
 80030d4:	4abb      	ldr	r2, [pc, #748]	@ (80033c4 <main+0x13cc>)
 80030d6:	6813      	ldr	r3, [r2, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	6013      	str	r3, [r2, #0]
								if (((Pressed_BMinus>1)&&(!(Tick_Timer&(0x3FF>>(Pressed_BMinus>>2)))))||(Pressed_BMinus==1))
 80030dc:	4bbc      	ldr	r3, [pc, #752]	@ (80033d0 <main+0x13d8>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	2a01      	cmp	r2, #1
 80030e2:	d907      	bls.n	80030f4 <main+0x10fc>
 80030e4:	4ab7      	ldr	r2, [pc, #732]	@ (80033c4 <main+0x13cc>)
 80030e6:	6819      	ldr	r1, [r3, #0]
 80030e8:	6810      	ldr	r0, [r2, #0]
 80030ea:	4ab7      	ldr	r2, [pc, #732]	@ (80033c8 <main+0x13d0>)
 80030ec:	0889      	lsrs	r1, r1, #2
 80030ee:	410a      	asrs	r2, r1
 80030f0:	4210      	tst	r0, r2
 80030f2:	d002      	beq.n	80030fa <main+0x1102>
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	2a01      	cmp	r2, #1
 80030f8:	d111      	bne.n	800311e <main+0x1126>
										if(Pressed_BMinus==1) Pressed_BMinus=0;
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2a01      	cmp	r2, #1
 80030fe:	d101      	bne.n	8003104 <main+0x110c>
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
										Program_Menu-=(Program_Menu==0)?0:1;
 8003104:	4ab1      	ldr	r2, [pc, #708]	@ (80033cc <main+0x13d4>)
 8003106:	6813      	ldr	r3, [r2, #0]
 8003108:	0019      	movs	r1, r3
 800310a:	1e48      	subs	r0, r1, #1
 800310c:	4181      	sbcs	r1, r0
 800310e:	1a5b      	subs	r3, r3, r1
 8003110:	6013      	str	r3, [r2, #0]
										Display_Menu();
 8003112:	f7fe f81d 	bl	8001150 <Display_Menu>
										Tick_Timer++;
 8003116:	4aab      	ldr	r2, [pc, #684]	@ (80033c4 <main+0x13cc>)
 8003118:	6813      	ldr	r3, [r2, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	6013      	str	r3, [r2, #0]
								if(Pressed_BSet==1){
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d001      	beq.n	8003128 <main+0x1130>
 8003124:	f7ff fa17 	bl	8002556 <main+0x55e>
									Pressed_BSet=0;
 8003128:	2300      	movs	r3, #0
 800312a:	603b      	str	r3, [r7, #0]
									switch(Program_Menu){
 800312c:	4ba7      	ldr	r3, [pc, #668]	@ (80033cc <main+0x13d4>)
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	281e      	cmp	r0, #30
 8003132:	d849      	bhi.n	80031c8 <main+0x11d0>
 8003134:	4ca7      	ldr	r4, [pc, #668]	@ (80033d4 <main+0x13dc>)
 8003136:	f7fc ffcd 	bl	80000d4 <__gnu_thumb1_case_uhi>
 800313a:	001f      	.short	0x001f
 800313c:	00ad0080 	.word	0x00ad0080
 8003140:	00c000b8 	.word	0x00c000b8
 8003144:	010300e3 	.word	0x010300e3
 8003148:	017a012a 	.word	0x017a012a
 800314c:	01df019a 	.word	0x01df019a
 8003150:	027c0271 	.word	0x027c0271
 8003154:	029b0289 	.word	0x029b0289
 8003158:	030602b1 	.word	0x030602b1
 800315c:	037e035d 	.word	0x037e035d
 8003160:	040e03c6 	.word	0x040e03c6
 8003164:	045b041c 	.word	0x045b041c
 8003168:	04b7049b 	.word	0x04b7049b
 800316c:	04ef04e2 	.word	0x04ef04e2
 8003170:	05550511 	.word	0x05550511
 8003174:	06000578 	.word	0x06000578
														MsgBox((unsigned char *)MsgStr[4],0,0);	
 8003178:	2200      	movs	r2, #0
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	0011      	movs	r1, r2
 800317e:	6918      	ldr	r0, [r3, #16]
 8003180:	f7fd fee4 	bl	8000f4c <MsgBox>
															Aux=(W1209PY.Function==3);
 8003184:	4994      	ldr	r1, [pc, #592]	@ (80033d8 <main+0x13e0>)
 8003186:	4c95      	ldr	r4, [pc, #596]	@ (80033dc <main+0x13e4>)
 8003188:	680a      	ldr	r2, [r1, #0]
 800318a:	0792      	lsls	r2, r2, #30
 800318c:	0f92      	lsrs	r2, r2, #30
 800318e:	1ed3      	subs	r3, r2, #3
 8003190:	4258      	negs	r0, r3
 8003192:	4143      	adcs	r3, r0
 8003194:	6023      	str	r3, [r4, #0]
															Aux2=Aux?2:W1209PY.Function;
 8003196:	2302      	movs	r3, #2
 8003198:	2a03      	cmp	r2, #3
 800319a:	d002      	beq.n	80031a2 <main+0x11aa>
 800319c:	680b      	ldr	r3, [r1, #0]
 800319e:	079b      	lsls	r3, r3, #30
 80031a0:	0f9b      	lsrs	r3, r3, #30
 80031a2:	4a8f      	ldr	r2, [pc, #572]	@ (80033e0 <main+0x13e8>)
 80031a4:	6013      	str	r3, [r2, #0]
														while((Pressed_BSet!=1)&&!Tout()) {														
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d003      	beq.n	80031b4 <main+0x11bc>
 80031ac:	6833      	ldr	r3, [r6, #0]
 80031ae:	4a8d      	ldr	r2, [pc, #564]	@ (80033e4 <main+0x13ec>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	dd14      	ble.n	80031de <main+0x11e6>
														Pressed_BSet=Timeout=0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	6033      	str	r3, [r6, #0]
 80031b8:	603b      	str	r3, [r7, #0]
														if(W1209PY.Function>=2){
 80031ba:	4b87      	ldr	r3, [pc, #540]	@ (80033d8 <main+0x13e0>)
																W1209PY.Function=(W1209PY.Function&2)|Aux;	
 80031bc:	2503      	movs	r5, #3
														if(W1209PY.Function>=2){
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	079b      	lsls	r3, r3, #30
 80031c2:	0f9b      	lsrs	r3, r3, #30
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d830      	bhi.n	800322a <main+0x1232>
									Pressed_BSet=Timeout=0;
 80031c8:	2200      	movs	r2, #0
 80031ca:	4b87      	ldr	r3, [pc, #540]	@ (80033e8 <main+0x13f0>)
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	4b87      	ldr	r3, [pc, #540]	@ (80033ec <main+0x13f4>)
 80031d0:	601a      	str	r2, [r3, #0]
									Display_Menu();
 80031d2:	f7fd ffbd 	bl	8001150 <Display_Menu>
									Prepare_Boundaries();
 80031d6:	f7fe fb89 	bl	80018ec <Prepare_Boundaries>
 80031da:	f7ff f9bc 	bl	8002556 <main+0x55e>
															Aux2=DisplayOptions(25,Aux2,3);
 80031de:	4d80      	ldr	r5, [pc, #512]	@ (80033e0 <main+0x13e8>)
 80031e0:	2203      	movs	r2, #3
 80031e2:	2019      	movs	r0, #25
 80031e4:	6829      	ldr	r1, [r5, #0]
 80031e6:	f7fd fff1 	bl	80011cc <DisplayOptions>
															W1209PY.Function=Aux2|((Aux2==2)?Aux:0);
 80031ea:	2300      	movs	r3, #0
															Aux2=DisplayOptions(25,Aux2,3);
 80031ec:	6028      	str	r0, [r5, #0]
															W1209PY.Function=Aux2|((Aux2==2)?Aux:0);
 80031ee:	2802      	cmp	r0, #2
 80031f0:	d101      	bne.n	80031f6 <main+0x11fe>
 80031f2:	2300      	movs	r3, #0
 80031f4:	56e3      	ldrsb	r3, [r4, r3]
 80031f6:	4303      	orrs	r3, r0
 80031f8:	2003      	movs	r0, #3
 80031fa:	4977      	ldr	r1, [pc, #476]	@ (80033d8 <main+0x13e0>)
 80031fc:	4003      	ands	r3, r0
 80031fe:	680a      	ldr	r2, [r1, #0]
 8003200:	4382      	bics	r2, r0
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
 8003206:	e7ce      	b.n	80031a6 <main+0x11ae>
																Aux=DisplayOptions(63, Aux, 2);
 8003208:	2202      	movs	r2, #2
 800320a:	6821      	ldr	r1, [r4, #0]
 800320c:	203f      	movs	r0, #63	@ 0x3f
 800320e:	f7fd ffdd 	bl	80011cc <DisplayOptions>
																W1209PY.Function=(W1209PY.Function&2)|Aux;	
 8003212:	2102      	movs	r1, #2
																Aux=DisplayOptions(63, Aux, 2);
 8003214:	0002      	movs	r2, r0
																W1209PY.Function=(W1209PY.Function&2)|Aux;	
 8003216:	4b70      	ldr	r3, [pc, #448]	@ (80033d8 <main+0x13e0>)
																Aux=DisplayOptions(63, Aux, 2);
 8003218:	6020      	str	r0, [r4, #0]
																W1209PY.Function=(W1209PY.Function&2)|Aux;	
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	4008      	ands	r0, r1
 800321e:	4310      	orrs	r0, r2
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4028      	ands	r0, r5
 8003224:	43aa      	bics	r2, r5
 8003226:	4302      	orrs	r2, r0
 8003228:	601a      	str	r2, [r3, #0]
															while((Pressed_BSet!=1)&&!Tout()){
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d0cb      	beq.n	80031c8 <main+0x11d0>
 8003230:	6833      	ldr	r3, [r6, #0]
 8003232:	4a6c      	ldr	r2, [pc, #432]	@ (80033e4 <main+0x13ec>)
 8003234:	4293      	cmp	r3, r2
 8003236:	dde7      	ble.n	8003208 <main+0x1210>
 8003238:	e7c6      	b.n	80031c8 <main+0x11d0>
														if(W1209PY.Function<2) MsgBox((unsigned char *)MsgStr[6],0,0); else MsgBox((unsigned char *)MsgStr[65],0,0);
 800323a:	4d67      	ldr	r5, [pc, #412]	@ (80033d8 <main+0x13e0>)
														MsgBox((unsigned char *)MsgStr[4],0,0);	
 800323c:	6820      	ldr	r0, [r4, #0]
														if(W1209PY.Function<2) MsgBox((unsigned char *)MsgStr[6],0,0); else MsgBox((unsigned char *)MsgStr[65],0,0);
 800323e:	682b      	ldr	r3, [r5, #0]
 8003240:	079b      	lsls	r3, r3, #30
 8003242:	0f9b      	lsrs	r3, r3, #30
 8003244:	2b01      	cmp	r3, #1
 8003246:	d820      	bhi.n	800328a <main+0x1292>
 8003248:	2200      	movs	r2, #0
 800324a:	0011      	movs	r1, r2
 800324c:	6980      	ldr	r0, [r0, #24]
 800324e:	f7fd fe7d 	bl	8000f4c <MsgBox>
														Aux=W1209PY.Hysteresis-(W1209PY.fahrenheit?1778:0);
 8003252:	68aa      	ldr	r2, [r5, #8]
 8003254:	682b      	ldr	r3, [r5, #0]
 8003256:	4966      	ldr	r1, [pc, #408]	@ (80033f0 <main+0x13f8>)
 8003258:	069b      	lsls	r3, r3, #26
 800325a:	0fdb      	lsrs	r3, r3, #31
 800325c:	3b01      	subs	r3, #1
 800325e:	400b      	ands	r3, r1
 8003260:	4964      	ldr	r1, [pc, #400]	@ (80033f4 <main+0x13fc>)
 8003262:	4c5e      	ldr	r4, [pc, #376]	@ (80033dc <main+0x13e4>)
 8003264:	185b      	adds	r3, r3, r1
 8003266:	1ad2      	subs	r2, r2, r3
														Edit_Temperatures_Simple((int32_t*)&Aux, 1);
 8003268:	2101      	movs	r1, #1
 800326a:	0020      	movs	r0, r4
														Aux=W1209PY.Hysteresis-(W1209PY.fahrenheit?1778:0);
 800326c:	6022      	str	r2, [r4, #0]
														Edit_Temperatures_Simple((int32_t*)&Aux, 1);
 800326e:	f7fe f9a3 	bl	80015b8 <Edit_Temperatures_Simple>
														W1209PY.Hysteresis=Aux+(W1209PY.fahrenheit?1777:0);
 8003272:	682b      	ldr	r3, [r5, #0]
 8003274:	4a60      	ldr	r2, [pc, #384]	@ (80033f8 <main+0x1400>)
 8003276:	069b      	lsls	r3, r3, #26
 8003278:	0fdb      	lsrs	r3, r3, #31
 800327a:	3b01      	subs	r3, #1
 800327c:	4013      	ands	r3, r2
 800327e:	4a5f      	ldr	r2, [pc, #380]	@ (80033fc <main+0x1404>)
 8003280:	189b      	adds	r3, r3, r2
 8003282:	6822      	ldr	r2, [r4, #0]
 8003284:	189b      	adds	r3, r3, r2
 8003286:	60ab      	str	r3, [r5, #8]
														break;
 8003288:	e79e      	b.n	80031c8 <main+0x11d0>
														if(W1209PY.Function<2) MsgBox((unsigned char *)MsgStr[6],0,0); else MsgBox((unsigned char *)MsgStr[65],0,0);
 800328a:	2200      	movs	r2, #0
 800328c:	30fc      	adds	r0, #252	@ 0xfc
 800328e:	0011      	movs	r1, r2
 8003290:	6880      	ldr	r0, [r0, #8]
 8003292:	e7dc      	b.n	800324e <main+0x1256>
														MsgBox((unsigned char *)MsgStr[7],0,0);
 8003294:	2200      	movs	r2, #0
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	0011      	movs	r1, r2
 800329a:	69d8      	ldr	r0, [r3, #28]
 800329c:	f7fd fe56 	bl	8000f4c <MsgBox>
														Edit_Temperatures_Simple((int32_t*)&W1209PY.Max_TempK100, 10);
 80032a0:	4857      	ldr	r0, [pc, #348]	@ (8003400 <main+0x1408>)
														Edit_Temperatures_Simple((int32_t*)&W1209PY.Min_TempK100, 10);
 80032a2:	210a      	movs	r1, #10
 80032a4:	f7fe f988 	bl	80015b8 <Edit_Temperatures_Simple>
														break;
 80032a8:	e78e      	b.n	80031c8 <main+0x11d0>
														MsgBox((unsigned char *)MsgStr[8],0,0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	0011      	movs	r1, r2
 80032b0:	6a18      	ldr	r0, [r3, #32]
 80032b2:	f7fd fe4b 	bl	8000f4c <MsgBox>
														Edit_Temperatures_Simple((int32_t*)&W1209PY.Min_TempK100, 10);
 80032b6:	4853      	ldr	r0, [pc, #332]	@ (8003404 <main+0x140c>)
 80032b8:	e7f3      	b.n	80032a2 <main+0x12aa>
														MsgBox((unsigned char *)MsgStr[9],0,0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	0011      	movs	r1, r2
 80032c0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80032c2:	f7fd fe43 	bl	8000f4c <MsgBox>
														Aux=W1209PY.Temp_Offset-(W1209PY.fahrenheit?1778:0);
 80032c6:	4c44      	ldr	r4, [pc, #272]	@ (80033d8 <main+0x13e0>)
 80032c8:	4949      	ldr	r1, [pc, #292]	@ (80033f0 <main+0x13f8>)
 80032ca:	68e2      	ldr	r2, [r4, #12]
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	4d43      	ldr	r5, [pc, #268]	@ (80033dc <main+0x13e4>)
 80032d0:	069b      	lsls	r3, r3, #26
 80032d2:	0fdb      	lsrs	r3, r3, #31
 80032d4:	3b01      	subs	r3, #1
 80032d6:	400b      	ands	r3, r1
 80032d8:	4946      	ldr	r1, [pc, #280]	@ (80033f4 <main+0x13fc>)
														Edit_Temperatures_Simple((int32_t*)&Aux, 1);
 80032da:	0028      	movs	r0, r5
														Aux=W1209PY.Temp_Offset-(W1209PY.fahrenheit?1778:0);
 80032dc:	185b      	adds	r3, r3, r1
 80032de:	1ad2      	subs	r2, r2, r3
														Edit_Temperatures_Simple((int32_t*)&Aux, 1);
 80032e0:	2101      	movs	r1, #1
														Aux=W1209PY.Temp_Offset-(W1209PY.fahrenheit?1778:0);
 80032e2:	602a      	str	r2, [r5, #0]
														Edit_Temperatures_Simple((int32_t*)&Aux, 1);
 80032e4:	f7fe f968 	bl	80015b8 <Edit_Temperatures_Simple>
														W1209PY.Temp_Offset=Aux+(W1209PY.fahrenheit?1777:0);
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	4a43      	ldr	r2, [pc, #268]	@ (80033f8 <main+0x1400>)
 80032ec:	069b      	lsls	r3, r3, #26
 80032ee:	0fdb      	lsrs	r3, r3, #31
 80032f0:	3b01      	subs	r3, #1
 80032f2:	4013      	ands	r3, r2
 80032f4:	4a41      	ldr	r2, [pc, #260]	@ (80033fc <main+0x1404>)
 80032f6:	189b      	adds	r3, r3, r2
 80032f8:	682a      	ldr	r2, [r5, #0]
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	60e3      	str	r3, [r4, #12]
														break;
 80032fe:	e763      	b.n	80031c8 <main+0x11d0>
														MsgBox((unsigned char *)MsgStr[10],0,0);
 8003300:	2200      	movs	r2, #0
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	0011      	movs	r1, r2
 8003306:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003308:	f7fd fe20 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Delay_Type=DisplayOptions(45,W1209PY.Delay_Type,2);
 800330c:	2580      	movs	r5, #128	@ 0x80
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d100      	bne.n	8003316 <main+0x131e>
 8003314:	e758      	b.n	80031c8 <main+0x11d0>
 8003316:	6833      	ldr	r3, [r6, #0]
 8003318:	4a32      	ldr	r2, [pc, #200]	@ (80033e4 <main+0x13ec>)
 800331a:	4293      	cmp	r3, r2
 800331c:	dd00      	ble.n	8003320 <main+0x1328>
 800331e:	e753      	b.n	80031c8 <main+0x11d0>
 8003320:	4c2d      	ldr	r4, [pc, #180]	@ (80033d8 <main+0x13e0>)
 8003322:	2202      	movs	r2, #2
 8003324:	6821      	ldr	r1, [r4, #0]
 8003326:	202d      	movs	r0, #45	@ 0x2d
 8003328:	0609      	lsls	r1, r1, #24
 800332a:	0fc9      	lsrs	r1, r1, #31
 800332c:	f7fd ff4e 	bl	80011cc <DisplayOptions>
 8003330:	2201      	movs	r2, #1
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	4010      	ands	r0, r2
 8003336:	01c0      	lsls	r0, r0, #7
 8003338:	43ab      	bics	r3, r5
 800333a:	4303      	orrs	r3, r0
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	e7e6      	b.n	800330e <main+0x1316>
														MsgBox((unsigned char *)MsgStr[11],0,0);
 8003340:	2200      	movs	r2, #0
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	0011      	movs	r1, r2
 8003346:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003348:	f7fd fe00 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Alarm1=DisplayOptions(33,W1209PY.Alarm1,2);
 800334c:	2508      	movs	r5, #8
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	4c21      	ldr	r4, [pc, #132]	@ (80033d8 <main+0x13e0>)
 8003352:	2b01      	cmp	r3, #1
 8003354:	d003      	beq.n	800335e <main+0x1366>
 8003356:	6833      	ldr	r3, [r6, #0]
 8003358:	4a22      	ldr	r2, [pc, #136]	@ (80033e4 <main+0x13ec>)
 800335a:	4293      	cmp	r3, r2
 800335c:	dd08      	ble.n	8003370 <main+0x1378>
														Pressed_BSet=Timeout=0;
 800335e:	2300      	movs	r3, #0
 8003360:	6033      	str	r3, [r6, #0]
 8003362:	603b      	str	r3, [r7, #0]
														if(W1209PY.Alarm1) Edit_Temperatures_Simple((int32_t*)&W1209PY.Alarm1_TempK100, 10);
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	4828      	ldr	r0, [pc, #160]	@ (8003408 <main+0x1410>)
 8003368:	071b      	lsls	r3, r3, #28
 800336a:	d400      	bmi.n	800336e <main+0x1376>
 800336c:	e72c      	b.n	80031c8 <main+0x11d0>
 800336e:	e798      	b.n	80032a2 <main+0x12aa>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Alarm1=DisplayOptions(33,W1209PY.Alarm1,2);
 8003370:	6821      	ldr	r1, [r4, #0]
 8003372:	2202      	movs	r2, #2
 8003374:	0709      	lsls	r1, r1, #28
 8003376:	2021      	movs	r0, #33	@ 0x21
 8003378:	0fc9      	lsrs	r1, r1, #31
 800337a:	f7fd ff27 	bl	80011cc <DisplayOptions>
 800337e:	2201      	movs	r2, #1
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	4010      	ands	r0, r2
 8003384:	00c0      	lsls	r0, r0, #3
 8003386:	43ab      	bics	r3, r5
 8003388:	4303      	orrs	r3, r0
 800338a:	6023      	str	r3, [r4, #0]
 800338c:	e7df      	b.n	800334e <main+0x1356>
														MsgBox((unsigned char *)MsgStr[49],0,0);
 800338e:	2200      	movs	r2, #0
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	0011      	movs	r1, r2
 8003394:	33c4      	adds	r3, #196	@ 0xc4
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	f7fd fdd8 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Alarm2=DisplayOptions(33,W1209PY.Alarm2,2);
 800339c:	2510      	movs	r5, #16
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	4c0d      	ldr	r4, [pc, #52]	@ (80033d8 <main+0x13e0>)
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d003      	beq.n	80033ae <main+0x13b6>
 80033a6:	6833      	ldr	r3, [r6, #0]
 80033a8:	4a0e      	ldr	r2, [pc, #56]	@ (80033e4 <main+0x13ec>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	dd30      	ble.n	8003410 <main+0x1418>
														Pressed_BSet=Timeout=0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	6033      	str	r3, [r6, #0]
 80033b2:	603b      	str	r3, [r7, #0]
														if(W1209PY.Alarm2) Edit_Temperatures_Simple((int32_t*)&W1209PY.Alarm2_TempK100, 10);
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	4815      	ldr	r0, [pc, #84]	@ (800340c <main+0x1414>)
 80033b8:	06db      	lsls	r3, r3, #27
 80033ba:	d400      	bmi.n	80033be <main+0x13c6>
 80033bc:	e704      	b.n	80031c8 <main+0x11d0>
 80033be:	e770      	b.n	80032a2 <main+0x12aa>
 80033c0:	2000045c 	.word	0x2000045c
 80033c4:	200004d0 	.word	0x200004d0
 80033c8:	000003ff 	.word	0x000003ff
 80033cc:	20000438 	.word	0x20000438
 80033d0:	20000460 	.word	0x20000460
 80033d4:	200004d4 	.word	0x200004d4
 80033d8:	200003b0 	.word	0x200003b0
 80033dc:	20000444 	.word	0x20000444
 80033e0:	20000440 	.word	0x20000440
 80033e4:	00004e1f 	.word	0x00004e1f
 80033e8:	200004b0 	.word	0x200004b0
 80033ec:	20000464 	.word	0x20000464
 80033f0:	fffff90e 	.word	0xfffff90e
 80033f4:	000006f2 	.word	0x000006f2
 80033f8:	fffff90f 	.word	0xfffff90f
 80033fc:	000006f1 	.word	0x000006f1
 8003400:	200003c8 	.word	0x200003c8
 8003404:	200003cc 	.word	0x200003cc
 8003408:	200003d0 	.word	0x200003d0
 800340c:	200003d4 	.word	0x200003d4
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Alarm2=DisplayOptions(33,W1209PY.Alarm2,2);
 8003410:	6821      	ldr	r1, [r4, #0]
 8003412:	2202      	movs	r2, #2
 8003414:	06c9      	lsls	r1, r1, #27
 8003416:	2021      	movs	r0, #33	@ 0x21
 8003418:	0fc9      	lsrs	r1, r1, #31
 800341a:	f7fd fed7 	bl	80011cc <DisplayOptions>
 800341e:	2201      	movs	r2, #1
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	4010      	ands	r0, r2
 8003424:	0100      	lsls	r0, r0, #4
 8003426:	43ab      	bics	r3, r5
 8003428:	4303      	orrs	r3, r0
 800342a:	6023      	str	r3, [r4, #0]
 800342c:	e7b7      	b.n	800339e <main+0x13a6>
														MsgBox((unsigned char *)MsgStr[12],0,0);
 800342e:	2200      	movs	r2, #0
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	0011      	movs	r1, r2
 8003434:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003436:	f7fd fd89 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.fahrenheit=DisplayOptions(35,W1209PY.fahrenheit,2);
 800343a:	2520      	movs	r5, #32
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d100      	bne.n	8003444 <main+0x144c>
 8003442:	e6c1      	b.n	80031c8 <main+0x11d0>
 8003444:	6833      	ldr	r3, [r6, #0]
 8003446:	4ad7      	ldr	r2, [pc, #860]	@ (80037a4 <main+0x17ac>)
 8003448:	4293      	cmp	r3, r2
 800344a:	dd00      	ble.n	800344e <main+0x1456>
 800344c:	e6bc      	b.n	80031c8 <main+0x11d0>
 800344e:	4cd6      	ldr	r4, [pc, #856]	@ (80037a8 <main+0x17b0>)
 8003450:	2202      	movs	r2, #2
 8003452:	6821      	ldr	r1, [r4, #0]
 8003454:	2023      	movs	r0, #35	@ 0x23
 8003456:	0689      	lsls	r1, r1, #26
 8003458:	0fc9      	lsrs	r1, r1, #31
 800345a:	f7fd feb7 	bl	80011cc <DisplayOptions>
 800345e:	2201      	movs	r2, #1
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	4010      	ands	r0, r2
 8003464:	0140      	lsls	r0, r0, #5
 8003466:	43ab      	bics	r3, r5
 8003468:	4303      	orrs	r3, r0
 800346a:	6023      	str	r3, [r4, #0]
 800346c:	e7e6      	b.n	800343c <main+0x1444>
														MsgBox((unsigned char *)MsgStr[13],0,0);
 800346e:	2200      	movs	r2, #0
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	0011      	movs	r1, r2
 8003474:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003476:	f7fd fd69 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 800347a:	2100      	movs	r1, #0
														Aux=0;
 800347c:	4bcb      	ldr	r3, [pc, #812]	@ (80037ac <main+0x17b4>)
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	6019      	str	r1, [r3, #0]
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d003      	beq.n	8003490 <main+0x1498>
 8003488:	6833      	ldr	r3, [r6, #0]
 800348a:	4ac6      	ldr	r2, [pc, #792]	@ (80037a4 <main+0x17ac>)
 800348c:	4293      	cmp	r3, r2
 800348e:	dd27      	ble.n	80034e0 <main+0x14e8>
														Pressed_BSet=Timeout=0;
 8003490:	2500      	movs	r5, #0
 8003492:	6035      	str	r5, [r6, #0]
 8003494:	603d      	str	r5, [r7, #0]
														if(Aux==1) {
 8003496:	2901      	cmp	r1, #1
 8003498:	d000      	beq.n	800349c <main+0x14a4>
 800349a:	e695      	b.n	80031c8 <main+0x11d0>
															Default_Params();
 800349c:	f7fe fa7a 	bl	8001994 <Default_Params>
															MsgBox((unsigned char *)MsgStr[75],0,0);
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	0029      	movs	r1, r5
 80034a4:	33fc      	adds	r3, #252	@ 0xfc
 80034a6:	002a      	movs	r2, r5
 80034a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80034aa:	f7fd fd4f 	bl	8000f4c <MsgBox>
															while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 80034ae:	0029      	movs	r1, r5
															Aux=0;
 80034b0:	9b00      	ldr	r3, [sp, #0]
 80034b2:	6019      	str	r1, [r3, #0]
															while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d003      	beq.n	80034c2 <main+0x14ca>
 80034ba:	6833      	ldr	r3, [r6, #0]
 80034bc:	4ab9      	ldr	r2, [pc, #740]	@ (80037a4 <main+0x17ac>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	dd14      	ble.n	80034ec <main+0x14f4>
															Pressed_BSet=Timeout=0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	6033      	str	r3, [r6, #0]
 80034c6:	603b      	str	r3, [r7, #0]
															if(Aux==1) Erase_Profiles(); 
 80034c8:	2901      	cmp	r1, #1
 80034ca:	d101      	bne.n	80034d0 <main+0x14d8>
 80034cc:	f7fe fc70 	bl	8001db0 <Erase_Profiles>
															MsgStr=W1209PY.Language?(unsigned char **)MsgStrSp:(unsigned char **)MsgStrEn;
 80034d0:	4bb5      	ldr	r3, [pc, #724]	@ (80037a8 <main+0x17b0>)
 80034d2:	681a      	ldr	r2, [r3, #0]
														MsgStr=W1209PY.Language?(unsigned char **)MsgStrSp:(unsigned char **)MsgStrEn;
 80034d4:	4bb6      	ldr	r3, [pc, #728]	@ (80037b0 <main+0x17b8>)
 80034d6:	0492      	lsls	r2, r2, #18
 80034d8:	d500      	bpl.n	80034dc <main+0x14e4>
 80034da:	4bb6      	ldr	r3, [pc, #728]	@ (80037b4 <main+0x17bc>)
 80034dc:	6023      	str	r3, [r4, #0]
														break;
 80034de:	e673      	b.n	80031c8 <main+0x11d0>
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 80034e0:	2202      	movs	r2, #2
 80034e2:	201f      	movs	r0, #31
 80034e4:	f7fd fe72 	bl	80011cc <DisplayOptions>
 80034e8:	0001      	movs	r1, r0
 80034ea:	e7c7      	b.n	800347c <main+0x1484>
															while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 80034ec:	2202      	movs	r2, #2
 80034ee:	201f      	movs	r0, #31
 80034f0:	f7fd fe6c 	bl	80011cc <DisplayOptions>
 80034f4:	0001      	movs	r1, r0
 80034f6:	e7db      	b.n	80034b0 <main+0x14b8>
														Aux=W1209PY.Timer_Enable;
 80034f8:	4aab      	ldr	r2, [pc, #684]	@ (80037a8 <main+0x17b0>)
 80034fa:	49ac      	ldr	r1, [pc, #688]	@ (80037ac <main+0x17b4>)
 80034fc:	6813      	ldr	r3, [r2, #0]
 80034fe:	055b      	lsls	r3, r3, #21
 8003500:	0fdb      	lsrs	r3, r3, #31
 8003502:	600b      	str	r3, [r1, #0]
														W1209PY.Timer_Enable=0;
 8003504:	6813      	ldr	r3, [r2, #0]
 8003506:	49ac      	ldr	r1, [pc, #688]	@ (80037b8 <main+0x17c0>)
 8003508:	400b      	ands	r3, r1
 800350a:	6013      	str	r3, [r2, #0]
														MsgBox((unsigned char *)MsgStr[54],0,0);
 800350c:	2200      	movs	r2, #0
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	0011      	movs	r1, r2
 8003512:	33d8      	adds	r3, #216	@ 0xd8
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	f7fd fd19 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 800351a:	4da4      	ldr	r5, [pc, #656]	@ (80037ac <main+0x17b4>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6829      	ldr	r1, [r5, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d003      	beq.n	800352c <main+0x1534>
 8003524:	6833      	ldr	r3, [r6, #0]
 8003526:	4a9f      	ldr	r2, [pc, #636]	@ (80037a4 <main+0x17ac>)
 8003528:	4293      	cmp	r3, r2
 800352a:	dd71      	ble.n	8003610 <main+0x1618>
														Pressed_BSet=Timeout=0;
 800352c:	2300      	movs	r3, #0
 800352e:	6033      	str	r3, [r6, #0]
 8003530:	603b      	str	r3, [r7, #0]
														if(Aux){
 8003532:	4299      	cmp	r1, r3
 8003534:	d05e      	beq.n	80035f4 <main+0x15fc>
															MsgBox((unsigned char *)MsgStr[55],0,0);
 8003536:	2200      	movs	r2, #0
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	0011      	movs	r1, r2
 800353c:	33dc      	adds	r3, #220	@ 0xdc
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	f7fd fd04 	bl	8000f4c <MsgBox>
															BF_Edit=(int32_t)W1209PY.TM_Days;
 8003544:	4d98      	ldr	r5, [pc, #608]	@ (80037a8 <main+0x17b0>)
 8003546:	4a9d      	ldr	r2, [pc, #628]	@ (80037bc <main+0x17c4>)
 8003548:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800354a:	9200      	str	r2, [sp, #0]
 800354c:	051b      	lsls	r3, r3, #20
 800354e:	0d1b      	lsrs	r3, r3, #20
 8003550:	6013      	str	r3, [r2, #0]
															Edit_Value_Simple((int32_t*)&BF_Edit, 999, 0, 0);
 8003552:	2300      	movs	r3, #0
 8003554:	499a      	ldr	r1, [pc, #616]	@ (80037c0 <main+0x17c8>)
 8003556:	001a      	movs	r2, r3
 8003558:	9800      	ldr	r0, [sp, #0]
 800355a:	f7fe f919 	bl	8001790 <Edit_Value_Simple>
															W1209PY.TM_Days=BF_Edit;
 800355e:	9b00      	ldr	r3, [sp, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003564:	0512      	lsls	r2, r2, #20
 8003566:	0b1b      	lsrs	r3, r3, #12
 8003568:	0d12      	lsrs	r2, r2, #20
 800356a:	031b      	lsls	r3, r3, #12
 800356c:	4313      	orrs	r3, r2
 800356e:	632b      	str	r3, [r5, #48]	@ 0x30
															Pressed_BSet=Timeout=0;
 8003570:	2300      	movs	r3, #0
															MsgBox((unsigned char *)MsgStr[56],0,0);
 8003572:	2200      	movs	r2, #0
															Pressed_BSet=Timeout=0;
 8003574:	6033      	str	r3, [r6, #0]
 8003576:	603b      	str	r3, [r7, #0]
															MsgBox((unsigned char *)MsgStr[56],0,0);
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	0011      	movs	r1, r2
 800357c:	33e0      	adds	r3, #224	@ 0xe0
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	f7fd fce4 	bl	8000f4c <MsgBox>
															BF_Edit=(int32_t)W1209PY.TM_Hours;
 8003584:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003586:	9a00      	ldr	r2, [sp, #0]
 8003588:	03db      	lsls	r3, r3, #15
 800358a:	0edb      	lsrs	r3, r3, #27
 800358c:	6013      	str	r3, [r2, #0]
															Edit_Value_Simple((int32_t*)&BF_Edit, 23, 0, 0);
 800358e:	2300      	movs	r3, #0
 8003590:	2117      	movs	r1, #23
 8003592:	001a      	movs	r2, r3
 8003594:	9800      	ldr	r0, [sp, #0]
 8003596:	f7fe f8fb 	bl	8001790 <Edit_Value_Simple>
															W1209PY.TM_Hours=BF_Edit;
 800359a:	211f      	movs	r1, #31
 800359c:	9a00      	ldr	r2, [sp, #0]
 800359e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	400a      	ands	r2, r1
 80035a4:	4987      	ldr	r1, [pc, #540]	@ (80037c4 <main+0x17cc>)
 80035a6:	0312      	lsls	r2, r2, #12
 80035a8:	400b      	ands	r3, r1
 80035aa:	4313      	orrs	r3, r2
 80035ac:	632b      	str	r3, [r5, #48]	@ 0x30
															Pressed_BSet=Timeout=0;
 80035ae:	2300      	movs	r3, #0
															MsgBox((unsigned char *)MsgStr[57],0,0);
 80035b0:	2200      	movs	r2, #0
															Pressed_BSet=Timeout=0;
 80035b2:	6033      	str	r3, [r6, #0]
 80035b4:	603b      	str	r3, [r7, #0]
															MsgBox((unsigned char *)MsgStr[57],0,0);
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	0011      	movs	r1, r2
 80035ba:	33e4      	adds	r3, #228	@ 0xe4
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	f7fd fcc5 	bl	8000f4c <MsgBox>
															BF_Edit=(int32_t)W1209PY.TM_Minutes;
 80035c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80035c4:	9a00      	ldr	r2, [sp, #0]
 80035c6:	025b      	lsls	r3, r3, #9
 80035c8:	0e9b      	lsrs	r3, r3, #26
 80035ca:	6013      	str	r3, [r2, #0]
															Edit_Value_Simple((int32_t*)&BF_Edit, 59, 0, 0);
 80035cc:	2300      	movs	r3, #0
 80035ce:	213b      	movs	r1, #59	@ 0x3b
 80035d0:	001a      	movs	r2, r3
 80035d2:	9800      	ldr	r0, [sp, #0]
 80035d4:	f7fe f8dc 	bl	8001790 <Edit_Value_Simple>
															W1209PY.TM_Minutes=BF_Edit;
 80035d8:	213f      	movs	r1, #63	@ 0x3f
 80035da:	9b00      	ldr	r3, [sp, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80035e0:	400a      	ands	r2, r1
 80035e2:	4979      	ldr	r1, [pc, #484]	@ (80037c8 <main+0x17d0>)
 80035e4:	0452      	lsls	r2, r2, #17
 80035e6:	400b      	ands	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	632b      	str	r3, [r5, #48]	@ 0x30
															W1209PY.TM_Seconds=0;
 80035ec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80035ee:	4a77      	ldr	r2, [pc, #476]	@ (80037cc <main+0x17d4>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	632b      	str	r3, [r5, #48]	@ 0x30
														System_Ready=1;
 80035f4:	2001      	movs	r0, #1
 80035f6:	4b76      	ldr	r3, [pc, #472]	@ (80037d0 <main+0x17d8>)
														W1209PY.Timer_Enable=Aux;
 80035f8:	496b      	ldr	r1, [pc, #428]	@ (80037a8 <main+0x17b0>)
														System_Ready=1;
 80035fa:	6018      	str	r0, [r3, #0]
														W1209PY.Timer_Enable=Aux;
 80035fc:	4b6b      	ldr	r3, [pc, #428]	@ (80037ac <main+0x17b4>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	680b      	ldr	r3, [r1, #0]
 8003602:	4002      	ands	r2, r0
 8003604:	486c      	ldr	r0, [pc, #432]	@ (80037b8 <main+0x17c0>)
 8003606:	0292      	lsls	r2, r2, #10
 8003608:	4003      	ands	r3, r0
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
														break;
 800360e:	e5db      	b.n	80031c8 <main+0x11d0>
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 8003610:	2202      	movs	r2, #2
 8003612:	201f      	movs	r0, #31
 8003614:	f7fd fdda 	bl	80011cc <DisplayOptions>
 8003618:	6028      	str	r0, [r5, #0]
 800361a:	e77e      	b.n	800351a <main+0x1522>
														MsgBox((unsigned char *)MsgStr[14],0,0);
 800361c:	2200      	movs	r2, #0
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	0011      	movs	r1, r2
 8003622:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003624:	f7fd fc92 	bl	8000f4c <MsgBox>
														Edit_Temperatures(28,(int32_t*)&W1209PY.Target);
 8003628:	201c      	movs	r0, #28
 800362a:	496a      	ldr	r1, [pc, #424]	@ (80037d4 <main+0x17dc>)
 800362c:	f7fd fea0 	bl	8001370 <Edit_Temperatures>
														break;
 8003630:	e5ca      	b.n	80031c8 <main+0x11d0>
														MsgBox((unsigned char *)MsgStr[15],0,0);
 8003632:	2200      	movs	r2, #0
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	0011      	movs	r1, r2
 8003638:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800363a:	f7fd fc87 	bl	8000f4c <MsgBox>
														Edit_Resistors(62,(int32_t *)&NTC.R_Pullup);
 800363e:	2303      	movs	r3, #3
 8003640:	2200      	movs	r2, #0
 8003642:	203e      	movs	r0, #62	@ 0x3e
 8003644:	4964      	ldr	r1, [pc, #400]	@ (80037d8 <main+0x17e0>)
 8003646:	f7fd fe33 	bl	80012b0 <Edit_Scalars>
														break;
 800364a:	e5bd      	b.n	80031c8 <main+0x11d0>
														MsgBox((unsigned char *)MsgStr[16],0,0);
 800364c:	2200      	movs	r2, #0
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	0011      	movs	r1, r2
 8003652:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003654:	f7fd fc7a 	bl	8000f4c <MsgBox>
														Edit_Resistors(37,(int32_t *)&NTC.R0);
 8003658:	2303      	movs	r3, #3
 800365a:	2200      	movs	r2, #0
 800365c:	2025      	movs	r0, #37	@ 0x25
 800365e:	495f      	ldr	r1, [pc, #380]	@ (80037dc <main+0x17e4>)
 8003660:	f7fd fe26 	bl	80012b0 <Edit_Scalars>
														NTC.Log_R0=log_q31(NTC.R0);														
 8003664:	4c5c      	ldr	r4, [pc, #368]	@ (80037d8 <main+0x17e0>)
 8003666:	68e0      	ldr	r0, [r4, #12]
 8003668:	f7fc ffb4 	bl	80005d4 <log_q31>
 800366c:	6120      	str	r0, [r4, #16]
														break;
 800366e:	e5ab      	b.n	80031c8 <main+0x11d0>
														MsgBox((unsigned char *)MsgStr[17],0,0);
 8003670:	2200      	movs	r2, #0
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	0011      	movs	r1, r2
 8003676:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003678:	f7fd fc68 	bl	8000f4c <MsgBox>
														Edit_Temperatures(38,(int32_t*)&NTC.T0K);
 800367c:	2026      	movs	r0, #38	@ 0x26
 800367e:	4958      	ldr	r1, [pc, #352]	@ (80037e0 <main+0x17e8>)
 8003680:	f7fd fe76 	bl	8001370 <Edit_Temperatures>
														NTC.Beta_T0K=(NTC.Beta)/NTC.T0K;
 8003684:	4c54      	ldr	r4, [pc, #336]	@ (80037d8 <main+0x17e0>)
 8003686:	2300      	movs	r3, #0
 8003688:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800368a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800368c:	69e2      	ldr	r2, [r4, #28]
 800368e:	f7fc fea1 	bl	80003d4 <__aeabi_ldivmod>
 8003692:	0002      	movs	r2, r0
 8003694:	000b      	movs	r3, r1
 8003696:	6322      	str	r2, [r4, #48]	@ 0x30
 8003698:	6363      	str	r3, [r4, #52]	@ 0x34
														break;
 800369a:	e595      	b.n	80031c8 <main+0x11d0>
														MsgBox((unsigned char *)MsgStr[18],0,0);
 800369c:	2200      	movs	r2, #0
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	0011      	movs	r1, r2
 80036a2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80036a4:	f7fd fc52 	bl	8000f4c <MsgBox>
														Aux=(NTC.Beta>>26);
 80036a8:	4d4b      	ldr	r5, [pc, #300]	@ (80037d8 <main+0x17e0>)
 80036aa:	4e40      	ldr	r6, [pc, #256]	@ (80037ac <main+0x17b4>)
 80036ac:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80036ae:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80036b0:	0193      	lsls	r3, r2, #6
 80036b2:	0e8a      	lsrs	r2, r1, #26
 80036b4:	431a      	orrs	r2, r3
														Edit_Scalars(39,(int32_t *)&Aux,1,2);
 80036b6:	0031      	movs	r1, r6
 80036b8:	2302      	movs	r3, #2
 80036ba:	2027      	movs	r0, #39	@ 0x27
														Aux=(NTC.Beta>>26);
 80036bc:	6032      	str	r2, [r6, #0]
														Edit_Scalars(39,(int32_t *)&Aux,1,2);
 80036be:	2201      	movs	r2, #1
 80036c0:	f7fd fdf6 	bl	80012b0 <Edit_Scalars>
														NTC.Beta=(int64_t)Aux<<26;
 80036c4:	6833      	ldr	r3, [r6, #0]
 80036c6:	119a      	asrs	r2, r3, #6
 80036c8:	069b      	lsls	r3, r3, #26
 80036ca:	9203      	str	r2, [sp, #12]
 80036cc:	9302      	str	r3, [sp, #8]
 80036ce:	9a02      	ldr	r2, [sp, #8]
 80036d0:	9b03      	ldr	r3, [sp, #12]
 80036d2:	62aa      	str	r2, [r5, #40]	@ 0x28
 80036d4:	62eb      	str	r3, [r5, #44]	@ 0x2c
														NTC.Beta_T0K=(NTC.Beta)/NTC.T0K;
 80036d6:	2300      	movs	r3, #0
 80036d8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80036da:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80036dc:	69ea      	ldr	r2, [r5, #28]
 80036de:	f7fc fe79 	bl	80003d4 <__aeabi_ldivmod>
 80036e2:	0002      	movs	r2, r0
 80036e4:	000b      	movs	r3, r1
 80036e6:	632a      	str	r2, [r5, #48]	@ 0x30
 80036e8:	636b      	str	r3, [r5, #52]	@ 0x34
														MsgBox((unsigned char *)MsgStr[42],0,0);
 80036ea:	2200      	movs	r2, #0
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	0011      	movs	r1, r2
 80036f0:	33a8      	adds	r3, #168	@ 0xa8
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	f7fd fc2a 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 80036f8:	2100      	movs	r1, #0
 80036fa:	4b3a      	ldr	r3, [pc, #232]	@ (80037e4 <main+0x17ec>)
														Aux=0;
 80036fc:	6031      	str	r1, [r6, #0]
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d004      	beq.n	800370e <main+0x1716>
 8003704:	4b38      	ldr	r3, [pc, #224]	@ (80037e8 <main+0x17f0>)
 8003706:	4a27      	ldr	r2, [pc, #156]	@ (80037a4 <main+0x17ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4293      	cmp	r3, r2
 800370c:	dd15      	ble.n	800373a <main+0x1742>
														if(Aux){
 800370e:	2900      	cmp	r1, #0
 8003710:	d100      	bne.n	8003714 <main+0x171c>
 8003712:	e559      	b.n	80031c8 <main+0x11d0>
															int64_t Beta_T1K=(NTC.Beta/NTC.T1K);
 8003714:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8003716:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8003718:	2300      	movs	r3, #0
 800371a:	6a2a      	ldr	r2, [r5, #32]
 800371c:	f7fc fe5a 	bl	80003d4 <__aeabi_ldivmod>
															NTC.Log_R1=NTC.Log_R0+(Beta_T1K-NTC.Beta_T0K);
 8003720:	692c      	ldr	r4, [r5, #16]
 8003722:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8003724:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
 8003726:	1ba4      	subs	r4, r4, r6
 8003728:	1824      	adds	r4, r4, r0
 800372a:	61ac      	str	r4, [r5, #24]
															NTC.R1=intexp(NTC.Log_R1+0x55F3439C);
 800372c:	69a8      	ldr	r0, [r5, #24]
 800372e:	4b2f      	ldr	r3, [pc, #188]	@ (80037ec <main+0x17f4>)
 8003730:	18c0      	adds	r0, r0, r3
 8003732:	f7fd f881 	bl	8000838 <intexp>
 8003736:	6168      	str	r0, [r5, #20]
 8003738:	e546      	b.n	80031c8 <main+0x11d0>
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 800373a:	2202      	movs	r2, #2
 800373c:	201f      	movs	r0, #31
 800373e:	f7fd fd45 	bl	80011cc <DisplayOptions>
 8003742:	0001      	movs	r1, r0
 8003744:	e7d9      	b.n	80036fa <main+0x1702>
														MsgBox((unsigned char *)MsgStr[19],0,0);
 8003746:	2200      	movs	r2, #0
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	0011      	movs	r1, r2
 800374c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800374e:	f7fd fbfd 	bl	8000f4c <MsgBox>
														Edit_Resistors(40,(int32_t *)&NTC.R1);
 8003752:	2303      	movs	r3, #3
 8003754:	2200      	movs	r2, #0
 8003756:	4926      	ldr	r1, [pc, #152]	@ (80037f0 <main+0x17f8>)
 8003758:	2028      	movs	r0, #40	@ 0x28
 800375a:	f7fd fda9 	bl	80012b0 <Edit_Scalars>
														NTC.Log_R1=log_q31(NTC.R1);		
 800375e:	4d1e      	ldr	r5, [pc, #120]	@ (80037d8 <main+0x17e0>)
 8003760:	6968      	ldr	r0, [r5, #20]
 8003762:	f7fc ff37 	bl	80005d4 <log_q31>
														MsgBox((unsigned char *)MsgStr[43],0,0);
 8003766:	2200      	movs	r2, #0
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	0011      	movs	r1, r2
 800376c:	33ac      	adds	r3, #172	@ 0xac
														NTC.Log_R1=log_q31(NTC.R1);		
 800376e:	61a8      	str	r0, [r5, #24]
														MsgBox((unsigned char *)MsgStr[43],0,0);
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	f7fd fbeb 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 8003776:	2100      	movs	r1, #0
														Aux=0;
 8003778:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <main+0x17b4>)
 800377a:	6019      	str	r1, [r3, #0]
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d003      	beq.n	800378a <main+0x1792>
 8003782:	6833      	ldr	r3, [r6, #0]
 8003784:	4a07      	ldr	r2, [pc, #28]	@ (80037a4 <main+0x17ac>)
 8003786:	4293      	cmp	r3, r2
 8003788:	dd05      	ble.n	8003796 <main+0x179e>
														if(Aux) Update_Beta();
 800378a:	2900      	cmp	r1, #0
 800378c:	d100      	bne.n	8003790 <main+0x1798>
 800378e:	e51b      	b.n	80031c8 <main+0x11d0>
 8003790:	f7fd feee 	bl	8001570 <Update_Beta>
 8003794:	e518      	b.n	80031c8 <main+0x11d0>
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 8003796:	2202      	movs	r2, #2
 8003798:	201f      	movs	r0, #31
 800379a:	f7fd fd17 	bl	80011cc <DisplayOptions>
 800379e:	0001      	movs	r1, r0
 80037a0:	e7ea      	b.n	8003778 <main+0x1780>
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	00004e1f 	.word	0x00004e1f
 80037a8:	200003b0 	.word	0x200003b0
 80037ac:	20000444 	.word	0x20000444
 80037b0:	2000023c 	.word	0x2000023c
 80037b4:	200000f4 	.word	0x200000f4
 80037b8:	fffffbff 	.word	0xfffffbff
 80037bc:	2000043c 	.word	0x2000043c
 80037c0:	000003e7 	.word	0x000003e7
 80037c4:	fffe0fff 	.word	0xfffe0fff
 80037c8:	ff81ffff 	.word	0xff81ffff
 80037cc:	e07fffff 	.word	0xe07fffff
 80037d0:	2000048c 	.word	0x2000048c
 80037d4:	200003b4 	.word	0x200003b4
 80037d8:	200003e8 	.word	0x200003e8
 80037dc:	200003f4 	.word	0x200003f4
 80037e0:	20000404 	.word	0x20000404
 80037e4:	20000464 	.word	0x20000464
 80037e8:	200004b0 	.word	0x200004b0
 80037ec:	55f3439c 	.word	0x55f3439c
 80037f0:	200003fc 	.word	0x200003fc
														MsgBox((unsigned char *)MsgStr[20],0,0);
 80037f4:	2200      	movs	r2, #0
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	0011      	movs	r1, r2
 80037fa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80037fc:	f7fd fba6 	bl	8000f4c <MsgBox>
														Edit_Temperatures(41,(int32_t*)&NTC.T1K);
 8003800:	2029      	movs	r0, #41	@ 0x29
 8003802:	49e7      	ldr	r1, [pc, #924]	@ (8003ba0 <main+0x1ba8>)
 8003804:	f7fd fdb4 	bl	8001370 <Edit_Temperatures>
														MsgBox((unsigned char *)MsgStr[43],0,0);
 8003808:	2200      	movs	r2, #0
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	0011      	movs	r1, r2
 800380e:	33ac      	adds	r3, #172	@ 0xac
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	f7fd fb9b 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 8003816:	2100      	movs	r1, #0
														Aux=0;
 8003818:	4be2      	ldr	r3, [pc, #904]	@ (8003ba4 <main+0x1bac>)
 800381a:	6019      	str	r1, [r3, #0]
														while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d0b3      	beq.n	800378a <main+0x1792>
 8003822:	6833      	ldr	r3, [r6, #0]
 8003824:	4ae0      	ldr	r2, [pc, #896]	@ (8003ba8 <main+0x1bb0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	dcaf      	bgt.n	800378a <main+0x1792>
 800382a:	2202      	movs	r2, #2
 800382c:	201f      	movs	r0, #31
 800382e:	f7fd fccd 	bl	80011cc <DisplayOptions>
 8003832:	0001      	movs	r1, r0
 8003834:	e7f0      	b.n	8003818 <main+0x1820>
														MsgBox((unsigned char *)MsgStr[21],0,0);
 8003836:	2200      	movs	r2, #0
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	0011      	movs	r1, r2
 800383c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800383e:	f7fd fb85 	bl	8000f4c <MsgBox>
														Aux=0;
 8003842:	2300      	movs	r3, #0
 8003844:	4cd7      	ldr	r4, [pc, #860]	@ (8003ba4 <main+0x1bac>)
 8003846:	6023      	str	r3, [r4, #0]
														while((Pressed_BSet!=1)) { Aux=DisplayOptions(31,Aux,2); Timeout=0;}
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6821      	ldr	r1, [r4, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d132      	bne.n	80038b6 <main+0x18be>
														if(Aux){
 8003850:	2900      	cmp	r1, #0
 8003852:	d100      	bne.n	8003856 <main+0x185e>
 8003854:	e4b8      	b.n	80031c8 <main+0x11d0>
															NTC.R0=ADC_to_NTC(Analog_Read);
 8003856:	4dd5      	ldr	r5, [pc, #852]	@ (8003bac <main+0x1bb4>)
 8003858:	4ed5      	ldr	r6, [pc, #852]	@ (8003bb0 <main+0x1bb8>)
 800385a:	6828      	ldr	r0, [r5, #0]
 800385c:	6831      	ldr	r1, [r6, #0]
 800385e:	4fd5      	ldr	r7, [pc, #852]	@ (8003bb4 <main+0x1bbc>)
 8003860:	4348      	muls	r0, r1
 8003862:	2180      	movs	r1, #128	@ 0x80
 8003864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003866:	0149      	lsls	r1, r1, #5
 8003868:	0f5b      	lsrs	r3, r3, #29
 800386a:	4099      	lsls	r1, r3
 800386c:	6832      	ldr	r2, [r6, #0]
 800386e:	6bec      	ldr	r4, [r5, #60]	@ 0x3c
 8003870:	1a89      	subs	r1, r1, r2
 8003872:	f7fc fc39 	bl	80000e8 <__udivsi3>
 8003876:	1b00      	subs	r0, r0, r4
 8003878:	60e8      	str	r0, [r5, #12]
															NTC.Log_R0=Log_ADC_to_NTC(Analog_Read);
 800387a:	6828      	ldr	r0, [r5, #0]
 800387c:	6834      	ldr	r4, [r6, #0]
 800387e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003880:	4360      	muls	r0, r4
 8003882:	2480      	movs	r4, #128	@ 0x80
 8003884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003886:	0164      	lsls	r4, r4, #5
 8003888:	0f52      	lsrs	r2, r2, #29
 800388a:	4094      	lsls	r4, r2
 800388c:	6831      	ldr	r1, [r6, #0]
 800388e:	1a62      	subs	r2, r4, r1
 8003890:	4353      	muls	r3, r2
 8003892:	1ac0      	subs	r0, r0, r3
 8003894:	f7fc fe9e 	bl	80005d4 <log_q31>
 8003898:	0004      	movs	r4, r0
 800389a:	2080      	movs	r0, #128	@ 0x80
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	0140      	lsls	r0, r0, #5
 80038a0:	0f5b      	lsrs	r3, r3, #29
 80038a2:	4098      	lsls	r0, r3
 80038a4:	6832      	ldr	r2, [r6, #0]
 80038a6:	1a80      	subs	r0, r0, r2
 80038a8:	f7fc fe94 	bl	80005d4 <log_q31>
 80038ac:	4bc2      	ldr	r3, [pc, #776]	@ (8003bb8 <main+0x1bc0>)
 80038ae:	18e4      	adds	r4, r4, r3
 80038b0:	1a24      	subs	r4, r4, r0
 80038b2:	612c      	str	r4, [r5, #16]
 80038b4:	e488      	b.n	80031c8 <main+0x11d0>
														while((Pressed_BSet!=1)) { Aux=DisplayOptions(31,Aux,2); Timeout=0;}
 80038b6:	2202      	movs	r2, #2
 80038b8:	201f      	movs	r0, #31
 80038ba:	f7fd fc87 	bl	80011cc <DisplayOptions>
 80038be:	2300      	movs	r3, #0
 80038c0:	6020      	str	r0, [r4, #0]
 80038c2:	6033      	str	r3, [r6, #0]
 80038c4:	e7c0      	b.n	8003848 <main+0x1850>
														MsgBox((unsigned char *)MsgStr[22],0,0);
 80038c6:	2200      	movs	r2, #0
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	0011      	movs	r1, r2
 80038cc:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80038ce:	f7fd fb3d 	bl	8000f4c <MsgBox>
														Aux=0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	4cb3      	ldr	r4, [pc, #716]	@ (8003ba4 <main+0x1bac>)
 80038d6:	6023      	str	r3, [r4, #0]
														while((Pressed_BSet!=1)) { Aux=DisplayOptions(31,Aux,2); Timeout=0;}
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6821      	ldr	r1, [r4, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d132      	bne.n	8003946 <main+0x194e>
														if(Aux){
 80038e0:	2900      	cmp	r1, #0
 80038e2:	d100      	bne.n	80038e6 <main+0x18ee>
 80038e4:	e470      	b.n	80031c8 <main+0x11d0>
															NTC.R1=ADC_to_NTC(Analog_Read);
 80038e6:	4db1      	ldr	r5, [pc, #708]	@ (8003bac <main+0x1bb4>)
 80038e8:	4eb1      	ldr	r6, [pc, #708]	@ (8003bb0 <main+0x1bb8>)
 80038ea:	6828      	ldr	r0, [r5, #0]
 80038ec:	6831      	ldr	r1, [r6, #0]
 80038ee:	4fb1      	ldr	r7, [pc, #708]	@ (8003bb4 <main+0x1bbc>)
 80038f0:	4348      	muls	r0, r1
 80038f2:	2180      	movs	r1, #128	@ 0x80
 80038f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f6:	0149      	lsls	r1, r1, #5
 80038f8:	0f5b      	lsrs	r3, r3, #29
 80038fa:	4099      	lsls	r1, r3
 80038fc:	6832      	ldr	r2, [r6, #0]
 80038fe:	6bec      	ldr	r4, [r5, #60]	@ 0x3c
 8003900:	1a89      	subs	r1, r1, r2
 8003902:	f7fc fbf1 	bl	80000e8 <__udivsi3>
 8003906:	1b00      	subs	r0, r0, r4
 8003908:	6168      	str	r0, [r5, #20]
															NTC.Log_R1=Log_ADC_to_NTC(Analog_Read);
 800390a:	6828      	ldr	r0, [r5, #0]
 800390c:	6834      	ldr	r4, [r6, #0]
 800390e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003910:	4360      	muls	r0, r4
 8003912:	2480      	movs	r4, #128	@ 0x80
 8003914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003916:	0164      	lsls	r4, r4, #5
 8003918:	0f52      	lsrs	r2, r2, #29
 800391a:	4094      	lsls	r4, r2
 800391c:	6831      	ldr	r1, [r6, #0]
 800391e:	1a62      	subs	r2, r4, r1
 8003920:	4353      	muls	r3, r2
 8003922:	1ac0      	subs	r0, r0, r3
 8003924:	f7fc fe56 	bl	80005d4 <log_q31>
 8003928:	0004      	movs	r4, r0
 800392a:	2080      	movs	r0, #128	@ 0x80
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	0140      	lsls	r0, r0, #5
 8003930:	0f5b      	lsrs	r3, r3, #29
 8003932:	4098      	lsls	r0, r3
 8003934:	6832      	ldr	r2, [r6, #0]
 8003936:	1a80      	subs	r0, r0, r2
 8003938:	f7fc fe4c 	bl	80005d4 <log_q31>
 800393c:	4b9e      	ldr	r3, [pc, #632]	@ (8003bb8 <main+0x1bc0>)
 800393e:	18e4      	adds	r4, r4, r3
 8003940:	1a24      	subs	r4, r4, r0
 8003942:	61ac      	str	r4, [r5, #24]
 8003944:	e440      	b.n	80031c8 <main+0x11d0>
														while((Pressed_BSet!=1)) { Aux=DisplayOptions(31,Aux,2); Timeout=0;}
 8003946:	2202      	movs	r2, #2
 8003948:	201f      	movs	r0, #31
 800394a:	f7fd fc3f 	bl	80011cc <DisplayOptions>
 800394e:	2300      	movs	r3, #0
 8003950:	6020      	str	r0, [r4, #0]
 8003952:	6033      	str	r3, [r6, #0]
 8003954:	e7c0      	b.n	80038d8 <main+0x18e0>
														MsgBox((unsigned char *)MsgStr[80],0,0);
 8003956:	2200      	movs	r2, #0
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	0011      	movs	r1, r2
 800395c:	33fc      	adds	r3, #252	@ 0xfc
 800395e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003960:	f7fd faf4 	bl	8000f4c <MsgBox>
														Edit_Value_Simple((int32_t*)&NTC.R_Wires, 999, 0, 0);
 8003964:	2300      	movs	r3, #0
 8003966:	001a      	movs	r2, r3
 8003968:	4894      	ldr	r0, [pc, #592]	@ (8003bbc <main+0x1bc4>)
 800396a:	4995      	ldr	r1, [pc, #596]	@ (8003bc0 <main+0x1bc8>)
														Edit_Value_Simple((int32_t*)&W1209PY.ADC_Offset, 512, -512, 0);
 800396c:	f7fd ff10 	bl	8001790 <Edit_Value_Simple>
														break;
 8003970:	e42a      	b.n	80031c8 <main+0x11d0>
														MsgBox((unsigned char *)MsgStr[47],0,0);
 8003972:	2200      	movs	r2, #0
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	0011      	movs	r1, r2
 8003978:	33bc      	adds	r3, #188	@ 0xbc
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	f7fd fae6 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Delay_Ton=DisplayOptions(31,W1209PY.Delay_Ton,2);
 8003980:	2501      	movs	r5, #1
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	4c8b      	ldr	r4, [pc, #556]	@ (8003bb4 <main+0x1bbc>)
 8003986:	2b01      	cmp	r3, #1
 8003988:	d003      	beq.n	8003992 <main+0x199a>
 800398a:	6833      	ldr	r3, [r6, #0]
 800398c:	4a86      	ldr	r2, [pc, #536]	@ (8003ba8 <main+0x1bb0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	dd1f      	ble.n	80039d2 <main+0x19da>
														Pressed_BSet=Timeout=0;
 8003992:	2300      	movs	r3, #0
 8003994:	6033      	str	r3, [r6, #0]
 8003996:	603b      	str	r3, [r7, #0]
														if(W1209PY.Delay_Ton){
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	05db      	lsls	r3, r3, #23
 800399c:	d400      	bmi.n	80039a0 <main+0x19a8>
 800399e:	e413      	b.n	80031c8 <main+0x11d0>
															if(!W1209PY.Delay_Type) W1209PY.Delay_On/=60;														
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	061b      	lsls	r3, r3, #24
 80039a4:	d404      	bmi.n	80039b0 <main+0x19b8>
 80039a6:	6920      	ldr	r0, [r4, #16]
 80039a8:	213c      	movs	r1, #60	@ 0x3c
 80039aa:	f7fc fb9d 	bl	80000e8 <__udivsi3>
 80039ae:	6120      	str	r0, [r4, #16]
															Edit_Value_Simple((int32_t*)&W1209PY.Delay_On, 999, 0, 0);
 80039b0:	2300      	movs	r3, #0
 80039b2:	4884      	ldr	r0, [pc, #528]	@ (8003bc4 <main+0x1bcc>)
 80039b4:	001a      	movs	r2, r3
 80039b6:	4982      	ldr	r1, [pc, #520]	@ (8003bc0 <main+0x1bc8>)
 80039b8:	f7fd feea 	bl	8001790 <Edit_Value_Simple>
															if(!W1209PY.Delay_Type) W1209PY.Delay_On*=60;
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	061b      	lsls	r3, r3, #24
 80039c0:	d501      	bpl.n	80039c6 <main+0x19ce>
 80039c2:	f7ff fc01 	bl	80031c8 <main+0x11d0>
 80039c6:	233c      	movs	r3, #60	@ 0x3c
 80039c8:	6922      	ldr	r2, [r4, #16]
 80039ca:	4353      	muls	r3, r2
 80039cc:	6123      	str	r3, [r4, #16]
 80039ce:	f7ff fbfb 	bl	80031c8 <main+0x11d0>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Delay_Ton=DisplayOptions(31,W1209PY.Delay_Ton,2);
 80039d2:	6821      	ldr	r1, [r4, #0]
 80039d4:	2202      	movs	r2, #2
 80039d6:	05c9      	lsls	r1, r1, #23
 80039d8:	201f      	movs	r0, #31
 80039da:	0fc9      	lsrs	r1, r1, #31
 80039dc:	f7fd fbf6 	bl	80011cc <DisplayOptions>
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	4a79      	ldr	r2, [pc, #484]	@ (8003bc8 <main+0x1bd0>)
 80039e4:	4028      	ands	r0, r5
 80039e6:	0200      	lsls	r0, r0, #8
 80039e8:	4013      	ands	r3, r2
 80039ea:	4303      	orrs	r3, r0
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	e7c8      	b.n	8003982 <main+0x198a>
														MsgBox((unsigned char *)MsgStr[48],0,0);
 80039f0:	2200      	movs	r2, #0
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	0011      	movs	r1, r2
 80039f6:	33c0      	adds	r3, #192	@ 0xc0
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	f7fd faa7 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Delay_Toff=DisplayOptions(31,W1209PY.Delay_Toff,2);
 80039fe:	2501      	movs	r5, #1
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4c6c      	ldr	r4, [pc, #432]	@ (8003bb4 <main+0x1bbc>)
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d003      	beq.n	8003a10 <main+0x1a18>
 8003a08:	6833      	ldr	r3, [r6, #0]
 8003a0a:	4a67      	ldr	r2, [pc, #412]	@ (8003ba8 <main+0x1bb0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	dd20      	ble.n	8003a52 <main+0x1a5a>
														Pressed_BSet=Timeout=0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	6033      	str	r3, [r6, #0]
 8003a14:	603b      	str	r3, [r7, #0]
														if(W1209PY.Delay_Toff){
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	059b      	lsls	r3, r3, #22
 8003a1a:	d401      	bmi.n	8003a20 <main+0x1a28>
 8003a1c:	f7ff fbd4 	bl	80031c8 <main+0x11d0>
															if(!W1209PY.Delay_Type) W1209PY.Delay_Off/=60;														
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	061b      	lsls	r3, r3, #24
 8003a24:	d404      	bmi.n	8003a30 <main+0x1a38>
 8003a26:	6960      	ldr	r0, [r4, #20]
 8003a28:	213c      	movs	r1, #60	@ 0x3c
 8003a2a:	f7fc fb5d 	bl	80000e8 <__udivsi3>
 8003a2e:	6160      	str	r0, [r4, #20]
															Edit_Value_Simple((int32_t*)&W1209PY.Delay_Off, 999, 0, 0);
 8003a30:	2300      	movs	r3, #0
 8003a32:	4866      	ldr	r0, [pc, #408]	@ (8003bcc <main+0x1bd4>)
 8003a34:	001a      	movs	r2, r3
 8003a36:	4962      	ldr	r1, [pc, #392]	@ (8003bc0 <main+0x1bc8>)
 8003a38:	f7fd feaa 	bl	8001790 <Edit_Value_Simple>
															if(!W1209PY.Delay_Type) W1209PY.Delay_Off*=60;
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	061b      	lsls	r3, r3, #24
 8003a40:	d501      	bpl.n	8003a46 <main+0x1a4e>
 8003a42:	f7ff fbc1 	bl	80031c8 <main+0x11d0>
 8003a46:	233c      	movs	r3, #60	@ 0x3c
 8003a48:	6962      	ldr	r2, [r4, #20]
 8003a4a:	4353      	muls	r3, r2
 8003a4c:	6163      	str	r3, [r4, #20]
 8003a4e:	f7ff fbbb 	bl	80031c8 <main+0x11d0>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Delay_Toff=DisplayOptions(31,W1209PY.Delay_Toff,2);
 8003a52:	6821      	ldr	r1, [r4, #0]
 8003a54:	2202      	movs	r2, #2
 8003a56:	0589      	lsls	r1, r1, #22
 8003a58:	201f      	movs	r0, #31
 8003a5a:	0fc9      	lsrs	r1, r1, #31
 8003a5c:	f7fd fbb6 	bl	80011cc <DisplayOptions>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	4a5b      	ldr	r2, [pc, #364]	@ (8003bd0 <main+0x1bd8>)
 8003a64:	4028      	ands	r0, r5
 8003a66:	0240      	lsls	r0, r0, #9
 8003a68:	4013      	ands	r3, r2
 8003a6a:	4303      	orrs	r3, r0
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	e7c7      	b.n	8003a00 <main+0x1a08>
														MsgBox((unsigned char *)MsgStr[44],0,0);
 8003a70:	2200      	movs	r2, #0
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	0011      	movs	r1, r2
 8003a76:	33b0      	adds	r3, #176	@ 0xb0
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	f7fd fa67 	bl	8000f4c <MsgBox>
														Edit_Value_Simple((int32_t*)&W1209PY.Filter_Depth, 19-W1209PY.Bits_Extended, 0, 0);
 8003a7e:	2113      	movs	r1, #19
 8003a80:	4c4c      	ldr	r4, [pc, #304]	@ (8003bb4 <main+0x1bbc>)
 8003a82:	4854      	ldr	r0, [pc, #336]	@ (8003bd4 <main+0x1bdc>)
 8003a84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a86:	0f5b      	lsrs	r3, r3, #29
 8003a88:	1ac9      	subs	r1, r1, r3
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	001a      	movs	r2, r3
 8003a8e:	f7fd fe7f 	bl	8001790 <Edit_Value_Simple>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003a92:	4b51      	ldr	r3, [pc, #324]	@ (8003bd8 <main+0x1be0>)
 8003a94:	6c18      	ldr	r0, [r3, #64]	@ 0x40
														Filter_Init(LL_ADC_REG_ReadConversionData12(ADC1), W1209PY.Filter_Depth+W1209PY.Bits_Extended);
 8003a96:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003a98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
														Filter_Init(LL_ADC_REG_ReadConversionData12(ADC1), W1209PY.Filter_Depth+W1209PY.Bits_Extended);
 8003a9a:	0f49      	lsrs	r1, r1, #29
 8003a9c:	18c9      	adds	r1, r1, r3
 8003a9e:	b280      	uxth	r0, r0
 8003aa0:	f000 ff86 	bl	80049b0 <Filter_Init>
														break;
 8003aa4:	f7ff fb90 	bl	80031c8 <main+0x11d0>
														MsgBox((unsigned char *)MsgStr[66],0,0);
 8003aa8:	2200      	movs	r2, #0
														Aux=W1209PY.Bits_Extended+12;
 8003aaa:	4d42      	ldr	r5, [pc, #264]	@ (8003bb4 <main+0x1bbc>)
 8003aac:	4e3d      	ldr	r6, [pc, #244]	@ (8003ba4 <main+0x1bac>)
 8003aae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
														MsgBox((unsigned char *)MsgStr[66],0,0);
 8003ab0:	0011      	movs	r1, r2
														Aux=W1209PY.Bits_Extended+12;
 8003ab2:	0f5b      	lsrs	r3, r3, #29
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	6033      	str	r3, [r6, #0]
														MsgBox((unsigned char *)MsgStr[66],0,0);
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	33fc      	adds	r3, #252	@ 0xfc
 8003abc:	68d8      	ldr	r0, [r3, #12]
 8003abe:	f7fd fa45 	bl	8000f4c <MsgBox>
														Edit_Value_Simple((int32_t*)&Aux, 18, 12, 0);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	220c      	movs	r2, #12
 8003ac6:	2112      	movs	r1, #18
 8003ac8:	0030      	movs	r0, r6
 8003aca:	f7fd fe61 	bl	8001790 <Edit_Value_Simple>
														W1209PY.Bits_Extended=Aux-12;
 8003ace:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003ad0:	6832      	ldr	r2, [r6, #0]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	3a0c      	subs	r2, #12
 8003ad6:	0752      	lsls	r2, r2, #29
 8003ad8:	08db      	lsrs	r3, r3, #3
 8003ada:	4313      	orrs	r3, r2
 8003adc:	632b      	str	r3, [r5, #48]	@ 0x30
														if((W1209PY.Filter_Depth+W1209PY.Bits_Extended)>19) W1209PY.Filter_Depth=19-W1209PY.Bits_Extended;
 8003ade:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8003ae0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003ae2:	0f5b      	lsrs	r3, r3, #29
 8003ae4:	189b      	adds	r3, r3, r2
 8003ae6:	2b13      	cmp	r3, #19
 8003ae8:	d904      	bls.n	8003af4 <main+0x1afc>
 8003aea:	2313      	movs	r3, #19
 8003aec:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8003aee:	0f52      	lsrs	r2, r2, #29
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003af4:	4b38      	ldr	r3, [pc, #224]	@ (8003bd8 <main+0x1be0>)
 8003af6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
														Filter_Init(LL_ADC_REG_ReadConversionData12(ADC1), W1209PY.Filter_Depth+W1209PY.Bits_Extended);
 8003af8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003afa:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8003afc:	e7cd      	b.n	8003a9a <main+0x1aa2>
														MsgBox((unsigned char *)MsgStr[81],0,0);
 8003afe:	2200      	movs	r2, #0
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	0011      	movs	r1, r2
 8003b04:	33fc      	adds	r3, #252	@ 0xfc
 8003b06:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003b08:	f7fd fa20 	bl	8000f4c <MsgBox>
														Edit_Value_Simple((int32_t*)&W1209PY.ADC_Offset, 512, -512, 0);
 8003b0c:	2180      	movs	r1, #128	@ 0x80
 8003b0e:	2300      	movs	r3, #0
 8003b10:	4832      	ldr	r0, [pc, #200]	@ (8003bdc <main+0x1be4>)
 8003b12:	4a33      	ldr	r2, [pc, #204]	@ (8003be0 <main+0x1be8>)
 8003b14:	0089      	lsls	r1, r1, #2
 8003b16:	e729      	b.n	800396c <main+0x1974>
														MsgBox((unsigned char *)MsgStr[23],0,0);
 8003b18:	2200      	movs	r2, #0
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	0011      	movs	r1, r2
 8003b1e:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003b20:	f7fd fa14 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Temp_Roll=DisplayOptions(31,W1209PY.Temp_Roll,2);
 8003b24:	2504      	movs	r5, #4
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <main+0x1b38>
 8003b2c:	f7ff fb4c 	bl	80031c8 <main+0x11d0>
 8003b30:	6833      	ldr	r3, [r6, #0]
 8003b32:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba8 <main+0x1bb0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	dd01      	ble.n	8003b3c <main+0x1b44>
 8003b38:	f7ff fb46 	bl	80031c8 <main+0x11d0>
 8003b3c:	4c1d      	ldr	r4, [pc, #116]	@ (8003bb4 <main+0x1bbc>)
 8003b3e:	2202      	movs	r2, #2
 8003b40:	6821      	ldr	r1, [r4, #0]
 8003b42:	201f      	movs	r0, #31
 8003b44:	0749      	lsls	r1, r1, #29
 8003b46:	0fc9      	lsrs	r1, r1, #31
 8003b48:	f7fd fb40 	bl	80011cc <DisplayOptions>
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	4010      	ands	r0, r2
 8003b52:	0080      	lsls	r0, r0, #2
 8003b54:	43ab      	bics	r3, r5
 8003b56:	4303      	orrs	r3, r0
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	e7e4      	b.n	8003b26 <main+0x1b2e>
														MsgBox((unsigned char *)MsgStr[24],0,0);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	0011      	movs	r1, r2
 8003b62:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8003b64:	f7fd f9f2 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Messages=DisplayOptions(31,W1209PY.Messages,2);
 8003b68:	2540      	movs	r5, #64	@ 0x40
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <main+0x1b7c>
 8003b70:	f7ff fb2a 	bl	80031c8 <main+0x11d0>
 8003b74:	6833      	ldr	r3, [r6, #0]
 8003b76:	4a0c      	ldr	r2, [pc, #48]	@ (8003ba8 <main+0x1bb0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	dd01      	ble.n	8003b80 <main+0x1b88>
 8003b7c:	f7ff fb24 	bl	80031c8 <main+0x11d0>
 8003b80:	4c0c      	ldr	r4, [pc, #48]	@ (8003bb4 <main+0x1bbc>)
 8003b82:	2202      	movs	r2, #2
 8003b84:	6821      	ldr	r1, [r4, #0]
 8003b86:	201f      	movs	r0, #31
 8003b88:	0649      	lsls	r1, r1, #25
 8003b8a:	0fc9      	lsrs	r1, r1, #31
 8003b8c:	f7fd fb1e 	bl	80011cc <DisplayOptions>
 8003b90:	2201      	movs	r2, #1
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	4010      	ands	r0, r2
 8003b96:	0180      	lsls	r0, r0, #6
 8003b98:	43ab      	bics	r3, r5
 8003b9a:	4303      	orrs	r3, r0
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	e7e4      	b.n	8003b6a <main+0x1b72>
 8003ba0:	20000408 	.word	0x20000408
 8003ba4:	20000444 	.word	0x20000444
 8003ba8:	00004e1f 	.word	0x00004e1f
 8003bac:	200003e8 	.word	0x200003e8
 8003bb0:	200000f0 	.word	0x200000f0
 8003bb4:	200003b0 	.word	0x200003b0
 8003bb8:	aa0cbc64 	.word	0xaa0cbc64
 8003bbc:	20000424 	.word	0x20000424
 8003bc0:	000003e7 	.word	0x000003e7
 8003bc4:	200003c0 	.word	0x200003c0
 8003bc8:	fffffeff 	.word	0xfffffeff
 8003bcc:	200003c4 	.word	0x200003c4
 8003bd0:	fffffdff 	.word	0xfffffdff
 8003bd4:	200003d8 	.word	0x200003d8
 8003bd8:	40012400 	.word	0x40012400
 8003bdc:	200003dc 	.word	0x200003dc
 8003be0:	fffffe00 	.word	0xfffffe00
														MsgBox((unsigned char *)MsgStr[79],0,0);
 8003be4:	2200      	movs	r2, #0
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	0011      	movs	r1, r2
 8003bea:	33fc      	adds	r3, #252	@ 0xfc
 8003bec:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003bee:	f7fd f9ad 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Sound=DisplayOptions(31,W1209PY.Sound,2);
 8003bf2:	2501      	movs	r5, #1
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <main+0x1c06>
 8003bfa:	f7ff fae5 	bl	80031c8 <main+0x11d0>
 8003bfe:	6833      	ldr	r3, [r6, #0]
 8003c00:	4ad3      	ldr	r2, [pc, #844]	@ (8003f50 <main+0x1f58>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	dd01      	ble.n	8003c0a <main+0x1c12>
 8003c06:	f7ff fadf 	bl	80031c8 <main+0x11d0>
 8003c0a:	4cd2      	ldr	r4, [pc, #840]	@ (8003f54 <main+0x1f5c>)
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	6821      	ldr	r1, [r4, #0]
 8003c10:	201f      	movs	r0, #31
 8003c12:	0449      	lsls	r1, r1, #17
 8003c14:	0fc9      	lsrs	r1, r1, #31
 8003c16:	f7fd fad9 	bl	80011cc <DisplayOptions>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	4ace      	ldr	r2, [pc, #824]	@ (8003f58 <main+0x1f60>)
 8003c1e:	4028      	ands	r0, r5
 8003c20:	0380      	lsls	r0, r0, #14
 8003c22:	4013      	ands	r3, r2
 8003c24:	4303      	orrs	r3, r0
 8003c26:	6023      	str	r3, [r4, #0]
 8003c28:	e7e4      	b.n	8003bf4 <main+0x1bfc>
														MsgBox((unsigned char *)MsgStr[72],0,0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	0011      	movs	r1, r2
 8003c30:	33fc      	adds	r3, #252	@ 0xfc
 8003c32:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003c34:	f7fd f98a 	bl	8000f4c <MsgBox>
														Aux=Active_Profile+1;	
 8003c38:	4bc8      	ldr	r3, [pc, #800]	@ (8003f5c <main+0x1f64>)
 8003c3a:	4ac9      	ldr	r2, [pc, #804]	@ (8003f60 <main+0x1f68>)
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	6013      	str	r3, [r2, #0]
															Aux2=0;																 
 8003c44:	2300      	movs	r3, #0
															Edit_Value_Simple(&Aux,5,1,0);
 8003c46:	4dc6      	ldr	r5, [pc, #792]	@ (8003f60 <main+0x1f68>)
															Aux2=0;																 
 8003c48:	4cc6      	ldr	r4, [pc, #792]	@ (8003f64 <main+0x1f6c>)
															Edit_Value_Simple(&Aux,5,1,0);
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	2105      	movs	r1, #5
 8003c4e:	0028      	movs	r0, r5
															Aux2=0;																 
 8003c50:	6023      	str	r3, [r4, #0]
															Edit_Value_Simple(&Aux,5,1,0);
 8003c52:	f7fd fd9d 	bl	8001790 <Edit_Value_Simple>
															if(Profile_Statuses[Aux-1]) Aux2=1; else {
 8003c56:	682b      	ldr	r3, [r5, #0]
 8003c58:	4ac3      	ldr	r2, [pc, #780]	@ (8003f68 <main+0x1f70>)
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	5899      	ldr	r1, [r3, r2]
 8003c60:	2900      	cmp	r1, #0
 8003c62:	d048      	beq.n	8003cf6 <main+0x1cfe>
 8003c64:	2301      	movs	r3, #1
 8003c66:	6023      	str	r3, [r4, #0]
														if(Active_Profile!=Aux-1){
 8003c68:	4dbd      	ldr	r5, [pc, #756]	@ (8003f60 <main+0x1f68>)
 8003c6a:	4ebc      	ldr	r6, [pc, #752]	@ (8003f5c <main+0x1f64>)
 8003c6c:	682a      	ldr	r2, [r5, #0]
 8003c6e:	6833      	ldr	r3, [r6, #0]
 8003c70:	3a01      	subs	r2, #1
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d101      	bne.n	8003c7a <main+0x1c82>
 8003c76:	f7ff faa7 	bl	80031c8 <main+0x11d0>
															Unselect_Profile(Profiles[Active_Profile]);
 8003c7a:	4abc      	ldr	r2, [pc, #752]	@ (8003f6c <main+0x1f74>)
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	5898      	ldr	r0, [r3, r2]
 8003c80:	f7fd ffd4 	bl	8001c2c <Unselect_Profile>
															Profile_Statuses[Active_Profile]=PROFILE_INACTIVE;
 8003c84:	2202      	movs	r2, #2
 8003c86:	6833      	ldr	r3, [r6, #0]
 8003c88:	4cb7      	ldr	r4, [pc, #732]	@ (8003f68 <main+0x1f70>)
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	511a      	str	r2, [r3, r4]
															Active_Profile=Aux-1;
 8003c8e:	682b      	ldr	r3, [r5, #0]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	6033      	str	r3, [r6, #0]
															if(Profile_Statuses[Active_Profile]==PROFILE_INACTIVE){
 8003c94:	4093      	lsls	r3, r2
 8003c96:	591b      	ldr	r3, [r3, r4]
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d11a      	bne.n	8003cd2 <main+0x1cda>
																Aux=1;
 8003c9c:	2301      	movs	r3, #1
																MsgBox((unsigned char *)MsgStr[73],0,0);
 8003c9e:	2200      	movs	r2, #0
																Aux=1;
 8003ca0:	602b      	str	r3, [r5, #0]
																MsgBox((unsigned char *)MsgStr[73],0,0);
 8003ca2:	4bb3      	ldr	r3, [pc, #716]	@ (8003f70 <main+0x1f78>)
 8003ca4:	0011      	movs	r1, r2
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	33fc      	adds	r3, #252	@ 0xfc
 8003caa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003cac:	f7fd f94e 	bl	8000f4c <MsgBox>
																while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 8003cb0:	4dab      	ldr	r5, [pc, #684]	@ (8003f60 <main+0x1f68>)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6829      	ldr	r1, [r5, #0]
 8003cb6:	4aaf      	ldr	r2, [pc, #700]	@ (8003f74 <main+0x1f7c>)
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d003      	beq.n	8003cc4 <main+0x1ccc>
 8003cbc:	6813      	ldr	r3, [r2, #0]
 8003cbe:	48a4      	ldr	r0, [pc, #656]	@ (8003f50 <main+0x1f58>)
 8003cc0:	4283      	cmp	r3, r0
 8003cc2:	dd34      	ble.n	8003d2e <main+0x1d36>
																Pressed_BSet=Timeout=0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	603b      	str	r3, [r7, #0]
																if(Aux) Load_Context();
 8003cca:	4299      	cmp	r1, r3
 8003ccc:	d001      	beq.n	8003cd2 <main+0x1cda>
 8003cce:	f7fe f83f 	bl	8001d50 <Load_Context>
															Profile_Statuses[Active_Profile]=PROFILE_ACTIVE;
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	9b00      	ldr	r3, [sp, #0]
															Calculate_CRC((struct Params *)&NTC,(struct Params2 *)&W1209PY, Set_Checksum);
 8003cd6:	499f      	ldr	r1, [pc, #636]	@ (8003f54 <main+0x1f5c>)
															Profile_Statuses[Active_Profile]=PROFILE_ACTIVE;
 8003cd8:	681b      	ldr	r3, [r3, #0]
															Calculate_CRC((struct Params *)&NTC,(struct Params2 *)&W1209PY, Set_Checksum);
 8003cda:	48a7      	ldr	r0, [pc, #668]	@ (8003f78 <main+0x1f80>)
															Profile_Statuses[Active_Profile]=PROFILE_ACTIVE;
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	50e2      	str	r2, [r4, r3]
															Calculate_CRC((struct Params *)&NTC,(struct Params2 *)&W1209PY, Set_Checksum);
 8003ce0:	f7fd fe3a 	bl	8001958 <Calculate_CRC>
															Save_Context(Profiles[Active_Profile]);
 8003ce4:	9a00      	ldr	r2, [sp, #0]
 8003ce6:	4ba1      	ldr	r3, [pc, #644]	@ (8003f6c <main+0x1f74>)
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	0092      	lsls	r2, r2, #2
 8003cec:	58d0      	ldr	r0, [r2, r3]
 8003cee:	f7fd ffcd 	bl	8001c8c <Save_Context>
 8003cf2:	f7ff fa69 	bl	80031c8 <main+0x11d0>
																	MsgBox((unsigned char *)MsgStr[71],0,0);		  	  
 8003cf6:	4b9e      	ldr	r3, [pc, #632]	@ (8003f70 <main+0x1f78>)
 8003cf8:	000a      	movs	r2, r1
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	33fc      	adds	r3, #252	@ 0xfc
 8003cfe:	6a18      	ldr	r0, [r3, #32]
 8003d00:	f7fd f924 	bl	8000f4c <MsgBox>
																	while((Pressed_BSet!=1)&&!Tout()) Aux2=DisplayOptions(31,Aux2,2);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6821      	ldr	r1, [r4, #0]
 8003d08:	4a9a      	ldr	r2, [pc, #616]	@ (8003f74 <main+0x1f7c>)
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d003      	beq.n	8003d16 <main+0x1d1e>
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	488f      	ldr	r0, [pc, #572]	@ (8003f50 <main+0x1f58>)
 8003d12:	4283      	cmp	r3, r0
 8003d14:	dd05      	ble.n	8003d22 <main+0x1d2a>
																	Pressed_BSet=Timeout=0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	603b      	str	r3, [r7, #0]
															}while(!Aux2);
 8003d1c:	4299      	cmp	r1, r3
 8003d1e:	d091      	beq.n	8003c44 <main+0x1c4c>
 8003d20:	e7a2      	b.n	8003c68 <main+0x1c70>
																	while((Pressed_BSet!=1)&&!Tout()) Aux2=DisplayOptions(31,Aux2,2);
 8003d22:	2202      	movs	r2, #2
 8003d24:	201f      	movs	r0, #31
 8003d26:	f7fd fa51 	bl	80011cc <DisplayOptions>
 8003d2a:	6020      	str	r0, [r4, #0]
 8003d2c:	e7ea      	b.n	8003d04 <main+0x1d0c>
																while((Pressed_BSet!=1)&&!Tout()) Aux=DisplayOptions(31,Aux,2);
 8003d2e:	2202      	movs	r2, #2
 8003d30:	201f      	movs	r0, #31
 8003d32:	f7fd fa4b 	bl	80011cc <DisplayOptions>
 8003d36:	6028      	str	r0, [r5, #0]
 8003d38:	e7ba      	b.n	8003cb0 <main+0x1cb8>
														MsgBox((unsigned char *)MsgStr[76],0,0);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	0011      	movs	r1, r2
 8003d40:	33fc      	adds	r3, #252	@ 0xfc
 8003d42:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003d44:	f7fd f902 	bl	8000f4c <MsgBox>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Language=DisplayOptions(77,W1209PY.Language,2);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4d82      	ldr	r5, [pc, #520]	@ (8003f54 <main+0x1f5c>)
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d003      	beq.n	8003d58 <main+0x1d60>
 8003d50:	6833      	ldr	r3, [r6, #0]
 8003d52:	4a7f      	ldr	r2, [pc, #508]	@ (8003f50 <main+0x1f58>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	dd05      	ble.n	8003d64 <main+0x1d6c>
														Pressed_BSet=Timeout=0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	6033      	str	r3, [r6, #0]
 8003d5c:	603b      	str	r3, [r7, #0]
														MsgStr=W1209PY.Language?(unsigned char **)MsgStrSp:(unsigned char **)MsgStrEn;
 8003d5e:	682a      	ldr	r2, [r5, #0]
 8003d60:	f7ff fbb8 	bl	80034d4 <main+0x14dc>
														while((Pressed_BSet!=1)&&!Tout()) W1209PY.Language=DisplayOptions(77,W1209PY.Language,2);
 8003d64:	6829      	ldr	r1, [r5, #0]
 8003d66:	2202      	movs	r2, #2
 8003d68:	0489      	lsls	r1, r1, #18
 8003d6a:	204d      	movs	r0, #77	@ 0x4d
 8003d6c:	0fc9      	lsrs	r1, r1, #31
 8003d6e:	f7fd fa2d 	bl	80011cc <DisplayOptions>
 8003d72:	2201      	movs	r2, #1
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	4010      	ands	r0, r2
 8003d78:	4a80      	ldr	r2, [pc, #512]	@ (8003f7c <main+0x1f84>)
 8003d7a:	0340      	lsls	r0, r0, #13
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	4303      	orrs	r3, r0
 8003d80:	602b      	str	r3, [r5, #0]
 8003d82:	e7e1      	b.n	8003d48 <main+0x1d50>
			else if(W1209PY.Timer_Enable) {W1209PY.Timer_Enable=0; Save_Context(Profiles[Active_Profile]);}
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	055b      	lsls	r3, r3, #21
 8003d88:	d401      	bmi.n	8003d8e <main+0x1d96>
 8003d8a:	f7fe fc77 	bl	800267c <main+0x684>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	4a7b      	ldr	r2, [pc, #492]	@ (8003f80 <main+0x1f88>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	4a71      	ldr	r2, [pc, #452]	@ (8003f5c <main+0x1f64>)
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	4b74      	ldr	r3, [pc, #464]	@ (8003f6c <main+0x1f74>)
 8003d9c:	0092      	lsls	r2, r2, #2
 8003d9e:	58d0      	ldr	r0, [r2, r3]
 8003da0:	f7fd ff74 	bl	8001c8c <Save_Context>
 8003da4:	f7fe fc6a 	bl	800267c <main+0x684>
		if(Pressed_BMinus) W1209PY.Fixed_Off=1; else if(Pressed_BPlus) W1209PY.Fixed_On=1;
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <main+0x1dba>
 8003dae:	f7fe fc7c 	bl	80026aa <main+0x6b2>
 8003db2:	2380      	movs	r3, #128	@ 0x80
 8003db4:	6822      	ldr	r2, [r4, #0]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	f7fe fc75 	bl	80026a6 <main+0x6ae>
							Aux=(W1209PY.fahrenheit)?To_fahrenheit(W1209PY.Target):To_Celsius(W1209PY.Target);
 8003dbc:	6861      	ldr	r1, [r4, #4]
 8003dbe:	4b71      	ldr	r3, [pc, #452]	@ (8003f84 <main+0x1f8c>)
 8003dc0:	18c9      	adds	r1, r1, r3
 8003dc2:	f7fe fd30 	bl	8002826 <main+0x82e>
								if (((Pressed_BPlus>1)&&(!(Tick_Timer&(0x3FF>>(Pressed_BPlus>>2)))))||(Pressed_BPlus==1))
 8003dc6:	4b70      	ldr	r3, [pc, #448]	@ (8003f88 <main+0x1f90>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	2a01      	cmp	r2, #1
 8003dcc:	d907      	bls.n	8003dde <main+0x1de6>
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b6e      	ldr	r3, [pc, #440]	@ (8003f8c <main+0x1f94>)
 8003dd2:	0892      	lsrs	r2, r2, #2
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	4b6e      	ldr	r3, [pc, #440]	@ (8003f90 <main+0x1f98>)
 8003dd8:	4113      	asrs	r3, r2
 8003dda:	4219      	tst	r1, r3
 8003ddc:	d003      	beq.n	8003de6 <main+0x1dee>
 8003dde:	4b6a      	ldr	r3, [pc, #424]	@ (8003f88 <main+0x1f90>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d13b      	bne.n	8003e5e <main+0x1e66>
										Flashing_Flag=0;
 8003de6:	2200      	movs	r2, #0
										if(Pressed_BPlus==1) Pressed_BPlus=0;
 8003de8:	4b67      	ldr	r3, [pc, #412]	@ (8003f88 <main+0x1f90>)
										Flashing_Flag=0;
 8003dea:	602a      	str	r2, [r5, #0]
										if(Pressed_BPlus==1) Pressed_BPlus=0;
 8003dec:	6819      	ldr	r1, [r3, #0]
 8003dee:	2901      	cmp	r1, #1
 8003df0:	d100      	bne.n	8003df4 <main+0x1dfc>
 8003df2:	601a      	str	r2, [r3, #0]
										Aux+=10;
 8003df4:	4b5a      	ldr	r3, [pc, #360]	@ (8003f60 <main+0x1f68>)
 8003df6:	681e      	ldr	r6, [r3, #0]
 8003df8:	360a      	adds	r6, #10
 8003dfa:	601e      	str	r6, [r3, #0]
										if(Aux>((W1209PY.fahrenheit)?To_fahrenheit(W1209PY.Max_TempK100):To_Celsius(W1209PY.Max_TempK100))) 
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	69a0      	ldr	r0, [r4, #24]
 8003e00:	069b      	lsls	r3, r3, #26
 8003e02:	d400      	bmi.n	8003e06 <main+0x1e0e>
 8003e04:	e09c      	b.n	8003f40 <main+0x1f48>
 8003e06:	2312      	movs	r3, #18
 8003e08:	4358      	muls	r0, r3
 8003e0a:	4b62      	ldr	r3, [pc, #392]	@ (8003f94 <main+0x1f9c>)
 8003e0c:	210a      	movs	r1, #10
 8003e0e:	18c0      	adds	r0, r0, r3
 8003e10:	f7fc f9f4 	bl	80001fc <__divsi3>
 8003e14:	23c8      	movs	r3, #200	@ 0xc8
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	18c0      	adds	r0, r0, r3
 8003e1a:	4f51      	ldr	r7, [pc, #324]	@ (8003f60 <main+0x1f68>)
 8003e1c:	4286      	cmp	r6, r0
 8003e1e:	dd0f      	ble.n	8003e40 <main+0x1e48>
										   Aux=(W1209PY.fahrenheit)?To_fahrenheit(W1209PY.Max_TempK100):To_Celsius(W1209PY.Max_TempK100);
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	69a0      	ldr	r0, [r4, #24]
 8003e24:	069b      	lsls	r3, r3, #26
 8003e26:	d400      	bmi.n	8003e2a <main+0x1e32>
 8003e28:	e08c      	b.n	8003f44 <main+0x1f4c>
 8003e2a:	2312      	movs	r3, #18
 8003e2c:	4358      	muls	r0, r3
 8003e2e:	4b59      	ldr	r3, [pc, #356]	@ (8003f94 <main+0x1f9c>)
 8003e30:	210a      	movs	r1, #10
 8003e32:	18c0      	adds	r0, r0, r3
 8003e34:	f7fc f9e2 	bl	80001fc <__divsi3>
 8003e38:	23c8      	movs	r3, #200	@ 0xc8
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	18c0      	adds	r0, r0, r3
 8003e3e:	6038      	str	r0, [r7, #0]
										itoa(p_aux,Aux,2);
 8003e40:	9b01      	ldr	r3, [sp, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	f7fc fdf2 	bl	8000a30 <itoa>
										Put_Buff_On_Display(Display1,0);
 8003e4c:	4b52      	ldr	r3, [pc, #328]	@ (8003f98 <main+0x1fa0>)
 8003e4e:	2100      	movs	r1, #0
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	f7fc fc69 	bl	8000728 <Put_Buff_On_Display>
										Tick_Timer++;
 8003e56:	4a4d      	ldr	r2, [pc, #308]	@ (8003f8c <main+0x1f94>)
 8003e58:	6813      	ldr	r3, [r2, #0]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	6013      	str	r3, [r2, #0]
								if (((Pressed_BMinus>1)&&(!(Tick_Timer&(0x3FF>>(Pressed_BMinus>>2)))))||(Pressed_BMinus==1))
 8003e5e:	4b4f      	ldr	r3, [pc, #316]	@ (8003f9c <main+0x1fa4>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	2a01      	cmp	r2, #1
 8003e64:	d907      	bls.n	8003e76 <main+0x1e7e>
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b48      	ldr	r3, [pc, #288]	@ (8003f8c <main+0x1f94>)
 8003e6a:	0892      	lsrs	r2, r2, #2
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	4b48      	ldr	r3, [pc, #288]	@ (8003f90 <main+0x1f98>)
 8003e70:	4113      	asrs	r3, r2
 8003e72:	4219      	tst	r1, r3
 8003e74:	d003      	beq.n	8003e7e <main+0x1e86>
 8003e76:	4b49      	ldr	r3, [pc, #292]	@ (8003f9c <main+0x1fa4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d139      	bne.n	8003ef2 <main+0x1efa>
										Flashing_Flag=0;
 8003e7e:	2200      	movs	r2, #0
										if(Pressed_BMinus==1) Pressed_BMinus=0;
 8003e80:	4b46      	ldr	r3, [pc, #280]	@ (8003f9c <main+0x1fa4>)
										Flashing_Flag=0;
 8003e82:	602a      	str	r2, [r5, #0]
										if(Pressed_BMinus==1) Pressed_BMinus=0;
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	2901      	cmp	r1, #1
 8003e88:	d100      	bne.n	8003e8c <main+0x1e94>
 8003e8a:	601a      	str	r2, [r3, #0]
										Aux-=10;
 8003e8c:	4b34      	ldr	r3, [pc, #208]	@ (8003f60 <main+0x1f68>)
 8003e8e:	681e      	ldr	r6, [r3, #0]
 8003e90:	3e0a      	subs	r6, #10
 8003e92:	601e      	str	r6, [r3, #0]
										if(Aux<((W1209PY.fahrenheit)?To_fahrenheit(W1209PY.Min_TempK100):To_Celsius(W1209PY.Min_TempK100))) 
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	69e0      	ldr	r0, [r4, #28]
 8003e98:	069b      	lsls	r3, r3, #26
 8003e9a:	d555      	bpl.n	8003f48 <main+0x1f50>
 8003e9c:	2312      	movs	r3, #18
 8003e9e:	4358      	muls	r0, r3
 8003ea0:	4b3c      	ldr	r3, [pc, #240]	@ (8003f94 <main+0x1f9c>)
 8003ea2:	210a      	movs	r1, #10
 8003ea4:	18c0      	adds	r0, r0, r3
 8003ea6:	f7fc f9a9 	bl	80001fc <__divsi3>
 8003eaa:	23c8      	movs	r3, #200	@ 0xc8
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	18c0      	adds	r0, r0, r3
 8003eb0:	4f2b      	ldr	r7, [pc, #172]	@ (8003f60 <main+0x1f68>)
 8003eb2:	4286      	cmp	r6, r0
 8003eb4:	da0e      	bge.n	8003ed4 <main+0x1edc>
										   Aux=(W1209PY.fahrenheit)?To_fahrenheit(W1209PY.Min_TempK100):To_Celsius(W1209PY.Min_TempK100);
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	69e0      	ldr	r0, [r4, #28]
 8003eba:	069b      	lsls	r3, r3, #26
 8003ebc:	d546      	bpl.n	8003f4c <main+0x1f54>
 8003ebe:	2312      	movs	r3, #18
 8003ec0:	4358      	muls	r0, r3
 8003ec2:	4b34      	ldr	r3, [pc, #208]	@ (8003f94 <main+0x1f9c>)
 8003ec4:	210a      	movs	r1, #10
 8003ec6:	18c0      	adds	r0, r0, r3
 8003ec8:	f7fc f998 	bl	80001fc <__divsi3>
 8003ecc:	23c8      	movs	r3, #200	@ 0xc8
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	18c0      	adds	r0, r0, r3
 8003ed2:	6038      	str	r0, [r7, #0]
										itoa(p_aux,Aux,2);
 8003ed4:	9b01      	ldr	r3, [sp, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	f7fc fda8 	bl	8000a30 <itoa>
										Put_Buff_On_Display(Display1,0);
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f98 <main+0x1fa0>)
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	f7fc fc1f 	bl	8000728 <Put_Buff_On_Display>
										Tick_Timer++;
 8003eea:	4a28      	ldr	r2, [pc, #160]	@ (8003f8c <main+0x1f94>)
 8003eec:	6813      	ldr	r3, [r2, #0]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	6013      	str	r3, [r2, #0]
								if(!Pressed_BMinus&&!Pressed_BPlus) Flashing_Flag=1;
 8003ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f9c <main+0x1fa4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <main+0x1f0e>
 8003efa:	4b23      	ldr	r3, [pc, #140]	@ (8003f88 <main+0x1f90>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <main+0x1f0e>
 8003f02:	3301      	adds	r3, #1
 8003f04:	602b      	str	r3, [r5, #0]
								if(Aux>99900) Aux=99900;
 8003f06:	4a16      	ldr	r2, [pc, #88]	@ (8003f60 <main+0x1f68>)
 8003f08:	4b25      	ldr	r3, [pc, #148]	@ (8003fa0 <main+0x1fa8>)
 8003f0a:	6811      	ldr	r1, [r2, #0]
 8003f0c:	4299      	cmp	r1, r3
 8003f0e:	dd00      	ble.n	8003f12 <main+0x1f1a>
 8003f10:	6013      	str	r3, [r2, #0]
								if(Aux<(W1209PY.fahrenheit?-46957:-_100Kelvin)) Aux=(W1209PY.fahrenheit?-46957:-_100Kelvin);
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	4923      	ldr	r1, [pc, #140]	@ (8003fa4 <main+0x1fac>)
 8003f16:	069b      	lsls	r3, r3, #26
 8003f18:	0fdb      	lsrs	r3, r3, #31
 8003f1a:	4823      	ldr	r0, [pc, #140]	@ (8003fa8 <main+0x1fb0>)
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	400b      	ands	r3, r1
 8003f20:	181b      	adds	r3, r3, r0
 8003f22:	6810      	ldr	r0, [r2, #0]
 8003f24:	4298      	cmp	r0, r3
 8003f26:	db01      	blt.n	8003f2c <main+0x1f34>
 8003f28:	f7fe fc8e 	bl	8002848 <main+0x850>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	069b      	lsls	r3, r3, #26
 8003f30:	0fdb      	lsrs	r3, r3, #31
 8003f32:	3b01      	subs	r3, #1
 8003f34:	400b      	ands	r3, r1
 8003f36:	491c      	ldr	r1, [pc, #112]	@ (8003fa8 <main+0x1fb0>)
 8003f38:	185b      	adds	r3, r3, r1
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	f7fe fc84 	bl	8002848 <main+0x850>
										if(Aux>((W1209PY.fahrenheit)?To_fahrenheit(W1209PY.Max_TempK100):To_Celsius(W1209PY.Max_TempK100))) 
 8003f40:	4b10      	ldr	r3, [pc, #64]	@ (8003f84 <main+0x1f8c>)
 8003f42:	e769      	b.n	8003e18 <main+0x1e20>
										   Aux=(W1209PY.fahrenheit)?To_fahrenheit(W1209PY.Max_TempK100):To_Celsius(W1209PY.Max_TempK100);
 8003f44:	4b0f      	ldr	r3, [pc, #60]	@ (8003f84 <main+0x1f8c>)
 8003f46:	e779      	b.n	8003e3c <main+0x1e44>
										if(Aux<((W1209PY.fahrenheit)?To_fahrenheit(W1209PY.Min_TempK100):To_Celsius(W1209PY.Min_TempK100))) 
 8003f48:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <main+0x1f8c>)
 8003f4a:	e7b0      	b.n	8003eae <main+0x1eb6>
										   Aux=(W1209PY.fahrenheit)?To_fahrenheit(W1209PY.Min_TempK100):To_Celsius(W1209PY.Min_TempK100);
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <main+0x1f8c>)
 8003f4e:	e7bf      	b.n	8003ed0 <main+0x1ed8>
 8003f50:	00004e1f 	.word	0x00004e1f
 8003f54:	200003b0 	.word	0x200003b0
 8003f58:	ffffbfff 	.word	0xffffbfff
 8003f5c:	20000430 	.word	0x20000430
 8003f60:	20000444 	.word	0x20000444
 8003f64:	20000440 	.word	0x20000440
 8003f68:	20000080 	.word	0x20000080
 8003f6c:	20000094 	.word	0x20000094
 8003f70:	200004d4 	.word	0x200004d4
 8003f74:	200004b0 	.word	0x200004b0
 8003f78:	200003e8 	.word	0x200003e8
 8003f7c:	ffffdfff 	.word	0xffffdfff
 8003f80:	fffffbff 	.word	0xfffffbff
 8003f84:	ffff954d 	.word	0xffff954d
 8003f88:	2000045c 	.word	0x2000045c
 8003f8c:	200004d0 	.word	0x200004d0
 8003f90:	000003ff 	.word	0x000003ff
 8003f94:	fff87f6a 	.word	0xfff87f6a
 8003f98:	200000ac 	.word	0x200000ac
 8003f9c:	20000460 	.word	0x20000460
 8003fa0:	0001863c 	.word	0x0001863c
 8003fa4:	00004cba 	.word	0x00004cba
 8003fa8:	ffff4893 	.word	0xffff4893

08003fac <NMI_Handler>:
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
}
 8003fac:	4770      	bx	lr

08003fae <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  while (1)
 8003fae:	e7fe      	b.n	8003fae <HardFault_Handler>

08003fb0 <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
 8003fb0:	4770      	bx	lr

08003fb2 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003fb2:	4770      	bx	lr

08003fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	Tick_Timer++; ADC_Cal_Time++;
 8003fb6:	4dbb      	ldr	r5, [pc, #748]	@ (80042a4 <SysTick_Handler+0x2f0>)
 8003fb8:	4cbb      	ldr	r4, [pc, #748]	@ (80042a8 <SysTick_Handler+0x2f4>)
 8003fba:	682b      	ldr	r3, [r5, #0]
{
 8003fbc:	b085      	sub	sp, #20
	Tick_Timer++; ADC_Cal_Time++;
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	602b      	str	r3, [r5, #0]
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	9303      	str	r3, [sp, #12]
 8003fc8:	6023      	str	r3, [r4, #0]
	Action_Timer_On+=(Action_Timer_On<Action_Delay_On)?1:0;
 8003fca:	4bb8      	ldr	r3, [pc, #736]	@ (80042ac <SysTick_Handler+0x2f8>)
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	4bb7      	ldr	r3, [pc, #732]	@ (80042b0 <SysTick_Handler+0x2fc>)
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	9302      	str	r3, [sp, #8]
 8003fd6:	9b01      	ldr	r3, [sp, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4288      	cmp	r0, r1
 8003fde:	db00      	blt.n	8003fe2 <SysTick_Handler+0x2e>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	189b      	adds	r3, r3, r2
 8003fe4:	9a01      	ldr	r2, [sp, #4]
 8003fe6:	6013      	str	r3, [r2, #0]
	Action_Timer_Off+=(Action_Timer_Off<Action_Delay_Off)?1:0;
 8003fe8:	4ab2      	ldr	r2, [pc, #712]	@ (80042b4 <SysTick_Handler+0x300>)
 8003fea:	4bb3      	ldr	r3, [pc, #716]	@ (80042b8 <SysTick_Handler+0x304>)
 8003fec:	6816      	ldr	r6, [r2, #0]
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	6811      	ldr	r1, [r2, #0]
 8003ff4:	4286      	cmp	r6, r0
 8003ff6:	db00      	blt.n	8003ffa <SysTick_Handler+0x46>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	185b      	adds	r3, r3, r1
 8003ffc:	6013      	str	r3, [r2, #0]
	if(Timeout<=The10seconds) Timeout++;
 8003ffe:	4baf      	ldr	r3, [pc, #700]	@ (80042bc <SysTick_Handler+0x308>)
 8004000:	4aaf      	ldr	r2, [pc, #700]	@ (80042c0 <SysTick_Handler+0x30c>)
 8004002:	6819      	ldr	r1, [r3, #0]
 8004004:	4291      	cmp	r1, r2
 8004006:	dc02      	bgt.n	800400e <SysTick_Handler+0x5a>
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	3201      	adds	r2, #1
 800400c:	601a      	str	r2, [r3, #0]
	Multiplex=((++Multiplex)==24)?0:Multiplex;
 800400e:	4bad      	ldr	r3, [pc, #692]	@ (80042c4 <SysTick_Handler+0x310>)
 8004010:	2100      	movs	r1, #0
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	3201      	adds	r2, #1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	2a18      	cmp	r2, #24
 800401a:	d000      	beq.n	800401e <SysTick_Handler+0x6a>
 800401c:	6819      	ldr	r1, [r3, #0]
	
	if(W1209PY.Timer_Enable){
 800401e:	4aaa      	ldr	r2, [pc, #680]	@ (80042c8 <SysTick_Handler+0x314>)
	Multiplex=((++Multiplex)==24)?0:Multiplex;
 8004020:	6019      	str	r1, [r3, #0]
	if(W1209PY.Timer_Enable){
 8004022:	6811      	ldr	r1, [r2, #0]
 8004024:	4ba9      	ldr	r3, [pc, #676]	@ (80042cc <SysTick_Handler+0x318>)
 8004026:	0549      	lsls	r1, r1, #21
 8004028:	d400      	bmi.n	800402c <SysTick_Handler+0x78>
 800402a:	e0de      	b.n	80041ea <SysTick_Handler+0x236>
		OneSec_Ticker++;
		if(OneSec_Ticker==2000){
 800402c:	26fa      	movs	r6, #250	@ 0xfa
		OneSec_Ticker++;
 800402e:	48a8      	ldr	r0, [pc, #672]	@ (80042d0 <SysTick_Handler+0x31c>)
		if(OneSec_Ticker==2000){
 8004030:	00f6      	lsls	r6, r6, #3
		OneSec_Ticker++;
 8004032:	6801      	ldr	r1, [r0, #0]
 8004034:	3101      	adds	r1, #1
		if(OneSec_Ticker==2000){
 8004036:	42b1      	cmp	r1, r6
 8004038:	d069      	beq.n	800410e <SysTick_Handler+0x15a>
		OneSec_Ticker++;
 800403a:	6001      	str	r1, [r0, #0]
				if(!Beeper_Flag) Beeper_Flag=1;
			}
		}
	} else if(Beeper_Flag&&(!Alarm_Flag)) Beeper_Flag=0;
	
	Tick_Flag=1;
 800403c:	2001      	movs	r0, #1
	if((++Roll_Timer)==500){
 800403e:	26fa      	movs	r6, #250	@ 0xfa
	Tick_Flag=1;
 8004040:	4aa4      	ldr	r2, [pc, #656]	@ (80042d4 <SysTick_Handler+0x320>)
	if((++Roll_Timer)==500){
 8004042:	49a5      	ldr	r1, [pc, #660]	@ (80042d8 <SysTick_Handler+0x324>)
	Tick_Flag=1;
 8004044:	6010      	str	r0, [r2, #0]
	if((++Roll_Timer)==500){
 8004046:	680a      	ldr	r2, [r1, #0]
 8004048:	0076      	lsls	r6, r6, #1
 800404a:	1812      	adds	r2, r2, r0
 800404c:	600a      	str	r2, [r1, #0]
 800404e:	42b2      	cmp	r2, r6
 8004050:	d103      	bne.n	800405a <SysTick_Handler+0xa6>
		Roll_Timer=0;
 8004052:	2200      	movs	r2, #0
 8004054:	600a      	str	r2, [r1, #0]
		Roll_Flag=1;
 8004056:	4aa1      	ldr	r2, [pc, #644]	@ (80042dc <SysTick_Handler+0x328>)
 8004058:	6010      	str	r0, [r2, #0]
	}
	
	if(Beeper_Flag&&W1209PY.Sound)	LL_GPIO_SetOutputPin(GPIOA,Beeper<<(((Tick_Timer&1)&&(Roll_Timer>250))?0:16)); else if(LL_GPIO_IsOutputPinSet(GPIOA,Beeper)) LL_GPIO_ResetOutputPin(GPIOA,Beeper);
 800405a:	4aa1      	ldr	r2, [pc, #644]	@ (80042e0 <SysTick_Handler+0x32c>)
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	2a00      	cmp	r2, #0
 8004060:	d100      	bne.n	8004064 <SysTick_Handler+0xb0>
 8004062:	e0cd      	b.n	8004200 <SysTick_Handler+0x24c>
 8004064:	4a98      	ldr	r2, [pc, #608]	@ (80042c8 <SysTick_Handler+0x314>)
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	0452      	lsls	r2, r2, #17
 800406a:	d400      	bmi.n	800406e <SysTick_Handler+0xba>
 800406c:	e0c8      	b.n	8004200 <SysTick_Handler+0x24c>
 800406e:	682a      	ldr	r2, [r5, #0]
 8004070:	07d2      	lsls	r2, r2, #31
 8004072:	d503      	bpl.n	800407c <SysTick_Handler+0xc8>
 8004074:	6808      	ldr	r0, [r1, #0]
 8004076:	2202      	movs	r2, #2
 8004078:	28fa      	cmp	r0, #250	@ 0xfa
 800407a:	dc01      	bgt.n	8004080 <SysTick_Handler+0xcc>
 800407c:	2280      	movs	r2, #128	@ 0x80
 800407e:	0292      	lsls	r2, r2, #10
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004080:	20a0      	movs	r0, #160	@ 0xa0
 8004082:	05c0      	lsls	r0, r0, #23
 8004084:	6182      	str	r2, [r0, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004086:	20a0      	movs	r0, #160	@ 0xa0
 8004088:	2503      	movs	r5, #3
 800408a:	05c0      	lsls	r0, r0, #23
 800408c:	6802      	ldr	r2, [r0, #0]
 800408e:	260c      	movs	r6, #12
 8004090:	43aa      	bics	r2, r5
 8004092:	6002      	str	r2, [r0, #0]
 8004094:	2030      	movs	r0, #48	@ 0x30
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4382      	bics	r2, r0
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	3090      	adds	r0, #144	@ 0x90
 80040a0:	4382      	bics	r2, r0
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	4a8f      	ldr	r2, [pc, #572]	@ (80042e4 <SysTick_Handler+0x330>)
 80040a8:	4010      	ands	r0, r2
 80040aa:	6018      	str	r0, [r3, #0]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	43b0      	bics	r0, r6
 80040b0:	6018      	str	r0, [r3, #0]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	43a8      	bics	r0, r5
 80040b6:	6018      	str	r0, [r3, #0]
	LL_GPIO_SetPinMode(GPIOB, Display_P2, LL_GPIO_MODE_INPUT);
	LL_GPIO_SetPinMode(GPIOB, Display_P3, LL_GPIO_MODE_INPUT);
	LL_GPIO_SetPinMode(GPIOB, Display_P4, LL_GPIO_MODE_INPUT);
	LL_GPIO_SetPinMode(GPIOB, Display_P5, LL_GPIO_MODE_INPUT);
	
	if(!Flashing_Flag||(Roll_Timer>=250)){
 80040b8:	488b      	ldr	r0, [pc, #556]	@ (80042e8 <SysTick_Handler+0x334>)
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	2800      	cmp	r0, #0
 80040be:	d003      	beq.n	80040c8 <SysTick_Handler+0x114>
 80040c0:	6808      	ldr	r0, [r1, #0]
 80040c2:	28f9      	cmp	r0, #249	@ 0xf9
 80040c4:	dc00      	bgt.n	80040c8 <SysTick_Handler+0x114>
 80040c6:	e350      	b.n	800476a <SysTick_Handler+0x7b6>

      if(!D1Flash||(Roll_Timer>=250)) switch(Multiplex){
 80040c8:	4888      	ldr	r0, [pc, #544]	@ (80042ec <SysTick_Handler+0x338>)
 80040ca:	6800      	ldr	r0, [r0, #0]
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d003      	beq.n	80040d8 <SysTick_Handler+0x124>
 80040d0:	6808      	ldr	r0, [r1, #0]
 80040d2:	28f9      	cmp	r0, #249	@ 0xf9
 80040d4:	dc00      	bgt.n	80040d8 <SysTick_Handler+0x124>
 80040d6:	e138      	b.n	800434a <SysTick_Handler+0x396>
 80040d8:	487a      	ldr	r0, [pc, #488]	@ (80042c4 <SysTick_Handler+0x310>)
 80040da:	6800      	ldr	r0, [r0, #0]
 80040dc:	2813      	cmp	r0, #19
 80040de:	d900      	bls.n	80040e2 <SysTick_Handler+0x12e>
 80040e0:	e133      	b.n	800434a <SysTick_Handler+0x396>
 80040e2:	f7fb fff7 	bl	80000d4 <__gnu_thumb1_case_uhi>
 80040e6:	0096      	.short	0x0096
 80040e8:	00a90132 	.word	0x00a90132
 80040ec:	00ce00bd 	.word	0x00ce00bd
 80040f0:	01320149 	.word	0x01320149
 80040f4:	01320132 	.word	0x01320132
 80040f8:	0132015a 	.word	0x0132015a
 80040fc:	01320132 	.word	0x01320132
 8004100:	01650132 	.word	0x01650132
 8004104:	01320132 	.word	0x01320132
 8004108:	01320132 	.word	0x01320132
 800410c:	011b      	.short	0x011b
			OneSec_Ticker=0;
 800410e:	2100      	movs	r1, #0
 8004110:	6001      	str	r1, [r0, #0]
			if(W1209PY.TM_Seconds||W1209PY.TM_Minutes||W1209PY.TM_Days||W1209PY.TM_Hours) { 
 8004112:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004114:	00c9      	lsls	r1, r1, #3
 8004116:	0e89      	lsrs	r1, r1, #26
 8004118:	d10a      	bne.n	8004130 <SysTick_Handler+0x17c>
 800411a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800411c:	0249      	lsls	r1, r1, #9
 800411e:	0e89      	lsrs	r1, r1, #26
 8004120:	d106      	bne.n	8004130 <SysTick_Handler+0x17c>
 8004122:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004124:	0509      	lsls	r1, r1, #20
 8004126:	d103      	bne.n	8004130 <SysTick_Handler+0x17c>
 8004128:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800412a:	03c9      	lsls	r1, r1, #15
 800412c:	0ec9      	lsrs	r1, r1, #27
 800412e:	d04d      	beq.n	80041cc <SysTick_Handler+0x218>
				if(W1209PY.TM_Seconds) { W1209PY.TM_Seconds--; } else {
 8004130:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004132:	4e6f      	ldr	r6, [pc, #444]	@ (80042f0 <SysTick_Handler+0x33c>)
 8004134:	00c9      	lsls	r1, r1, #3
 8004136:	0e89      	lsrs	r1, r1, #26
 8004138:	d00b      	beq.n	8004152 <SysTick_Handler+0x19e>
 800413a:	273f      	movs	r7, #63	@ 0x3f
 800413c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800413e:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8004140:	00c9      	lsls	r1, r1, #3
 8004142:	0e89      	lsrs	r1, r1, #26
 8004144:	313f      	adds	r1, #63	@ 0x3f
 8004146:	4039      	ands	r1, r7
 8004148:	05c9      	lsls	r1, r1, #23
						if(W1209PY.TM_Hours) {W1209PY.TM_Hours--;} else{
 800414a:	4030      	ands	r0, r6
 800414c:	4308      	orrs	r0, r1
 800414e:	6310      	str	r0, [r2, #48]	@ 0x30
 8004150:	e774      	b.n	800403c <SysTick_Handler+0x88>
					W1209PY.TM_Seconds=59;
 8004152:	21ec      	movs	r1, #236	@ 0xec
 8004154:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8004156:	0549      	lsls	r1, r1, #21
 8004158:	4030      	ands	r0, r6
 800415a:	4301      	orrs	r1, r0
 800415c:	6311      	str	r1, [r2, #48]	@ 0x30
					if(W1209PY.TM_Minutes) {W1209PY.TM_Minutes--; }else {
 800415e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004160:	4e64      	ldr	r6, [pc, #400]	@ (80042f4 <SysTick_Handler+0x340>)
 8004162:	0249      	lsls	r1, r1, #9
 8004164:	0e89      	lsrs	r1, r1, #26
 8004166:	d008      	beq.n	800417a <SysTick_Handler+0x1c6>
 8004168:	273f      	movs	r7, #63	@ 0x3f
 800416a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800416c:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800416e:	0249      	lsls	r1, r1, #9
 8004170:	0e89      	lsrs	r1, r1, #26
 8004172:	313f      	adds	r1, #63	@ 0x3f
 8004174:	4039      	ands	r1, r7
 8004176:	0449      	lsls	r1, r1, #17
 8004178:	e7e7      	b.n	800414a <SysTick_Handler+0x196>
						W1209PY.TM_Minutes=59;
 800417a:	21ec      	movs	r1, #236	@ 0xec
 800417c:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800417e:	03c9      	lsls	r1, r1, #15
 8004180:	4030      	ands	r0, r6
 8004182:	4301      	orrs	r1, r0
 8004184:	6311      	str	r1, [r2, #48]	@ 0x30
						if(W1209PY.TM_Hours) {W1209PY.TM_Hours--;} else{
 8004186:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004188:	4e5b      	ldr	r6, [pc, #364]	@ (80042f8 <SysTick_Handler+0x344>)
 800418a:	03c9      	lsls	r1, r1, #15
 800418c:	0ec9      	lsrs	r1, r1, #27
 800418e:	d008      	beq.n	80041a2 <SysTick_Handler+0x1ee>
 8004190:	271f      	movs	r7, #31
 8004192:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004194:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8004196:	03c9      	lsls	r1, r1, #15
 8004198:	0ec9      	lsrs	r1, r1, #27
 800419a:	311f      	adds	r1, #31
 800419c:	4039      	ands	r1, r7
 800419e:	0309      	lsls	r1, r1, #12
 80041a0:	e7d3      	b.n	800414a <SysTick_Handler+0x196>
							W1209PY.TM_Hours=23;
 80041a2:	21b8      	movs	r1, #184	@ 0xb8
 80041a4:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80041a6:	0249      	lsls	r1, r1, #9
 80041a8:	4030      	ands	r0, r6
 80041aa:	4301      	orrs	r1, r0
 80041ac:	6311      	str	r1, [r2, #48]	@ 0x30
							if(W1209PY.TM_Days) W1209PY.TM_Days--;
 80041ae:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80041b0:	0509      	lsls	r1, r1, #20
 80041b2:	d100      	bne.n	80041b6 <SysTick_Handler+0x202>
 80041b4:	e742      	b.n	800403c <SysTick_Handler+0x88>
 80041b6:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80041b8:	4e50      	ldr	r6, [pc, #320]	@ (80042fc <SysTick_Handler+0x348>)
 80041ba:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80041bc:	0500      	lsls	r0, r0, #20
 80041be:	1980      	adds	r0, r0, r6
 80041c0:	0b09      	lsrs	r1, r1, #12
 80041c2:	0d00      	lsrs	r0, r0, #20
 80041c4:	0309      	lsls	r1, r1, #12
 80041c6:	4301      	orrs	r1, r0
 80041c8:	6311      	str	r1, [r2, #48]	@ 0x30
 80041ca:	e737      	b.n	800403c <SysTick_Handler+0x88>
				System_Ready=0;
 80041cc:	4a4c      	ldr	r2, [pc, #304]	@ (8004300 <SysTick_Handler+0x34c>)
 80041ce:	6011      	str	r1, [r2, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 80041d0:	2240      	movs	r2, #64	@ 0x40
 80041d2:	6959      	ldr	r1, [r3, #20]
				if(LL_GPIO_IsOutputPinSet(GPIOB, Relay_Out)) LL_GPIO_ResetOutputPin(GPIOB, Relay_Out);
 80041d4:	4211      	tst	r1, r2
 80041d6:	d000      	beq.n	80041da <SysTick_Handler+0x226>
  WRITE_REG(GPIOx->BRR, PinMask);
 80041d8:	629a      	str	r2, [r3, #40]	@ 0x28
				if(!Beeper_Flag) Beeper_Flag=1;
 80041da:	4a41      	ldr	r2, [pc, #260]	@ (80042e0 <SysTick_Handler+0x32c>)
 80041dc:	6811      	ldr	r1, [r2, #0]
 80041de:	2900      	cmp	r1, #0
 80041e0:	d000      	beq.n	80041e4 <SysTick_Handler+0x230>
 80041e2:	e72b      	b.n	800403c <SysTick_Handler+0x88>
 80041e4:	3101      	adds	r1, #1
	} else if(Beeper_Flag&&(!Alarm_Flag)) Beeper_Flag=0;
 80041e6:	6011      	str	r1, [r2, #0]
 80041e8:	e728      	b.n	800403c <SysTick_Handler+0x88>
 80041ea:	4a3d      	ldr	r2, [pc, #244]	@ (80042e0 <SysTick_Handler+0x32c>)
 80041ec:	6811      	ldr	r1, [r2, #0]
 80041ee:	2900      	cmp	r1, #0
 80041f0:	d100      	bne.n	80041f4 <SysTick_Handler+0x240>
 80041f2:	e723      	b.n	800403c <SysTick_Handler+0x88>
 80041f4:	4943      	ldr	r1, [pc, #268]	@ (8004304 <SysTick_Handler+0x350>)
 80041f6:	6809      	ldr	r1, [r1, #0]
 80041f8:	2900      	cmp	r1, #0
 80041fa:	d000      	beq.n	80041fe <SysTick_Handler+0x24a>
 80041fc:	e71e      	b.n	800403c <SysTick_Handler+0x88>
 80041fe:	e7f2      	b.n	80041e6 <SysTick_Handler+0x232>
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 8004200:	22a0      	movs	r2, #160	@ 0xa0
 8004202:	2002      	movs	r0, #2
 8004204:	05d2      	lsls	r2, r2, #23
 8004206:	6955      	ldr	r5, [r2, #20]
	if(Beeper_Flag&&W1209PY.Sound)	LL_GPIO_SetOutputPin(GPIOA,Beeper<<(((Tick_Timer&1)&&(Roll_Timer>250))?0:16)); else if(LL_GPIO_IsOutputPinSet(GPIOA,Beeper)) LL_GPIO_ResetOutputPin(GPIOA,Beeper);
 8004208:	4205      	tst	r5, r0
 800420a:	d100      	bne.n	800420e <SysTick_Handler+0x25a>
 800420c:	e73b      	b.n	8004086 <SysTick_Handler+0xd2>
  WRITE_REG(GPIOx->BRR, PinMask);
 800420e:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8004210:	e739      	b.n	8004086 <SysTick_Handler+0xd2>
		case 0: 
				if(Disp_Chars[0]&_DP){
 8004212:	483d      	ldr	r0, [pc, #244]	@ (8004308 <SysTick_Handler+0x354>)
 8004214:	7800      	ldrb	r0, [r0, #0]
 8004216:	b240      	sxtb	r0, r0
 8004218:	2800      	cmp	r0, #0
 800421a:	db00      	blt.n	800421e <SysTick_Handler+0x26a>
 800421c:	e095      	b.n	800434a <SysTick_Handler+0x396>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800421e:	483b      	ldr	r0, [pc, #236]	@ (800430c <SysTick_Handler+0x358>)
 8004220:	6198      	str	r0, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004222:	2030      	movs	r0, #48	@ 0x30
 8004224:	681d      	ldr	r5, [r3, #0]
 8004226:	4385      	bics	r5, r0
 8004228:	3820      	subs	r0, #32
 800422a:	4328      	orrs	r0, r5
 800422c:	6018      	str	r0, [r3, #0]
 800422e:	20c0      	movs	r0, #192	@ 0xc0
 8004230:	681d      	ldr	r5, [r3, #0]
 8004232:	4385      	bics	r5, r0
 8004234:	3880      	subs	r0, #128	@ 0x80
 8004236:	e010      	b.n	800425a <SysTick_Handler+0x2a6>
				LL_GPIO_SetPinMode(GPIOB, Display_P1, LL_GPIO_MODE_OUTPUT); 
				LL_GPIO_SetPinMode(GPIOB, Display_P2, LL_GPIO_MODE_OUTPUT); //activate output for Dot1 segment.	
				}					
				break;
		case 2:
				if(Disp_Chars[0]&_F){
 8004238:	4833      	ldr	r0, [pc, #204]	@ (8004308 <SysTick_Handler+0x354>)
 800423a:	7800      	ldrb	r0, [r0, #0]
 800423c:	0780      	lsls	r0, r0, #30
 800423e:	d400      	bmi.n	8004242 <SysTick_Handler+0x28e>
 8004240:	e083      	b.n	800434a <SysTick_Handler+0x396>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004242:	4833      	ldr	r0, [pc, #204]	@ (8004310 <SysTick_Handler+0x35c>)
 8004244:	6198      	str	r0, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004246:	20c0      	movs	r0, #192	@ 0xc0
 8004248:	681d      	ldr	r5, [r3, #0]
 800424a:	4385      	bics	r5, r0
 800424c:	3880      	subs	r0, #128	@ 0x80
 800424e:	4328      	orrs	r0, r5
 8004250:	6018      	str	r0, [r3, #0]
 8004252:	2080      	movs	r0, #128	@ 0x80
 8004254:	681d      	ldr	r5, [r3, #0]
 8004256:	0040      	lsls	r0, r0, #1
 8004258:	4015      	ands	r5, r2
 800425a:	4328      	orrs	r0, r5
 800425c:	6018      	str	r0, [r3, #0]
}
 800425e:	e074      	b.n	800434a <SysTick_Handler+0x396>
					LL_GPIO_SetPinMode(GPIOB, Display_P2, LL_GPIO_MODE_OUTPUT);
					LL_GPIO_SetPinMode(GPIOB, Display_P3, LL_GPIO_MODE_OUTPUT); //activate output for F1 segment.
				}	
		  		break;
		case 3:
				if(Disp_Chars[0]&_G){
 8004260:	4829      	ldr	r0, [pc, #164]	@ (8004308 <SysTick_Handler+0x354>)
 8004262:	7800      	ldrb	r0, [r0, #0]
 8004264:	07c0      	lsls	r0, r0, #31
 8004266:	d570      	bpl.n	800434a <SysTick_Handler+0x396>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004268:	482a      	ldr	r0, [pc, #168]	@ (8004314 <SysTick_Handler+0x360>)
 800426a:	6198      	str	r0, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800426c:	20c0      	movs	r0, #192	@ 0xc0
 800426e:	681d      	ldr	r5, [r3, #0]
 8004270:	4385      	bics	r5, r0
 8004272:	3880      	subs	r0, #128	@ 0x80
 8004274:	4328      	orrs	r0, r5
 8004276:	6018      	str	r0, [r3, #0]
 8004278:	200c      	movs	r0, #12
 800427a:	681d      	ldr	r5, [r3, #0]
 800427c:	4385      	bics	r5, r0
 800427e:	3808      	subs	r0, #8
 8004280:	e7eb      	b.n	800425a <SysTick_Handler+0x2a6>
					LL_GPIO_SetPinMode(GPIOB, Display_P2, LL_GPIO_MODE_OUTPUT);
					LL_GPIO_SetPinMode(GPIOB, Display_P4, LL_GPIO_MODE_OUTPUT);	//activate output for G1 segment.
				}
				break;
		case 4:
				if(Disp_Chars[0]&_C){
 8004282:	4821      	ldr	r0, [pc, #132]	@ (8004308 <SysTick_Handler+0x354>)
 8004284:	7800      	ldrb	r0, [r0, #0]
 8004286:	06c0      	lsls	r0, r0, #27
 8004288:	d55f      	bpl.n	800434a <SysTick_Handler+0x396>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800428a:	4823      	ldr	r0, [pc, #140]	@ (8004318 <SysTick_Handler+0x364>)
 800428c:	6198      	str	r0, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800428e:	20c0      	movs	r0, #192	@ 0xc0
 8004290:	681d      	ldr	r5, [r3, #0]
 8004292:	4385      	bics	r5, r0
 8004294:	3880      	subs	r0, #128	@ 0x80
 8004296:	4328      	orrs	r0, r5
 8004298:	6018      	str	r0, [r3, #0]
 800429a:	2003      	movs	r0, #3
 800429c:	681d      	ldr	r5, [r3, #0]
 800429e:	4385      	bics	r5, r0
 80042a0:	3802      	subs	r0, #2
 80042a2:	e7da      	b.n	800425a <SysTick_Handler+0x2a6>
 80042a4:	200004d0 	.word	0x200004d0
 80042a8:	20000384 	.word	0x20000384
 80042ac:	200004cc 	.word	0x200004cc
 80042b0:	200004c0 	.word	0x200004c0
 80042b4:	200004c8 	.word	0x200004c8
 80042b8:	200004c4 	.word	0x200004c4
 80042bc:	200004b0 	.word	0x200004b0
 80042c0:	00004e20 	.word	0x00004e20
 80042c4:	200004bc 	.word	0x200004bc
 80042c8:	200003b0 	.word	0x200003b0
 80042cc:	50000400 	.word	0x50000400
 80042d0:	200004d8 	.word	0x200004d8
 80042d4:	200004b8 	.word	0x200004b8
 80042d8:	200004b4 	.word	0x200004b4
 80042dc:	200004ac 	.word	0x200004ac
 80042e0:	200004a8 	.word	0x200004a8
 80042e4:	fffffcff 	.word	0xfffffcff
 80042e8:	200004a4 	.word	0x200004a4
 80042ec:	200004a0 	.word	0x200004a0
 80042f0:	e07fffff 	.word	0xe07fffff
 80042f4:	ff81ffff 	.word	0xff81ffff
 80042f8:	fffe0fff 	.word	0xfffe0fff
 80042fc:	fff00000 	.word	0xfff00000
 8004300:	2000048c 	.word	0x2000048c
 8004304:	2000042c 	.word	0x2000042c
 8004308:	20000468 	.word	0x20000468
 800430c:	00040008 	.word	0x00040008
 8004310:	00080010 	.word	0x00080010
 8004314:	00080002 	.word	0x00080002
 8004318:	00080001 	.word	0x00080001
					LL_GPIO_SetPinMode(GPIOB, Display_P2, LL_GPIO_MODE_OUTPUT);
					LL_GPIO_SetPinMode(GPIOB, Display_P5, LL_GPIO_MODE_OUTPUT); //activate output for C1 segment.
				}
				break;
		case 19:
				if(Disp_Chars[0]&_D){
 800431c:	4882      	ldr	r0, [pc, #520]	@ (8004528 <SysTick_Handler+0x574>)
 800431e:	7805      	ldrb	r5, [r0, #0]
 8004320:	2008      	movs	r0, #8
 8004322:	4205      	tst	r5, r0
 8004324:	d011      	beq.n	800434a <SysTick_Handler+0x396>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004326:	6198      	str	r0, [r3, #24]
 8004328:	2580      	movs	r5, #128	@ 0x80
 800432a:	20a0      	movs	r0, #160	@ 0xa0
 800432c:	026d      	lsls	r5, r5, #9
 800432e:	05c0      	lsls	r0, r0, #23
 8004330:	6185      	str	r5, [r0, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004332:	25c0      	movs	r5, #192	@ 0xc0
 8004334:	681e      	ldr	r6, [r3, #0]
 8004336:	43ae      	bics	r6, r5
 8004338:	3d80      	subs	r5, #128	@ 0x80
 800433a:	4335      	orrs	r5, r6
 800433c:	601d      	str	r5, [r3, #0]
 800433e:	2503      	movs	r5, #3
 8004340:	6806      	ldr	r6, [r0, #0]
 8004342:	43ae      	bics	r6, r5
 8004344:	3d02      	subs	r5, #2
 8004346:	4335      	orrs	r5, r6
 8004348:	6005      	str	r5, [r0, #0]
				}
				break;
		default:
				break;
	  }
	  if(!D2Flash||(Roll_Timer>=250)) switch(Multiplex){
 800434a:	4878      	ldr	r0, [pc, #480]	@ (800452c <SysTick_Handler+0x578>)
 800434c:	6800      	ldr	r0, [r0, #0]
 800434e:	2800      	cmp	r0, #0
 8004350:	d003      	beq.n	800435a <SysTick_Handler+0x3a6>
 8004352:	6809      	ldr	r1, [r1, #0]
 8004354:	29f9      	cmp	r1, #249	@ 0xf9
 8004356:	dc00      	bgt.n	800435a <SysTick_Handler+0x3a6>
 8004358:	e081      	b.n	800445e <SysTick_Handler+0x4aa>
 800435a:	4975      	ldr	r1, [pc, #468]	@ (8004530 <SysTick_Handler+0x57c>)
 800435c:	6808      	ldr	r0, [r1, #0]
 800435e:	3801      	subs	r0, #1
 8004360:	280f      	cmp	r0, #15
 8004362:	d87c      	bhi.n	800445e <SysTick_Handler+0x4aa>
 8004364:	f7fb feac 	bl	80000c0 <__gnu_thumb1_case_uqi>
 8004368:	7b7b7b2f 	.word	0x7b7b7b2f
 800436c:	6552417b 	.word	0x6552417b
 8004370:	7ba2977b 	.word	0x7ba2977b
 8004374:	beb37b7b 	.word	0xbeb37b7b
				if(Disp_Chars[0]&_A){
 8004378:	486b      	ldr	r0, [pc, #428]	@ (8004528 <SysTick_Handler+0x574>)
 800437a:	7805      	ldrb	r5, [r0, #0]
 800437c:	2040      	movs	r0, #64	@ 0x40
 800437e:	4205      	tst	r5, r0
 8004380:	d0e3      	beq.n	800434a <SysTick_Handler+0x396>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004382:	4d6c      	ldr	r5, [pc, #432]	@ (8004534 <SysTick_Handler+0x580>)
 8004384:	619d      	str	r5, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004386:	2580      	movs	r5, #128	@ 0x80
 8004388:	681e      	ldr	r6, [r3, #0]
 800438a:	006d      	lsls	r5, r5, #1
 800438c:	4016      	ands	r6, r2
 800438e:	4335      	orrs	r5, r6
 8004390:	26c0      	movs	r6, #192	@ 0xc0
 8004392:	601d      	str	r5, [r3, #0]
 8004394:	681d      	ldr	r5, [r3, #0]
 8004396:	43b5      	bics	r5, r6
 8004398:	e75f      	b.n	800425a <SysTick_Handler+0x2a6>
				if(Disp_Chars[0]&_B){
 800439a:	4863      	ldr	r0, [pc, #396]	@ (8004528 <SysTick_Handler+0x574>)
 800439c:	7800      	ldrb	r0, [r0, #0]
 800439e:	0680      	lsls	r0, r0, #26
 80043a0:	d5d3      	bpl.n	800434a <SysTick_Handler+0x396>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80043a2:	4865      	ldr	r0, [pc, #404]	@ (8004538 <SysTick_Handler+0x584>)
 80043a4:	6198      	str	r0, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80043a6:	200c      	movs	r0, #12
 80043a8:	681d      	ldr	r5, [r3, #0]
 80043aa:	4385      	bics	r5, r0
 80043ac:	3808      	subs	r0, #8
 80043ae:	e73c      	b.n	800422a <SysTick_Handler+0x276>
				if(Disp_Chars[0]&_E){
 80043b0:	485d      	ldr	r0, [pc, #372]	@ (8004528 <SysTick_Handler+0x574>)
 80043b2:	7800      	ldrb	r0, [r0, #0]
 80043b4:	0740      	lsls	r0, r0, #29
 80043b6:	d5c8      	bpl.n	800434a <SysTick_Handler+0x396>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80043b8:	4860      	ldr	r0, [pc, #384]	@ (800453c <SysTick_Handler+0x588>)
 80043ba:	6198      	str	r0, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80043bc:	2003      	movs	r0, #3
 80043be:	681d      	ldr	r5, [r3, #0]
 80043c0:	4385      	bics	r5, r0
 80043c2:	3802      	subs	r0, #2
 80043c4:	e731      	b.n	800422a <SysTick_Handler+0x276>
		case 1:
				if(Disp_Chars[1]&_DP){
 80043c6:	4958      	ldr	r1, [pc, #352]	@ (8004528 <SysTick_Handler+0x574>)
 80043c8:	7849      	ldrb	r1, [r1, #1]
 80043ca:	b249      	sxtb	r1, r1
 80043cc:	2900      	cmp	r1, #0
 80043ce:	da46      	bge.n	800445e <SysTick_Handler+0x4aa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80043d0:	495b      	ldr	r1, [pc, #364]	@ (8004540 <SysTick_Handler+0x58c>)
 80043d2:	6199      	str	r1, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80043d4:	2130      	movs	r1, #48	@ 0x30
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	4388      	bics	r0, r1
 80043da:	3920      	subs	r1, #32
 80043dc:	4301      	orrs	r1, r0
 80043de:	6019      	str	r1, [r3, #0]
 80043e0:	2180      	movs	r1, #128	@ 0x80
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	0049      	lsls	r1, r1, #1
 80043e6:	4010      	ands	r0, r2
 80043e8:	e020      	b.n	800442c <SysTick_Handler+0x478>
					LL_GPIO_SetPinMode(GPIOB, Display_P1, LL_GPIO_MODE_OUTPUT);
					LL_GPIO_SetPinMode(GPIOB, Display_P3, LL_GPIO_MODE_OUTPUT); //activate output for Dot1 segment.
				}	
		  		break;
		case 6:
				if(Disp_Chars[1]&_F){
 80043ea:	494f      	ldr	r1, [pc, #316]	@ (8004528 <SysTick_Handler+0x574>)
 80043ec:	7849      	ldrb	r1, [r1, #1]
 80043ee:	0789      	lsls	r1, r1, #30
 80043f0:	d535      	bpl.n	800445e <SysTick_Handler+0x4aa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80043f2:	4954      	ldr	r1, [pc, #336]	@ (8004544 <SysTick_Handler+0x590>)
 80043f4:	6199      	str	r1, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80043f6:	2180      	movs	r1, #128	@ 0x80
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	0049      	lsls	r1, r1, #1
 80043fc:	4010      	ands	r0, r2
 80043fe:	4301      	orrs	r1, r0
 8004400:	6019      	str	r1, [r3, #0]
 8004402:	210c      	movs	r1, #12
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	4388      	bics	r0, r1
 8004408:	3908      	subs	r1, #8
 800440a:	e00f      	b.n	800442c <SysTick_Handler+0x478>
					LL_GPIO_SetPinMode(GPIOB, Display_P3, LL_GPIO_MODE_OUTPUT);
					LL_GPIO_SetPinMode(GPIOB, Display_P4, LL_GPIO_MODE_OUTPUT); //activate output for F2 segment.
				}
				break;
		case 7:
				if(Disp_Chars[1]&_G){
 800440c:	4946      	ldr	r1, [pc, #280]	@ (8004528 <SysTick_Handler+0x574>)
 800440e:	7848      	ldrb	r0, [r1, #1]
 8004410:	2101      	movs	r1, #1
 8004412:	4208      	tst	r0, r1
 8004414:	d023      	beq.n	800445e <SysTick_Handler+0x4aa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004416:	484c      	ldr	r0, [pc, #304]	@ (8004548 <SysTick_Handler+0x594>)
 8004418:	6198      	str	r0, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800441a:	2080      	movs	r0, #128	@ 0x80
 800441c:	681d      	ldr	r5, [r3, #0]
 800441e:	0040      	lsls	r0, r0, #1
 8004420:	4015      	ands	r5, r2
 8004422:	4328      	orrs	r0, r5
 8004424:	2503      	movs	r5, #3
 8004426:	6018      	str	r0, [r3, #0]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	43a8      	bics	r0, r5
 800442c:	4301      	orrs	r1, r0
 800442e:	6019      	str	r1, [r3, #0]
}
 8004430:	e015      	b.n	800445e <SysTick_Handler+0x4aa>
					LL_GPIO_SetPinMode(GPIOB, Display_P3, LL_GPIO_MODE_OUTPUT);
					LL_GPIO_SetPinMode(GPIOB, Display_P5, LL_GPIO_MODE_OUTPUT); //activate output for G2 segment.
				}
				break;
		case 8:
				if(Disp_Chars[1]&_E){
 8004432:	493d      	ldr	r1, [pc, #244]	@ (8004528 <SysTick_Handler+0x574>)
 8004434:	7849      	ldrb	r1, [r1, #1]
 8004436:	0749      	lsls	r1, r1, #29
 8004438:	d511      	bpl.n	800445e <SysTick_Handler+0x4aa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800443a:	2180      	movs	r1, #128	@ 0x80
 800443c:	20a0      	movs	r0, #160	@ 0xa0
 800443e:	0349      	lsls	r1, r1, #13
 8004440:	6199      	str	r1, [r3, #24]
 8004442:	2101      	movs	r1, #1
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004444:	2580      	movs	r5, #128	@ 0x80
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004446:	05c0      	lsls	r0, r0, #23
 8004448:	6181      	str	r1, [r0, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800444a:	681e      	ldr	r6, [r3, #0]
 800444c:	006d      	lsls	r5, r5, #1
 800444e:	4016      	ands	r6, r2
 8004450:	4335      	orrs	r5, r6
 8004452:	2603      	movs	r6, #3
 8004454:	601d      	str	r5, [r3, #0]
 8004456:	6805      	ldr	r5, [r0, #0]
 8004458:	43b5      	bics	r5, r6
 800445a:	4329      	orrs	r1, r5
 800445c:	6001      	str	r1, [r0, #0]
				}
				break;
		default:
				break;
	  }
	  if(!D3Flash||(Roll_Timer>=250)) switch(Multiplex){
 800445e:	493b      	ldr	r1, [pc, #236]	@ (800454c <SysTick_Handler+0x598>)
 8004460:	6809      	ldr	r1, [r1, #0]
 8004462:	2900      	cmp	r1, #0
 8004464:	d004      	beq.n	8004470 <SysTick_Handler+0x4bc>
 8004466:	493a      	ldr	r1, [pc, #232]	@ (8004550 <SysTick_Handler+0x59c>)
 8004468:	6809      	ldr	r1, [r1, #0]
 800446a:	29f9      	cmp	r1, #249	@ 0xf9
 800446c:	dc00      	bgt.n	8004470 <SysTick_Handler+0x4bc>
 800446e:	e08b      	b.n	8004588 <SysTick_Handler+0x5d4>
 8004470:	492f      	ldr	r1, [pc, #188]	@ (8004530 <SysTick_Handler+0x57c>)
 8004472:	6808      	ldr	r0, [r1, #0]
 8004474:	380c      	subs	r0, #12
 8004476:	280a      	cmp	r0, #10
 8004478:	d900      	bls.n	800447c <SysTick_Handler+0x4c8>
 800447a:	e085      	b.n	8004588 <SysTick_Handler+0x5d4>
 800447c:	f7fb fe2a 	bl	80000d4 <__gnu_thumb1_case_uhi>
 8004480:	0072003d 	.word	0x0072003d
 8004484:	00840084 	.word	0x00840084
 8004488:	01770084 	.word	0x01770084
 800448c:	0084018d 	.word	0x0084018d
 8004490:	01b701a6 	.word	0x01b701a6
 8004494:	01ce      	.short	0x01ce
				if(Disp_Chars[1]&_D){
 8004496:	4924      	ldr	r1, [pc, #144]	@ (8004528 <SysTick_Handler+0x574>)
 8004498:	7849      	ldrb	r1, [r1, #1]
 800449a:	0709      	lsls	r1, r1, #28
 800449c:	d5df      	bpl.n	800445e <SysTick_Handler+0x4aa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800449e:	492d      	ldr	r1, [pc, #180]	@ (8004554 <SysTick_Handler+0x5a0>)
 80044a0:	6199      	str	r1, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80044a2:	210c      	movs	r1, #12
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	4388      	bics	r0, r1
 80044a8:	3908      	subs	r1, #8
 80044aa:	e797      	b.n	80043dc <SysTick_Handler+0x428>
				if(Disp_Chars[1]&_A){
 80044ac:	491e      	ldr	r1, [pc, #120]	@ (8004528 <SysTick_Handler+0x574>)
 80044ae:	7849      	ldrb	r1, [r1, #1]
 80044b0:	0649      	lsls	r1, r1, #25
 80044b2:	d5d4      	bpl.n	800445e <SysTick_Handler+0x4aa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80044b4:	4928      	ldr	r1, [pc, #160]	@ (8004558 <SysTick_Handler+0x5a4>)
 80044b6:	6199      	str	r1, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80044b8:	210c      	movs	r1, #12
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	4388      	bics	r0, r1
 80044be:	3908      	subs	r1, #8
 80044c0:	4301      	orrs	r1, r0
 80044c2:	6019      	str	r1, [r3, #0]
 80044c4:	2103      	movs	r1, #3
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	4388      	bics	r0, r1
 80044ca:	3902      	subs	r1, #2
 80044cc:	e7ae      	b.n	800442c <SysTick_Handler+0x478>
				if(Disp_Chars[1]&_B){
 80044ce:	4916      	ldr	r1, [pc, #88]	@ (8004528 <SysTick_Handler+0x574>)
 80044d0:	7849      	ldrb	r1, [r1, #1]
 80044d2:	0689      	lsls	r1, r1, #26
 80044d4:	d5c3      	bpl.n	800445e <SysTick_Handler+0x4aa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80044d6:	4921      	ldr	r1, [pc, #132]	@ (800455c <SysTick_Handler+0x5a8>)
 80044d8:	6199      	str	r1, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80044da:	2103      	movs	r1, #3
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	4388      	bics	r0, r1
 80044e0:	3902      	subs	r1, #2
 80044e2:	e77b      	b.n	80043dc <SysTick_Handler+0x428>
				if(Disp_Chars[1]&_C){
 80044e4:	4910      	ldr	r1, [pc, #64]	@ (8004528 <SysTick_Handler+0x574>)
 80044e6:	7849      	ldrb	r1, [r1, #1]
 80044e8:	06c9      	lsls	r1, r1, #27
 80044ea:	d5b8      	bpl.n	800445e <SysTick_Handler+0x4aa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80044ec:	491c      	ldr	r1, [pc, #112]	@ (8004560 <SysTick_Handler+0x5ac>)
 80044ee:	6199      	str	r1, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80044f0:	2103      	movs	r1, #3
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	4388      	bics	r0, r1
 80044f6:	3902      	subs	r1, #2
 80044f8:	e781      	b.n	80043fe <SysTick_Handler+0x44a>
		case 12:
				if(Disp_Chars[2]&_D){
 80044fa:	490b      	ldr	r1, [pc, #44]	@ (8004528 <SysTick_Handler+0x574>)
 80044fc:	7889      	ldrb	r1, [r1, #2]
 80044fe:	0709      	lsls	r1, r1, #28
 8004500:	d542      	bpl.n	8004588 <SysTick_Handler+0x5d4>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004502:	2180      	movs	r1, #128	@ 0x80
 8004504:	20a0      	movs	r0, #160	@ 0xa0
 8004506:	0289      	lsls	r1, r1, #10
 8004508:	6199      	str	r1, [r3, #24]
 800450a:	2101      	movs	r1, #1
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800450c:	250c      	movs	r5, #12
  WRITE_REG(GPIOx->BSRR, PinMask);
 800450e:	05c0      	lsls	r0, r0, #23
 8004510:	6181      	str	r1, [r0, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004512:	681e      	ldr	r6, [r3, #0]
 8004514:	43ae      	bics	r6, r5
 8004516:	3d08      	subs	r5, #8
 8004518:	4335      	orrs	r5, r6
 800451a:	2603      	movs	r6, #3
 800451c:	601d      	str	r5, [r3, #0]
 800451e:	6805      	ldr	r5, [r0, #0]
 8004520:	43b5      	bics	r5, r6
 8004522:	4329      	orrs	r1, r5
 8004524:	6001      	str	r1, [r0, #0]
}
 8004526:	e02f      	b.n	8004588 <SysTick_Handler+0x5d4>
 8004528:	20000468 	.word	0x20000468
 800452c:	2000049c 	.word	0x2000049c
 8004530:	200004bc 	.word	0x200004bc
 8004534:	00100008 	.word	0x00100008
 8004538:	00020008 	.word	0x00020008
 800453c:	00010008 	.word	0x00010008
 8004540:	00040010 	.word	0x00040010
 8004544:	00100002 	.word	0x00100002
 8004548:	00100001 	.word	0x00100001
 800454c:	20000498 	.word	0x20000498
 8004550:	200004b4 	.word	0x200004b4
 8004554:	00020010 	.word	0x00020010
 8004558:	00020001 	.word	0x00020001
 800455c:	00010010 	.word	0x00010010
 8004560:	00010002 	.word	0x00010002
					LL_GPIO_SetPinMode(GPIOB, Display_P4, LL_GPIO_MODE_OUTPUT);
					LL_GPIO_SetPinMode(GPIOA, Display_P6, LL_GPIO_MODE_OUTPUT); //activate output for D3 segment.
				}
				break;
		case 13:
				if(Disp_Chars[2]&_G){
 8004564:	49c9      	ldr	r1, [pc, #804]	@ (800488c <SysTick_Handler+0x8d8>)
 8004566:	7888      	ldrb	r0, [r1, #2]
 8004568:	2101      	movs	r1, #1
 800456a:	4208      	tst	r0, r1
 800456c:	d00c      	beq.n	8004588 <SysTick_Handler+0x5d4>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800456e:	2503      	movs	r5, #3
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004570:	48c7      	ldr	r0, [pc, #796]	@ (8004890 <SysTick_Handler+0x8dc>)
 8004572:	6198      	str	r0, [r3, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	43a8      	bics	r0, r5
 8004578:	4301      	orrs	r1, r0
 800457a:	6019      	str	r1, [r3, #0]
 800457c:	2130      	movs	r1, #48	@ 0x30
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	4388      	bics	r0, r1
 8004582:	3920      	subs	r1, #32
 8004584:	4301      	orrs	r1, r0
 8004586:	6019      	str	r1, [r3, #0]
				break;
	
		default:
				break;
	  }
	  if(Multiplex==23){
 8004588:	49c2      	ldr	r1, [pc, #776]	@ (8004894 <SysTick_Handler+0x8e0>)
 800458a:	6809      	ldr	r1, [r1, #0]
 800458c:	2917      	cmp	r1, #23
 800458e:	d17b      	bne.n	8004688 <SysTick_Handler+0x6d4>
 8004590:	21a0      	movs	r1, #160	@ 0xa0
 8004592:	2503      	movs	r5, #3
 8004594:	2630      	movs	r6, #48	@ 0x30
 8004596:	05c9      	lsls	r1, r1, #23
 8004598:	6808      	ldr	r0, [r1, #0]
 800459a:	43a8      	bics	r0, r5
 800459c:	6008      	str	r0, [r1, #0]
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	43b0      	bics	r0, r6
 80045a2:	6018      	str	r0, [r3, #0]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	3690      	adds	r6, #144	@ 0x90
 80045a8:	43b0      	bics	r0, r6
 80045aa:	6018      	str	r0, [r3, #0]
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	4002      	ands	r2, r0
 80045b0:	200c      	movs	r0, #12
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4382      	bics	r2, r0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80045bc:	3004      	adds	r0, #4
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80045be:	43aa      	bics	r2, r5
 80045c0:	601a      	str	r2, [r3, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80045c2:	690d      	ldr	r5, [r1, #16]
 80045c4:	4ab4      	ldr	r2, [pc, #720]	@ (8004898 <SysTick_Handler+0x8e4>)
 80045c6:	002e      	movs	r6, r5
 80045c8:	49b4      	ldr	r1, [pc, #720]	@ (800489c <SysTick_Handler+0x8e8>)
 80045ca:	4006      	ands	r6, r0
				//Here do analog and switches...
				
				//Process Button_Plus/Minus/Set pushing time, debounce delay (50ms mininum key press for capture).
				//Increments every 3 seconds for long press. Release before 3 seconds for short press.
				
				if(!LL_GPIO_IsInputPinSet(GPIOA, Button_Plus)) {
 80045cc:	4205      	tst	r5, r0
 80045ce:	d000      	beq.n	80045d2 <SysTick_Handler+0x61e>
 80045d0:	e131      	b.n	8004836 <SysTick_Handler+0x882>
					Timeout=0;
 80045d2:	48b3      	ldr	r0, [pc, #716]	@ (80048a0 <SysTick_Handler+0x8ec>)
 80045d4:	6006      	str	r6, [r0, #0]
					Cnt_BPlus++;
 80045d6:	6810      	ldr	r0, [r2, #0]
 80045d8:	3001      	adds	r0, #1
 80045da:	6010      	str	r0, [r2, #0]
					if((Cnt_BPlus&0x3F)==0x3F) Pressed_BPlus=((Cnt_BPlus+1)>>6)+1;
 80045dc:	6810      	ldr	r0, [r2, #0]
 80045de:	43c0      	mvns	r0, r0
 80045e0:	0680      	lsls	r0, r0, #26
 80045e2:	d104      	bne.n	80045ee <SysTick_Handler+0x63a>
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	3201      	adds	r2, #1
 80045e8:	0992      	lsrs	r2, r2, #6
 80045ea:	3201      	adds	r2, #1
 80045ec:	600a      	str	r2, [r1, #0]
 80045ee:	22a0      	movs	r2, #160	@ 0xa0
 80045f0:	05d2      	lsls	r2, r2, #23
 80045f2:	6916      	ldr	r6, [r2, #16]
 80045f4:	2504      	movs	r5, #4
 80045f6:	0037      	movs	r7, r6
 80045f8:	4aaa      	ldr	r2, [pc, #680]	@ (80048a4 <SysTick_Handler+0x8f0>)
 80045fa:	48ab      	ldr	r0, [pc, #684]	@ (80048a8 <SysTick_Handler+0x8f4>)
 80045fc:	402f      	ands	r7, r5
				} else {
						if((Cnt_BPlus>=1)&&(Cnt_BPlus<0x3F)) Pressed_BPlus=1; else Pressed_BPlus=0;
						Cnt_BPlus=0;
						}
					
				if(!LL_GPIO_IsInputPinSet(GPIOA, Button_Minus)) {
 80045fe:	422e      	tst	r6, r5
 8004600:	d000      	beq.n	8004604 <SysTick_Handler+0x650>
 8004602:	e125      	b.n	8004850 <SysTick_Handler+0x89c>
					Timeout=0;
 8004604:	4da6      	ldr	r5, [pc, #664]	@ (80048a0 <SysTick_Handler+0x8ec>)
 8004606:	602f      	str	r7, [r5, #0]
					Cnt_BMinus++;
 8004608:	6815      	ldr	r5, [r2, #0]
 800460a:	3501      	adds	r5, #1
 800460c:	6015      	str	r5, [r2, #0]
					if((Cnt_BMinus&0x3F)==0x3F) Pressed_BMinus=((Cnt_BMinus+1)>>6)+1;
 800460e:	6815      	ldr	r5, [r2, #0]
 8004610:	43ed      	mvns	r5, r5
 8004612:	06ad      	lsls	r5, r5, #26
 8004614:	d104      	bne.n	8004620 <SysTick_Handler+0x66c>
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	3201      	adds	r2, #1
 800461a:	0992      	lsrs	r2, r2, #6
 800461c:	3201      	adds	r2, #1
 800461e:	6002      	str	r2, [r0, #0]
 8004620:	4aa2      	ldr	r2, [pc, #648]	@ (80048ac <SysTick_Handler+0x8f8>)
 8004622:	2501      	movs	r5, #1
 8004624:	6916      	ldr	r6, [r2, #16]
 8004626:	4aa2      	ldr	r2, [pc, #648]	@ (80048b0 <SysTick_Handler+0x8fc>)
 8004628:	0037      	movs	r7, r6
 800462a:	402f      	ands	r7, r5
				} else {
					   if((Cnt_BMinus>=1)&&(Cnt_BMinus<0x3F)) Pressed_BMinus=1; else Pressed_BMinus=0;
					   Cnt_BMinus=0;
					   }

				if(!LL_GPIO_IsInputPinSet(GPIOC, Button_Set)) {
 800462c:	422e      	tst	r6, r5
 800462e:	d000      	beq.n	8004632 <SysTick_Handler+0x67e>
 8004630:	e11b      	b.n	800486a <SysTick_Handler+0x8b6>
					Timeout=0;
 8004632:	4d9b      	ldr	r5, [pc, #620]	@ (80048a0 <SysTick_Handler+0x8ec>)
 8004634:	602f      	str	r7, [r5, #0]
					Cnt_BSet++;
 8004636:	6815      	ldr	r5, [r2, #0]
 8004638:	3501      	adds	r5, #1
 800463a:	6015      	str	r5, [r2, #0]
					if((Cnt_BSet&0x3F)==0x3F) Pressed_BSet=((Cnt_BSet+1)>>6)+1;
 800463c:	6815      	ldr	r5, [r2, #0]
 800463e:	43ed      	mvns	r5, r5
 8004640:	06ad      	lsls	r5, r5, #26
 8004642:	d105      	bne.n	8004650 <SysTick_Handler+0x69c>
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	4d9b      	ldr	r5, [pc, #620]	@ (80048b4 <SysTick_Handler+0x900>)
 8004648:	3201      	adds	r2, #1
 800464a:	0992      	lsrs	r2, r2, #6
 800464c:	3201      	adds	r2, #1
 800464e:	602a      	str	r2, [r5, #0]
				} else {
					   if((Cnt_BSet>=1)&&(Cnt_BSet<0x3F)) Pressed_BSet=1; else Pressed_BSet=0;
					   Cnt_BSet=0;
					   }
					   
			    Anykey=(Pressed_BMinus|Pressed_BPlus|Pressed_BSet);
 8004650:	6802      	ldr	r2, [r0, #0]
 8004652:	6808      	ldr	r0, [r1, #0]
 8004654:	4997      	ldr	r1, [pc, #604]	@ (80048b4 <SysTick_Handler+0x900>)
 8004656:	4302      	orrs	r2, r0
 8004658:	6809      	ldr	r1, [r1, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	4996      	ldr	r1, [pc, #600]	@ (80048b8 <SysTick_Handler+0x904>)
 800465e:	600a      	str	r2, [r1, #0]
				
				if(ADC_Ready&&(!Calibration_Flag)){
 8004660:	4a96      	ldr	r2, [pc, #600]	@ (80048bc <SysTick_Handler+0x908>)
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	2a00      	cmp	r2, #0
 8004666:	d00f      	beq.n	8004688 <SysTick_Handler+0x6d4>
 8004668:	4995      	ldr	r1, [pc, #596]	@ (80048c0 <SysTick_Handler+0x90c>)
 800466a:	680a      	ldr	r2, [r1, #0]
 800466c:	2a00      	cmp	r2, #0
 800466e:	d10b      	bne.n	8004688 <SysTick_Handler+0x6d4>
					if(ADC_Cal_Time<TheOneHour) LL_ADC_REG_StartConversion(ADC1);
 8004670:	4894      	ldr	r0, [pc, #592]	@ (80048c4 <SysTick_Handler+0x910>)
 8004672:	9d03      	ldr	r5, [sp, #12]
 8004674:	4285      	cmp	r5, r0
 8004676:	dd00      	ble.n	800467a <SysTick_Handler+0x6c6>
 8004678:	e104      	b.n	8004884 <SysTick_Handler+0x8d0>
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS,ADC_CR_ADSTART);
 800467a:	4893      	ldr	r0, [pc, #588]	@ (80048c8 <SysTick_Handler+0x914>)
 800467c:	4a93      	ldr	r2, [pc, #588]	@ (80048cc <SysTick_Handler+0x918>)
 800467e:	6881      	ldr	r1, [r0, #8]
 8004680:	4011      	ands	r1, r2
 8004682:	2204      	movs	r2, #4
 8004684:	430a      	orrs	r2, r1
 8004686:	6082      	str	r2, [r0, #8]
						Calibration_Flag=1;
						ADC_Cal_Time=0;
					}
				}
			}
		if(System_Ready){
 8004688:	4a91      	ldr	r2, [pc, #580]	@ (80048d0 <SysTick_Handler+0x91c>)
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	2a00      	cmp	r2, #0
 800468e:	d06c      	beq.n	800476a <SysTick_Handler+0x7b6>
					if(W1209PY.Function<2){
 8004690:	4990      	ldr	r1, [pc, #576]	@ (80048d4 <SysTick_Handler+0x920>)
 8004692:	4c91      	ldr	r4, [pc, #580]	@ (80048d8 <SysTick_Handler+0x924>)
 8004694:	680a      	ldr	r2, [r1, #0]
 8004696:	4891      	ldr	r0, [pc, #580]	@ (80048dc <SysTick_Handler+0x928>)
 8004698:	0792      	lsls	r2, r2, #30
 800469a:	4d91      	ldr	r5, [pc, #580]	@ (80048e0 <SysTick_Handler+0x92c>)
 800469c:	4f91      	ldr	r7, [pc, #580]	@ (80048e4 <SysTick_Handler+0x930>)
 800469e:	0f92      	lsrs	r2, r2, #30
 80046a0:	2a01      	cmp	r2, #1
 80046a2:	d900      	bls.n	80046a6 <SysTick_Handler+0x6f2>
 80046a4:	e124      	b.n	80048f0 <SysTick_Handler+0x93c>
						if((((NTC.Temp<Turn_On_Temp)^((W1209PY.Function==1)))||(NTC.Temp==Turn_On_Temp))&&((Active==0)||(Active==-1)))
 80046a6:	6bae      	ldr	r6, [r5, #56]	@ 0x38
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	4694      	mov	ip, r2
 80046ac:	680a      	ldr	r2, [r1, #0]
 80046ae:	4566      	cmp	r6, ip
 80046b0:	41b6      	sbcs	r6, r6
 80046b2:	0792      	lsls	r2, r2, #30
 80046b4:	0f92      	lsrs	r2, r2, #30
 80046b6:	3a01      	subs	r2, #1
 80046b8:	4251      	negs	r1, r2
 80046ba:	414a      	adcs	r2, r1
 80046bc:	4276      	negs	r6, r6
 80046be:	4296      	cmp	r6, r2
 80046c0:	d103      	bne.n	80046ca <SysTick_Handler+0x716>
 80046c2:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	4291      	cmp	r1, r2
 80046c8:	d10f      	bne.n	80046ea <SysTick_Handler+0x736>
 80046ca:	4987      	ldr	r1, [pc, #540]	@ (80048e8 <SysTick_Handler+0x934>)
 80046cc:	680a      	ldr	r2, [r1, #0]
 80046ce:	3201      	adds	r2, #1
 80046d0:	2a01      	cmp	r2, #1
 80046d2:	d80a      	bhi.n	80046ea <SysTick_Handler+0x736>
								{
									Active=1; 
 80046d4:	2201      	movs	r2, #1
 80046d6:	600a      	str	r2, [r1, #0]
									Action_Timer_On=W1209PY.Delay_Ton?0:Action_Delay_On; 
 80046d8:	4a7e      	ldr	r2, [pc, #504]	@ (80048d4 <SysTick_Handler+0x920>)
 80046da:	6811      	ldr	r1, [r2, #0]
 80046dc:	2200      	movs	r2, #0
 80046de:	05c9      	lsls	r1, r1, #23
 80046e0:	d401      	bmi.n	80046e6 <SysTick_Handler+0x732>
 80046e2:	9a02      	ldr	r2, [sp, #8]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	9901      	ldr	r1, [sp, #4]
 80046e8:	600a      	str	r2, [r1, #0]
								}
						if((((NTC.Temp>Turn_Off_Temp)^((W1209PY.Function==1)))||(NTC.Temp==Turn_Off_Temp))&&((Active==1)||(Active==-1)))
 80046ea:	4f7d      	ldr	r7, [pc, #500]	@ (80048e0 <SysTick_Handler+0x92c>)
 80046ec:	4e7f      	ldr	r6, [pc, #508]	@ (80048ec <SysTick_Handler+0x938>)
 80046ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046f0:	4d78      	ldr	r5, [pc, #480]	@ (80048d4 <SysTick_Handler+0x920>)
 80046f2:	4694      	mov	ip, r2
 80046f4:	6832      	ldr	r2, [r6, #0]
 80046f6:	9203      	str	r2, [sp, #12]
 80046f8:	682a      	ldr	r2, [r5, #0]
 80046fa:	0792      	lsls	r2, r2, #30
 80046fc:	0f92      	lsrs	r2, r2, #30
 80046fe:	3a01      	subs	r2, #1
 8004700:	0011      	movs	r1, r2
 8004702:	424a      	negs	r2, r1
 8004704:	414a      	adcs	r2, r1
 8004706:	9903      	ldr	r1, [sp, #12]
 8004708:	4561      	cmp	r1, ip
 800470a:	4189      	sbcs	r1, r1
 800470c:	4249      	negs	r1, r1
 800470e:	4291      	cmp	r1, r2
 8004710:	d103      	bne.n	800471a <SysTick_Handler+0x766>
 8004712:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004714:	6832      	ldr	r2, [r6, #0]
 8004716:	4291      	cmp	r1, r2
 8004718:	d10b      	bne.n	8004732 <SysTick_Handler+0x77e>
 800471a:	2602      	movs	r6, #2
 800471c:	4972      	ldr	r1, [pc, #456]	@ (80048e8 <SysTick_Handler+0x934>)
 800471e:	680a      	ldr	r2, [r1, #0]
 8004720:	3201      	adds	r2, #1
 8004722:	43b2      	bics	r2, r6
 8004724:	d105      	bne.n	8004732 <SysTick_Handler+0x77e>
								{  
									Active=0;
 8004726:	600a      	str	r2, [r1, #0]
									Action_Timer_Off=W1209PY.Delay_Toff?0:Action_Delay_Off;
 8004728:	6829      	ldr	r1, [r5, #0]
									Action_Timer_On=W1209PY.Delay_Ton?0:Action_Delay_On; 
								}
						if(((((NTC.Temp>Turn_On_Temp)&&(NTC.Temp>Turn_Off_Temp))||((NTC.Temp<Turn_On_Temp)&&(NTC.Temp<Turn_Off_Temp)))^(W1209PY.Function==3))&&((Active==1)||(Active==-1)))
								{  
									Active=0;
									Action_Timer_Off=W1209PY.Delay_Toff?0:Action_Delay_Off;
 800472a:	0589      	lsls	r1, r1, #22
 800472c:	d400      	bmi.n	8004730 <SysTick_Handler+0x77c>
 800472e:	6802      	ldr	r2, [r0, #0]
 8004730:	6022      	str	r2, [r4, #0]
								}
					}
					if(Action_Timer_On>=Action_Delay_On) 	if((Active==1)&&(!LL_GPIO_IsOutputPinSet(GPIOB, Relay_Out))) LL_GPIO_SetOutputPin(GPIOB, Relay_Out);
 8004732:	9a01      	ldr	r2, [sp, #4]
 8004734:	6811      	ldr	r1, [r2, #0]
 8004736:	9a02      	ldr	r2, [sp, #8]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	4291      	cmp	r1, r2
 800473c:	db08      	blt.n	8004750 <SysTick_Handler+0x79c>
 800473e:	4a6a      	ldr	r2, [pc, #424]	@ (80048e8 <SysTick_Handler+0x934>)
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	2a01      	cmp	r2, #1
 8004744:	d104      	bne.n	8004750 <SysTick_Handler+0x79c>
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 8004746:	6959      	ldr	r1, [r3, #20]
 8004748:	323f      	adds	r2, #63	@ 0x3f
 800474a:	4211      	tst	r1, r2
 800474c:	d100      	bne.n	8004750 <SysTick_Handler+0x79c>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800474e:	619a      	str	r2, [r3, #24]
					if(Action_Timer_Off>=Action_Delay_Off)	if((Active==0)&&(LL_GPIO_IsOutputPinSet(GPIOB, Relay_Out))) LL_GPIO_ResetOutputPin(GPIOB, Relay_Out);
 8004750:	6821      	ldr	r1, [r4, #0]
 8004752:	6802      	ldr	r2, [r0, #0]
 8004754:	4291      	cmp	r1, r2
 8004756:	db08      	blt.n	800476a <SysTick_Handler+0x7b6>
 8004758:	4a63      	ldr	r2, [pc, #396]	@ (80048e8 <SysTick_Handler+0x934>)
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	2a00      	cmp	r2, #0
 800475e:	d104      	bne.n	800476a <SysTick_Handler+0x7b6>
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 8004760:	6959      	ldr	r1, [r3, #20]
 8004762:	3240      	adds	r2, #64	@ 0x40
 8004764:	4211      	tst	r1, r2
 8004766:	d000      	beq.n	800476a <SysTick_Handler+0x7b6>
  WRITE_REG(GPIOx->BRR, PinMask);
 8004768:	629a      	str	r2, [r3, #40]	@ 0x28
													
		}
	}
}
 800476a:	b005      	add	sp, #20
 800476c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if(Disp_Chars[2]&_F){
 800476e:	4947      	ldr	r1, [pc, #284]	@ (800488c <SysTick_Handler+0x8d8>)
 8004770:	7889      	ldrb	r1, [r1, #2]
 8004772:	0789      	lsls	r1, r1, #30
 8004774:	d400      	bmi.n	8004778 <SysTick_Handler+0x7c4>
 8004776:	e707      	b.n	8004588 <SysTick_Handler+0x5d4>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004778:	2180      	movs	r1, #128	@ 0x80
 800477a:	25a0      	movs	r5, #160	@ 0xa0
 800477c:	0249      	lsls	r1, r1, #9
 800477e:	6199      	str	r1, [r3, #24]
 8004780:	2101      	movs	r1, #1
 8004782:	05ed      	lsls	r5, r5, #23
 8004784:	61a9      	str	r1, [r5, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004786:	2603      	movs	r6, #3
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	43b0      	bics	r0, r6
 800478c:	4308      	orrs	r0, r1
 800478e:	6018      	str	r0, [r3, #0]
 8004790:	6828      	ldr	r0, [r5, #0]
 8004792:	43b0      	bics	r0, r6
 8004794:	4301      	orrs	r1, r0
 8004796:	6029      	str	r1, [r5, #0]
}
 8004798:	e6f6      	b.n	8004588 <SysTick_Handler+0x5d4>
				if(Disp_Chars[2]&_A){
 800479a:	493c      	ldr	r1, [pc, #240]	@ (800488c <SysTick_Handler+0x8d8>)
 800479c:	7889      	ldrb	r1, [r1, #2]
 800479e:	0649      	lsls	r1, r1, #25
 80047a0:	d400      	bmi.n	80047a4 <SysTick_Handler+0x7f0>
 80047a2:	e6f1      	b.n	8004588 <SysTick_Handler+0x5d4>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80047a4:	2104      	movs	r1, #4
 80047a6:	2080      	movs	r0, #128	@ 0x80
 80047a8:	6199      	str	r1, [r3, #24]
 80047aa:	21a0      	movs	r1, #160	@ 0xa0
 80047ac:	0240      	lsls	r0, r0, #9
 80047ae:	05c9      	lsls	r1, r1, #23
 80047b0:	6188      	str	r0, [r1, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80047b2:	2030      	movs	r0, #48	@ 0x30
 80047b4:	681d      	ldr	r5, [r3, #0]
 80047b6:	4385      	bics	r5, r0
 80047b8:	3820      	subs	r0, #32
 80047ba:	4328      	orrs	r0, r5
 80047bc:	6018      	str	r0, [r3, #0]
 80047be:	2003      	movs	r0, #3
 80047c0:	680d      	ldr	r5, [r1, #0]
 80047c2:	4385      	bics	r5, r0
 80047c4:	3802      	subs	r0, #2
 80047c6:	4328      	orrs	r0, r5
 80047c8:	6008      	str	r0, [r1, #0]
}
 80047ca:	e6dd      	b.n	8004588 <SysTick_Handler+0x5d4>
				if(Disp_Chars[2]&_B){
 80047cc:	492f      	ldr	r1, [pc, #188]	@ (800488c <SysTick_Handler+0x8d8>)
 80047ce:	7889      	ldrb	r1, [r1, #2]
 80047d0:	0689      	lsls	r1, r1, #26
 80047d2:	d400      	bmi.n	80047d6 <SysTick_Handler+0x822>
 80047d4:	e6d8      	b.n	8004588 <SysTick_Handler+0x5d4>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80047d6:	2110      	movs	r1, #16
 80047d8:	2080      	movs	r0, #128	@ 0x80
 80047da:	6199      	str	r1, [r3, #24]
 80047dc:	21a0      	movs	r1, #160	@ 0xa0
 80047de:	0240      	lsls	r0, r0, #9
 80047e0:	05c9      	lsls	r1, r1, #23
 80047e2:	6188      	str	r0, [r1, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80047e4:	2080      	movs	r0, #128	@ 0x80
 80047e6:	681d      	ldr	r5, [r3, #0]
 80047e8:	0040      	lsls	r0, r0, #1
 80047ea:	4015      	ands	r5, r2
 80047ec:	e7e5      	b.n	80047ba <SysTick_Handler+0x806>
				if(Disp_Chars[2]&_E){
 80047ee:	4927      	ldr	r1, [pc, #156]	@ (800488c <SysTick_Handler+0x8d8>)
 80047f0:	7888      	ldrb	r0, [r1, #2]
 80047f2:	2104      	movs	r1, #4
 80047f4:	4208      	tst	r0, r1
 80047f6:	d100      	bne.n	80047fa <SysTick_Handler+0x846>
 80047f8:	e6c6      	b.n	8004588 <SysTick_Handler+0x5d4>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80047fa:	2002      	movs	r0, #2
 80047fc:	2580      	movs	r5, #128	@ 0x80
 80047fe:	6198      	str	r0, [r3, #24]
 8004800:	20a0      	movs	r0, #160	@ 0xa0
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004802:	260c      	movs	r6, #12
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004804:	05c0      	lsls	r0, r0, #23
 8004806:	026d      	lsls	r5, r5, #9
 8004808:	6185      	str	r5, [r0, #24]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800480a:	681d      	ldr	r5, [r3, #0]
 800480c:	43b5      	bics	r5, r6
 800480e:	4329      	orrs	r1, r5
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	2103      	movs	r1, #3
 8004814:	6805      	ldr	r5, [r0, #0]
 8004816:	438d      	bics	r5, r1
 8004818:	3902      	subs	r1, #2
 800481a:	e682      	b.n	8004522 <SysTick_Handler+0x56e>
				if(Disp_Chars[2]&_C){
 800481c:	491b      	ldr	r1, [pc, #108]	@ (800488c <SysTick_Handler+0x8d8>)
 800481e:	7889      	ldrb	r1, [r1, #2]
 8004820:	06c9      	lsls	r1, r1, #27
 8004822:	d400      	bmi.n	8004826 <SysTick_Handler+0x872>
 8004824:	e6b0      	b.n	8004588 <SysTick_Handler+0x5d4>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004826:	25a0      	movs	r5, #160	@ 0xa0
 8004828:	2080      	movs	r0, #128	@ 0x80
 800482a:	2101      	movs	r1, #1
 800482c:	05ed      	lsls	r5, r5, #23
 800482e:	0240      	lsls	r0, r0, #9
 8004830:	6199      	str	r1, [r3, #24]
 8004832:	61a8      	str	r0, [r5, #24]
 8004834:	e7a7      	b.n	8004786 <SysTick_Handler+0x7d2>
						if((Cnt_BPlus>=1)&&(Cnt_BPlus<0x3F)) Pressed_BPlus=1; else Pressed_BPlus=0;
 8004836:	6810      	ldr	r0, [r2, #0]
 8004838:	2800      	cmp	r0, #0
 800483a:	d007      	beq.n	800484c <SysTick_Handler+0x898>
 800483c:	6810      	ldr	r0, [r2, #0]
 800483e:	283e      	cmp	r0, #62	@ 0x3e
 8004840:	d804      	bhi.n	800484c <SysTick_Handler+0x898>
 8004842:	2001      	movs	r0, #1
 8004844:	6008      	str	r0, [r1, #0]
						Cnt_BPlus=0;
 8004846:	2000      	movs	r0, #0
 8004848:	6010      	str	r0, [r2, #0]
 800484a:	e6d0      	b.n	80045ee <SysTick_Handler+0x63a>
						if((Cnt_BPlus>=1)&&(Cnt_BPlus<0x3F)) Pressed_BPlus=1; else Pressed_BPlus=0;
 800484c:	2000      	movs	r0, #0
 800484e:	e7f9      	b.n	8004844 <SysTick_Handler+0x890>
					   if((Cnt_BMinus>=1)&&(Cnt_BMinus<0x3F)) Pressed_BMinus=1; else Pressed_BMinus=0;
 8004850:	6815      	ldr	r5, [r2, #0]
 8004852:	2d00      	cmp	r5, #0
 8004854:	d007      	beq.n	8004866 <SysTick_Handler+0x8b2>
 8004856:	6815      	ldr	r5, [r2, #0]
 8004858:	2d3e      	cmp	r5, #62	@ 0x3e
 800485a:	d804      	bhi.n	8004866 <SysTick_Handler+0x8b2>
 800485c:	2501      	movs	r5, #1
 800485e:	6005      	str	r5, [r0, #0]
					   Cnt_BMinus=0;
 8004860:	2500      	movs	r5, #0
 8004862:	6015      	str	r5, [r2, #0]
 8004864:	e6dc      	b.n	8004620 <SysTick_Handler+0x66c>
					   if((Cnt_BMinus>=1)&&(Cnt_BMinus<0x3F)) Pressed_BMinus=1; else Pressed_BMinus=0;
 8004866:	2500      	movs	r5, #0
 8004868:	e7f9      	b.n	800485e <SysTick_Handler+0x8aa>
					   if((Cnt_BSet>=1)&&(Cnt_BSet<0x3F)) Pressed_BSet=1; else Pressed_BSet=0;
 800486a:	6817      	ldr	r7, [r2, #0]
 800486c:	4e11      	ldr	r6, [pc, #68]	@ (80048b4 <SysTick_Handler+0x900>)
 800486e:	2f00      	cmp	r7, #0
 8004870:	d006      	beq.n	8004880 <SysTick_Handler+0x8cc>
 8004872:	6817      	ldr	r7, [r2, #0]
 8004874:	2f3e      	cmp	r7, #62	@ 0x3e
 8004876:	d803      	bhi.n	8004880 <SysTick_Handler+0x8cc>
 8004878:	6035      	str	r5, [r6, #0]
					   Cnt_BSet=0;
 800487a:	2500      	movs	r5, #0
 800487c:	6015      	str	r5, [r2, #0]
 800487e:	e6e7      	b.n	8004650 <SysTick_Handler+0x69c>
					   if((Cnt_BSet>=1)&&(Cnt_BSet<0x3F)) Pressed_BSet=1; else Pressed_BSet=0;
 8004880:	2500      	movs	r5, #0
 8004882:	e7f9      	b.n	8004878 <SysTick_Handler+0x8c4>
						Calibration_Flag=1;
 8004884:	2001      	movs	r0, #1
						ADC_Cal_Time=0;
 8004886:	6022      	str	r2, [r4, #0]
						Calibration_Flag=1;
 8004888:	6008      	str	r0, [r1, #0]
						ADC_Cal_Time=0;
 800488a:	e6fd      	b.n	8004688 <SysTick_Handler+0x6d4>
 800488c:	20000468 	.word	0x20000468
 8004890:	00010004 	.word	0x00010004
 8004894:	200004bc 	.word	0x200004bc
 8004898:	20000450 	.word	0x20000450
 800489c:	2000045c 	.word	0x2000045c
 80048a0:	200004b0 	.word	0x200004b0
 80048a4:	20000454 	.word	0x20000454
 80048a8:	20000460 	.word	0x20000460
 80048ac:	50000800 	.word	0x50000800
 80048b0:	20000458 	.word	0x20000458
 80048b4:	20000464 	.word	0x20000464
 80048b8:	2000044c 	.word	0x2000044c
 80048bc:	20000490 	.word	0x20000490
 80048c0:	20000428 	.word	0x20000428
 80048c4:	006ddcff 	.word	0x006ddcff
 80048c8:	40012400 	.word	0x40012400
 80048cc:	7fffffe8 	.word	0x7fffffe8
 80048d0:	2000048c 	.word	0x2000048c
 80048d4:	200003b0 	.word	0x200003b0
 80048d8:	200004c8 	.word	0x200004c8
 80048dc:	200004c4 	.word	0x200004c4
 80048e0:	200003e8 	.word	0x200003e8
 80048e4:	20000470 	.word	0x20000470
 80048e8:	20000388 	.word	0x20000388
 80048ec:	2000046c 	.word	0x2000046c
						if(((((NTC.Temp>Turn_On_Temp)&&(NTC.Temp>Turn_Off_Temp))||((NTC.Temp<Turn_On_Temp)&&(NTC.Temp<Turn_Off_Temp)))^(W1209PY.Function!=3))&&((Active==0)||(Active==-1)))
 80048f0:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 80048f2:	683e      	ldr	r6, [r7, #0]
 80048f4:	42b2      	cmp	r2, r6
 80048f6:	d905      	bls.n	8004904 <SysTick_Handler+0x950>
 80048f8:	4a29      	ldr	r2, [pc, #164]	@ (80049a0 <SysTick_Handler+0x9ec>)
 80048fa:	6baf      	ldr	r7, [r5, #56]	@ 0x38
 80048fc:	6816      	ldr	r6, [r2, #0]
 80048fe:	2201      	movs	r2, #1
 8004900:	42b7      	cmp	r7, r6
 8004902:	d80b      	bhi.n	800491c <SysTick_Handler+0x968>
 8004904:	4a27      	ldr	r2, [pc, #156]	@ (80049a4 <SysTick_Handler+0x9f0>)
 8004906:	6baf      	ldr	r7, [r5, #56]	@ 0x38
 8004908:	6816      	ldr	r6, [r2, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	42b7      	cmp	r7, r6
 800490e:	d205      	bcs.n	800491c <SysTick_Handler+0x968>
 8004910:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8004912:	4d23      	ldr	r5, [pc, #140]	@ (80049a0 <SysTick_Handler+0x9ec>)
 8004914:	682d      	ldr	r5, [r5, #0]
 8004916:	42aa      	cmp	r2, r5
 8004918:	4192      	sbcs	r2, r2
 800491a:	4252      	negs	r2, r2
 800491c:	680d      	ldr	r5, [r1, #0]
 800491e:	07ad      	lsls	r5, r5, #30
 8004920:	0fad      	lsrs	r5, r5, #30
 8004922:	3d03      	subs	r5, #3
 8004924:	1e6e      	subs	r6, r5, #1
 8004926:	41b5      	sbcs	r5, r6
 8004928:	42aa      	cmp	r2, r5
 800492a:	d00e      	beq.n	800494a <SysTick_Handler+0x996>
 800492c:	4d1e      	ldr	r5, [pc, #120]	@ (80049a8 <SysTick_Handler+0x9f4>)
 800492e:	682a      	ldr	r2, [r5, #0]
 8004930:	3201      	adds	r2, #1
 8004932:	2a01      	cmp	r2, #1
 8004934:	d809      	bhi.n	800494a <SysTick_Handler+0x996>
									Active=1; 
 8004936:	2201      	movs	r2, #1
 8004938:	602a      	str	r2, [r5, #0]
									Action_Timer_On=W1209PY.Delay_Ton?0:Action_Delay_On; 
 800493a:	680d      	ldr	r5, [r1, #0]
 800493c:	2200      	movs	r2, #0
 800493e:	05ed      	lsls	r5, r5, #23
 8004940:	d401      	bmi.n	8004946 <SysTick_Handler+0x992>
 8004942:	9a02      	ldr	r2, [sp, #8]
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	9d01      	ldr	r5, [sp, #4]
 8004948:	602a      	str	r2, [r5, #0]
						if(((((NTC.Temp>Turn_On_Temp)&&(NTC.Temp>Turn_Off_Temp))||((NTC.Temp<Turn_On_Temp)&&(NTC.Temp<Turn_Off_Temp)))^(W1209PY.Function==3))&&((Active==1)||(Active==-1)))
 800494a:	4d18      	ldr	r5, [pc, #96]	@ (80049ac <SysTick_Handler+0x9f8>)
 800494c:	4e15      	ldr	r6, [pc, #84]	@ (80049a4 <SysTick_Handler+0x9f0>)
 800494e:	6baf      	ldr	r7, [r5, #56]	@ 0x38
 8004950:	6832      	ldr	r2, [r6, #0]
 8004952:	4297      	cmp	r7, r2
 8004954:	d906      	bls.n	8004964 <SysTick_Handler+0x9b0>
 8004956:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8004958:	4694      	mov	ip, r2
 800495a:	4a11      	ldr	r2, [pc, #68]	@ (80049a0 <SysTick_Handler+0x9ec>)
 800495c:	6817      	ldr	r7, [r2, #0]
 800495e:	2201      	movs	r2, #1
 8004960:	45bc      	cmp	ip, r7
 8004962:	d80a      	bhi.n	800497a <SysTick_Handler+0x9c6>
 8004964:	6baf      	ldr	r7, [r5, #56]	@ 0x38
 8004966:	6836      	ldr	r6, [r6, #0]
 8004968:	2200      	movs	r2, #0
 800496a:	42b7      	cmp	r7, r6
 800496c:	d205      	bcs.n	800497a <SysTick_Handler+0x9c6>
 800496e:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8004970:	4d0b      	ldr	r5, [pc, #44]	@ (80049a0 <SysTick_Handler+0x9ec>)
 8004972:	682d      	ldr	r5, [r5, #0]
 8004974:	42aa      	cmp	r2, r5
 8004976:	4192      	sbcs	r2, r2
 8004978:	4252      	negs	r2, r2
 800497a:	680d      	ldr	r5, [r1, #0]
 800497c:	07ad      	lsls	r5, r5, #30
 800497e:	0fad      	lsrs	r5, r5, #30
 8004980:	3d03      	subs	r5, #3
 8004982:	426e      	negs	r6, r5
 8004984:	4175      	adcs	r5, r6
 8004986:	4295      	cmp	r5, r2
 8004988:	d100      	bne.n	800498c <SysTick_Handler+0x9d8>
 800498a:	e6d2      	b.n	8004732 <SysTick_Handler+0x77e>
 800498c:	2602      	movs	r6, #2
 800498e:	4d06      	ldr	r5, [pc, #24]	@ (80049a8 <SysTick_Handler+0x9f4>)
 8004990:	682a      	ldr	r2, [r5, #0]
 8004992:	3201      	adds	r2, #1
 8004994:	43b2      	bics	r2, r6
 8004996:	d000      	beq.n	800499a <SysTick_Handler+0x9e6>
 8004998:	e6cb      	b.n	8004732 <SysTick_Handler+0x77e>
									Action_Timer_Off=W1209PY.Delay_Toff?0:Action_Delay_Off;
 800499a:	6809      	ldr	r1, [r1, #0]
									Active=0;
 800499c:	602a      	str	r2, [r5, #0]
									Action_Timer_Off=W1209PY.Delay_Toff?0:Action_Delay_Off;
 800499e:	e6c4      	b.n	800472a <SysTick_Handler+0x776>
 80049a0:	2000046c 	.word	0x2000046c
 80049a4:	20000470 	.word	0x20000470
 80049a8:	20000388 	.word	0x20000388
 80049ac:	200003e8 	.word	0x200003e8

080049b0 <Filter_Init>:

void Filter_Init(uint32_t Raw_Result, uint32_t Filter_Length){
	Filter_state=Raw_Result<<(Filter_Length);	
 80049b0:	4088      	lsls	r0, r1
 80049b2:	4b01      	ldr	r3, [pc, #4]	@ (80049b8 <Filter_Init+0x8>)
 80049b4:	6018      	str	r0, [r3, #0]
}
 80049b6:	4770      	bx	lr
 80049b8:	2000038c 	.word	0x2000038c

080049bc <Filter>:

uint32_t Filter(uint32_t Raw_Result, uint32_t Filter_Length){
	if(Filter_state==-1) Filter_Init(Raw_Result,Filter_Length+W1209PY.Bits_Extended);
 80049bc:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <Filter+0x5c>)
uint32_t Filter(uint32_t Raw_Result, uint32_t Filter_Length){
 80049be:	b570      	push	{r4, r5, r6, lr}
	if(Filter_state==-1) Filter_Init(Raw_Result,Filter_Length+W1209PY.Bits_Extended);
 80049c0:	6813      	ldr	r3, [r2, #0]
 80049c2:	4c16      	ldr	r4, [pc, #88]	@ (8004a1c <Filter+0x60>)
 80049c4:	3301      	adds	r3, #1
 80049c6:	d105      	bne.n	80049d4 <Filter+0x18>
	Filter_state=Raw_Result<<(Filter_Length);	
 80049c8:	0005      	movs	r5, r0
	if(Filter_state==-1) Filter_Init(Raw_Result,Filter_Length+W1209PY.Bits_Extended);
 80049ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80049cc:	0f5b      	lsrs	r3, r3, #29
 80049ce:	185b      	adds	r3, r3, r1
	Filter_state=Raw_Result<<(Filter_Length);	
 80049d0:	409d      	lsls	r5, r3
 80049d2:	6015      	str	r5, [r2, #0]
	W1209PY.Sensor_State=(Raw_Result>4047)?1:(Raw_Result<48)?2:0;
 80049d4:	25fd      	movs	r5, #253	@ 0xfd
 80049d6:	2301      	movs	r3, #1
 80049d8:	012d      	lsls	r5, r5, #4
 80049da:	42a8      	cmp	r0, r5
 80049dc:	d206      	bcs.n	80049ec <Filter+0x30>
 80049de:	252f      	movs	r5, #47	@ 0x2f
 80049e0:	2300      	movs	r3, #0
 80049e2:	4285      	cmp	r5, r0
 80049e4:	415b      	adcs	r3, r3
 80049e6:	3d2c      	subs	r5, #44	@ 0x2c
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	402b      	ands	r3, r5
 80049ec:	6825      	ldr	r5, [r4, #0]
 80049ee:	4e0c      	ldr	r6, [pc, #48]	@ (8004a20 <Filter+0x64>)
 80049f0:	02db      	lsls	r3, r3, #11
 80049f2:	4035      	ands	r5, r6
 80049f4:	432b      	orrs	r3, r5
 80049f6:	6023      	str	r3, [r4, #0]
	if(!W1209PY.Sensor_State) Filter_state+=(Raw_Result-(Filter_state>>(Filter_Length+W1209PY.Bits_Extended)));
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	04db      	lsls	r3, r3, #19
 80049fc:	0f9b      	lsrs	r3, r3, #30
 80049fe:	d107      	bne.n	8004a10 <Filter+0x54>
 8004a00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004a02:	6815      	ldr	r5, [r2, #0]
 8004a04:	0f5b      	lsrs	r3, r3, #29
 8004a06:	185b      	adds	r3, r3, r1
 8004a08:	1828      	adds	r0, r5, r0
 8004a0a:	411d      	asrs	r5, r3
 8004a0c:	1b40      	subs	r0, r0, r5
 8004a0e:	6010      	str	r0, [r2, #0]
	return (uint32_t)(Filter_state>>Filter_Length);
 8004a10:	6810      	ldr	r0, [r2, #0]
 8004a12:	4108      	asrs	r0, r1
}
 8004a14:	bd70      	pop	{r4, r5, r6, pc}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	2000038c 	.word	0x2000038c
 8004a1c:	200003b0 	.word	0x200003b0
 8004a20:	ffffe7ff 	.word	0xffffe7ff

08004a24 <ADC_COMP_IRQHandler>:
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8004a24:	2204      	movs	r2, #4
 8004a26:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <ADC_COMP_IRQHandler+0x2c>)

void ADC_COMP_IRQHandler(void){
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	6819      	ldr	r1, [r3, #0]
	
if(LL_ADC_IsActiveFlag_EOC(ADC1) != 0)
 8004a2c:	4211      	tst	r1, r2
 8004a2e:	d00d      	beq.n	8004a4c <ADC_COMP_IRQHandler+0x28>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004a30:	601a      	str	r2, [r3, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8004a32:	6c18      	ldr	r0, [r3, #64]	@ 0x40
  {
    LL_ADC_ClearFlag_EOC(ADC1);
    Analog_Read = Filter(LL_ADC_REG_ReadConversionData12(ADC1)+W1209PY.ADC_Offset, W1209PY.Filter_Depth);
 8004a34:	4b07      	ldr	r3, [pc, #28]	@ (8004a54 <ADC_COMP_IRQHandler+0x30>)
 8004a36:	b280      	uxth	r0, r0
 8004a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004a3c:	1880      	adds	r0, r0, r2
 8004a3e:	f7ff ffbd 	bl	80049bc <Filter>
	Analog_Flag = 1;
 8004a42:	2201      	movs	r2, #1
    Analog_Read = Filter(LL_ADC_REG_ReadConversionData12(ADC1)+W1209PY.ADC_Offset, W1209PY.Filter_Depth);
 8004a44:	4b04      	ldr	r3, [pc, #16]	@ (8004a58 <ADC_COMP_IRQHandler+0x34>)
 8004a46:	6018      	str	r0, [r3, #0]
	Analog_Flag = 1;
 8004a48:	4b04      	ldr	r3, [pc, #16]	@ (8004a5c <ADC_COMP_IRQHandler+0x38>)
 8004a4a:	601a      	str	r2, [r3, #0]
  }
	
}
 8004a4c:	bd10      	pop	{r4, pc}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	40012400 	.word	0x40012400
 8004a54:	200003b0 	.word	0x200003b0
 8004a58:	200000f0 	.word	0x200000f0
 8004a5c:	20000494 	.word	0x20000494

08004a60 <LL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access.
  * @retval ErrorStatus
  */
ErrorStatus LL_FLASH_Unlock(void)
{
  ErrorStatus status = SUCCESS;
 8004a60:	2000      	movs	r0, #0

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8004a62:	4b05      	ldr	r3, [pc, #20]	@ (8004a78 <LL_FLASH_Unlock+0x18>)
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	4282      	cmp	r2, r0
 8004a68:	da05      	bge.n	8004a76 <LL_FLASH_Unlock+0x16>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a6a:	4a04      	ldr	r2, [pc, #16]	@ (8004a7c <LL_FLASH_Unlock+0x1c>)
 8004a6c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a6e:	4a04      	ldr	r2, [pc, #16]	@ (8004a80 <LL_FLASH_Unlock+0x20>)
 8004a70:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8004a72:	6958      	ldr	r0, [r3, #20]
 8004a74:	0fc0      	lsrs	r0, r0, #31
      status = ERROR;
    }
  }

  return status;
}
 8004a76:	4770      	bx	lr
 8004a78:	40022000 	.word	0x40022000
 8004a7c:	45670123 	.word	0x45670123
 8004a80:	cdef89ab 	.word	0xcdef89ab

08004a84 <LL_FLASH_Lock>:
ErrorStatus LL_FLASH_Lock(void)
{
  ErrorStatus status = ERROR;

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004a84:	2280      	movs	r2, #128	@ 0x80
 8004a86:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <LL_FLASH_Lock+0x14>)
 8004a88:	0612      	lsls	r2, r2, #24
 8004a8a:	6959      	ldr	r1, [r3, #20]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8004a90:	6958      	ldr	r0, [r3, #20]
 8004a92:	43c0      	mvns	r0, r0
  {
    status = SUCCESS;
  }

  return status;
 8004a94:	0fc0      	lsrs	r0, r0, #31
}
 8004a96:	4770      	bx	lr
 8004a98:	40022000 	.word	0x40022000

08004a9c <LL_FLASH_OB_Unlock>:
  */
ErrorStatus LL_FLASH_OB_Unlock(void)
{
  ErrorStatus status = ERROR;

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 8004a9c:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <LL_FLASH_OB_Unlock+0x1c>)
  ErrorStatus status = ERROR;
 8004a9e:	2001      	movs	r0, #1
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	0052      	lsls	r2, r2, #1
 8004aa4:	d506      	bpl.n	8004ab4 <LL_FLASH_OB_Unlock+0x18>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8004aa6:	4a05      	ldr	r2, [pc, #20]	@ (8004abc <LL_FLASH_OB_Unlock+0x20>)
 8004aa8:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8004aaa:	4a05      	ldr	r2, [pc, #20]	@ (8004ac0 <LL_FLASH_OB_Unlock+0x24>)
 8004aac:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	0f9b      	lsrs	r3, r3, #30
 8004ab2:	4018      	ands	r0, r3
      status = SUCCESS;
    }
  }

  return status;
}
 8004ab4:	4770      	bx	lr
 8004ab6:	46c0      	nop			@ (mov r8, r8)
 8004ab8:	40022000 	.word	0x40022000
 8004abc:	08192a3b 	.word	0x08192a3b
 8004ac0:	4c5d6e7f 	.word	0x4c5d6e7f

08004ac4 <LL_FLASH_OB_Lock>:
ErrorStatus LL_FLASH_OB_Lock(void)
{
  ErrorStatus status = ERROR;

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8004ac4:	2280      	movs	r2, #128	@ 0x80
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
  {
    status = SUCCESS;
  }

  return status;
 8004ac6:	2001      	movs	r0, #1
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8004ac8:	4b04      	ldr	r3, [pc, #16]	@ (8004adc <LL_FLASH_OB_Lock+0x18>)
 8004aca:	05d2      	lsls	r2, r2, #23
 8004acc:	6959      	ldr	r1, [r3, #20]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	0f9b      	lsrs	r3, r3, #30
  return status;
 8004ad6:	4398      	bics	r0, r3
}
 8004ad8:	4770      	bx	lr
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	40022000 	.word	0x40022000

08004ae0 <LL_FLASH_OB_Launch>:
  * @retval ErrorStatus
  */
ErrorStatus LL_FLASH_OB_Launch(void)
{
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8004ae0:	2380      	movs	r3, #128	@ 0x80
 8004ae2:	4a03      	ldr	r2, [pc, #12]	@ (8004af0 <LL_FLASH_OB_Launch+0x10>)
 8004ae4:	051b      	lsls	r3, r3, #20
 8004ae6:	6951      	ldr	r1, [r2, #20]

  /* We should not reach here : Option byte launch generates Option byte reset
     so return error */
  return ERROR;
}
 8004ae8:	2001      	movs	r0, #1
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8004aea:	430b      	orrs	r3, r1
 8004aec:	6153      	str	r3, [r2, #20]
}
 8004aee:	4770      	bx	lr
 8004af0:	40022000 	.word	0x40022000

08004af4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval ErrorStatus ErrorStatus
  */
ErrorStatus FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004af4:	b570      	push	{r4, r5, r6, lr}
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  /* Wait if any operation is ongoing */
  while (__LL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 8004af6:	2580      	movs	r5, #128	@ 0x80
{
 8004af8:	0004      	movs	r4, r0
  while (__LL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 8004afa:	026d      	lsls	r5, r5, #9
 8004afc:	4b08      	ldr	r3, [pc, #32]	@ (8004b20 <FLASH_WaitForLastOperation+0x2c>)
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	0010      	movs	r0, r2
 8004b02:	4028      	ands	r0, r5
 8004b04:	422a      	tst	r2, r5
 8004b06:	d008      	beq.n	8004b1a <FLASH_WaitForLastOperation+0x26>
  {
    if (Timeout-- == 0)
 8004b08:	2c00      	cmp	r4, #0
 8004b0a:	d101      	bne.n	8004b10 <FLASH_WaitForLastOperation+0x1c>
    {
      return ERROR;
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	e006      	b.n	8004b1e <FLASH_WaitForLastOperation+0x2a>
    }
    LL_mDelay(1);
 8004b10:	2001      	movs	r0, #1
 8004b12:	f000 f8a7 	bl	8004c64 <LL_mDelay>
 8004b16:	3c01      	subs	r4, #1
 8004b18:	e7f0      	b.n	8004afc <FLASH_WaitForLastOperation+0x8>
  }

  /* Clear SR register */
  FLASH->SR = FLASH_FLAG_SR_CLEAR;
 8004b1a:	4a02      	ldr	r2, [pc, #8]	@ (8004b24 <FLASH_WaitForLastOperation+0x30>)
 8004b1c:	611a      	str	r2, [r3, #16]

  return SUCCESS;
}
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	40022000 	.word	0x40022000
 8004b24:	00008011 	.word	0x00008011

08004b28 <LL_FLASH_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval ErrorStatus status
  */
ErrorStatus LL_FLASH_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ErrorStatus status = ERROR;

  /* Process Locked */
  __LL_FLASH_LOCK(&pFlash);
 8004b2a:	4c48      	ldr	r4, [pc, #288]	@ (8004c4c <LL_FLASH_OBProgram+0x124>)
{
 8004b2c:	0001      	movs	r1, r0
  __LL_FLASH_LOCK(&pFlash);
 8004b2e:	7820      	ldrb	r0, [r4, #0]
 8004b30:	2801      	cmp	r0, #1
 8004b32:	d100      	bne.n	8004b36 <LL_FLASH_OBProgram+0xe>
 8004b34:	e088      	b.n	8004c48 <LL_FLASH_OBProgram+0x120>
 8004b36:	2301      	movs	r3, #1
 8004b38:	7023      	strb	r3, [r4, #0]
    
  /* Config flash timming */
  __LL_FLASH_TIMMING_SEQUENCE_CONFIG();
 8004b3a:	4b45      	ldr	r3, [pc, #276]	@ (8004c50 <LL_FLASH_OBProgram+0x128>)
 8004b3c:	4845      	ldr	r0, [pc, #276]	@ (8004c54 <LL_FLASH_OBProgram+0x12c>)
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	4b45      	ldr	r3, [pc, #276]	@ (8004c58 <LL_FLASH_OBProgram+0x130>)
 8004b42:	0412      	lsls	r2, r2, #16
 8004b44:	0f52      	lsrs	r2, r2, #29
 8004b46:	0092      	lsls	r2, r2, #2
 8004b48:	5812      	ldr	r2, [r2, r0]
 8004b4a:	685d      	ldr	r5, [r3, #4]
 8004b4c:	6810      	ldr	r0, [r2, #0]
 8004b4e:	05c6      	lsls	r6, r0, #23
 8004b50:	0df6      	lsrs	r6, r6, #23
 8004b52:	42b5      	cmp	r5, r6
 8004b54:	d12a      	bne.n	8004bac <LL_FLASH_OBProgram+0x84>
 8004b56:	689f      	ldr	r7, [r3, #8]
 8004b58:	0105      	lsls	r5, r0, #4
 8004b5a:	0dad      	lsrs	r5, r5, #22
 8004b5c:	42af      	cmp	r7, r5
 8004b5e:	d125      	bne.n	8004bac <LL_FLASH_OBProgram+0x84>
 8004b60:	695d      	ldr	r5, [r3, #20]
 8004b62:	0380      	lsls	r0, r0, #14
 8004b64:	0dc0      	lsrs	r0, r0, #23
 8004b66:	4285      	cmp	r5, r0
 8004b68:	d120      	bne.n	8004bac <LL_FLASH_OBProgram+0x84>
 8004b6a:	6850      	ldr	r0, [r2, #4]
 8004b6c:	68df      	ldr	r7, [r3, #12]
 8004b6e:	05c5      	lsls	r5, r0, #23
 8004b70:	0ded      	lsrs	r5, r5, #23
 8004b72:	42af      	cmp	r7, r5
 8004b74:	d11a      	bne.n	8004bac <LL_FLASH_OBProgram+0x84>
 8004b76:	691d      	ldr	r5, [r3, #16]
 8004b78:	0100      	lsls	r0, r0, #4
 8004b7a:	0d00      	lsrs	r0, r0, #20
 8004b7c:	4285      	cmp	r5, r0
 8004b7e:	d115      	bne.n	8004bac <LL_FLASH_OBProgram+0x84>
 8004b80:	6890      	ldr	r0, [r2, #8]
 8004b82:	699d      	ldr	r5, [r3, #24]
 8004b84:	0380      	lsls	r0, r0, #14
 8004b86:	0b80      	lsrs	r0, r0, #14
 8004b88:	4285      	cmp	r5, r0
 8004b8a:	d10f      	bne.n	8004bac <LL_FLASH_OBProgram+0x84>
 8004b8c:	68d0      	ldr	r0, [r2, #12]
 8004b8e:	69dd      	ldr	r5, [r3, #28]
 8004b90:	0380      	lsls	r0, r0, #14
 8004b92:	0b80      	lsrs	r0, r0, #14
 8004b94:	4285      	cmp	r5, r0
 8004b96:	d109      	bne.n	8004bac <LL_FLASH_OBProgram+0x84>
 8004b98:	6910      	ldr	r0, [r2, #16]
 8004b9a:	6a1f      	ldr	r7, [r3, #32]
 8004b9c:	b285      	uxth	r5, r0
 8004b9e:	42af      	cmp	r7, r5
 8004ba0:	d104      	bne.n	8004bac <LL_FLASH_OBProgram+0x84>
 8004ba2:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8004ba4:	0080      	lsls	r0, r0, #2
 8004ba6:	0c80      	lsrs	r0, r0, #18
 8004ba8:	4285      	cmp	r5, r0
 8004baa:	d01f      	beq.n	8004bec <LL_FLASH_OBProgram+0xc4>
 8004bac:	605e      	str	r6, [r3, #4]
 8004bae:	6810      	ldr	r0, [r2, #0]
 8004bb0:	0100      	lsls	r0, r0, #4
 8004bb2:	0d80      	lsrs	r0, r0, #22
 8004bb4:	6098      	str	r0, [r3, #8]
 8004bb6:	6810      	ldr	r0, [r2, #0]
 8004bb8:	0380      	lsls	r0, r0, #14
 8004bba:	0dc0      	lsrs	r0, r0, #23
 8004bbc:	6158      	str	r0, [r3, #20]
 8004bbe:	6850      	ldr	r0, [r2, #4]
 8004bc0:	05c0      	lsls	r0, r0, #23
 8004bc2:	0dc0      	lsrs	r0, r0, #23
 8004bc4:	60d8      	str	r0, [r3, #12]
 8004bc6:	6850      	ldr	r0, [r2, #4]
 8004bc8:	0100      	lsls	r0, r0, #4
 8004bca:	0d00      	lsrs	r0, r0, #20
 8004bcc:	6118      	str	r0, [r3, #16]
 8004bce:	6890      	ldr	r0, [r2, #8]
 8004bd0:	0380      	lsls	r0, r0, #14
 8004bd2:	0b80      	lsrs	r0, r0, #14
 8004bd4:	6198      	str	r0, [r3, #24]
 8004bd6:	68d0      	ldr	r0, [r2, #12]
 8004bd8:	0380      	lsls	r0, r0, #14
 8004bda:	0b80      	lsrs	r0, r0, #14
 8004bdc:	61d8      	str	r0, [r3, #28]
 8004bde:	6910      	ldr	r0, [r2, #16]
 8004be0:	b280      	uxth	r0, r0
 8004be2:	6218      	str	r0, [r3, #32]
 8004be4:	6912      	ldr	r2, [r2, #16]
 8004be6:	0092      	lsls	r2, r2, #2
 8004be8:	0c92      	lsrs	r2, r2, #18
 8004bea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* WRP register */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0)
 8004bec:	6808      	ldr	r0, [r1, #0]
 8004bee:	4b1b      	ldr	r3, [pc, #108]	@ (8004c5c <LL_FLASH_OBProgram+0x134>)
 8004bf0:	07c2      	lsls	r2, r0, #31
 8004bf2:	d503      	bpl.n	8004bfc <LL_FLASH_OBProgram+0xd4>
  {
    /* Write protection configuration */
    FLASH->WRPR = (uint16_t)(~(pOBInit->WRPSector));
 8004bf4:	684a      	ldr	r2, [r1, #4]
 8004bf6:	43d2      	mvns	r2, r2
 8004bf8:	b292      	uxth	r2, r2
 8004bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* SDK register */
  if ((pOBInit->OptionType & OPTIONBYTE_SDK) != 0)
 8004bfc:	0782      	lsls	r2, r0, #30
 8004bfe:	d504      	bpl.n	8004c0a <LL_FLASH_OBProgram+0xe2>
  {
    /* SDK protection configuration */
    FLASH->SDKR = (pOBInit->SDKStartAddr) | (pOBInit->SDKEndAddr<<8);
 8004c00:	68ca      	ldr	r2, [r1, #12]
 8004c02:	688d      	ldr	r5, [r1, #8]
 8004c04:	0212      	lsls	r2, r2, #8
 8004c06:	432a      	orrs	r2, r5
 8004c08:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  
  if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0x00U)
 8004c0a:	0700      	lsls	r0, r0, #28
 8004c0c:	d509      	bpl.n	8004c22 <LL_FLASH_OBProgram+0xfa>
  optr &= ~(UserType | 0xff);
 8004c0e:	20ff      	movs	r0, #255	@ 0xff
 8004c10:	690d      	ldr	r5, [r1, #16]
  optr = FLASH->OPTR;
 8004c12:	6a1a      	ldr	r2, [r3, #32]
  FLASH->OPTR = (optr | UserConfig | 0xAA);
 8004c14:	6949      	ldr	r1, [r1, #20]
  optr &= ~(UserType | 0xff);
 8004c16:	4328      	orrs	r0, r5
 8004c18:	4382      	bics	r2, r0
  FLASH->OPTR = (optr | UserConfig | 0xAA);
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	21aa      	movs	r1, #170	@ 0xaa
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	621a      	str	r2, [r3, #32]
  {
    /* nothing to do */
  }

  /* starts to modify Flash Option bytes */
  FLASH->CR|=FLASH_CR_OPTSTRT;
 8004c22:	2280      	movs	r2, #128	@ 0x80
 8004c24:	6959      	ldr	r1, [r3, #20]
 8004c26:	0292      	lsls	r2, r2, #10
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	615a      	str	r2, [r3, #20]

  /* set bit EOPIE */
  FLASH->CR|=FLASH_CR_EOPIE;
 8004c2c:	2280      	movs	r2, #128	@ 0x80
 8004c2e:	6959      	ldr	r1, [r3, #20]
 8004c30:	0452      	lsls	r2, r2, #17
 8004c32:	430a      	orrs	r2, r1
 8004c34:	615a      	str	r2, [r3, #20]

  /* trigger program */
  *((__IO uint32_t *)(0x40022080))=0xff;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c36:	20fa      	movs	r0, #250	@ 0xfa
  *((__IO uint32_t *)(0x40022080))=0xff;
 8004c38:	22ff      	movs	r2, #255	@ 0xff
 8004c3a:	4b09      	ldr	r3, [pc, #36]	@ (8004c60 <LL_FLASH_OBProgram+0x138>)
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c3c:	0080      	lsls	r0, r0, #2
  *((__IO uint32_t *)(0x40022080))=0xff;
 8004c3e:	601a      	str	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c40:	f7ff ff58 	bl	8004af4 <FLASH_WaitForLastOperation>

  /* Process Unlocked */
  __LL_FLASH_UNLOCK(&pFlash);
 8004c44:	2300      	movs	r3, #0
 8004c46:	7023      	strb	r3, [r4, #0]

  return status;
}
 8004c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	200004dc 	.word	0x200004dc
 8004c50:	40021000 	.word	0x40021000
 8004c54:	08005a38 	.word	0x08005a38
 8004c58:	400220fc 	.word	0x400220fc
 8004c5c:	40022000 	.word	0x40022000
 8004c60:	40022080 	.word	0x40022080

08004c64 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004c64:	4a09      	ldr	r2, [pc, #36]	@ (8004c8c <LL_mDelay+0x28>)
{
 8004c66:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	9301      	str	r3, [sp, #4]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004c6c:	9b01      	ldr	r3, [sp, #4]
  tmpDelay  = Delay;
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
  {
    tmpDelay ++;
 8004c6e:	1c43      	adds	r3, r0, #1
 8004c70:	1e59      	subs	r1, r3, #1
 8004c72:	418b      	sbcs	r3, r1
 8004c74:	18c0      	adds	r0, r0, r3
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004c76:	2380      	movs	r3, #128	@ 0x80
 8004c78:	025b      	lsls	r3, r3, #9
  while (tmpDelay  != 0U)
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d101      	bne.n	8004c82 <LL_mDelay+0x1e>
    {
      tmpDelay --;
    }
  }
}
 8004c7e:	b002      	add	sp, #8
 8004c80:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004c82:	6811      	ldr	r1, [r2, #0]
 8004c84:	4219      	tst	r1, r3
 8004c86:	d0fc      	beq.n	8004c82 <LL_mDelay+0x1e>
      tmpDelay --;
 8004c88:	3801      	subs	r0, #1
 8004c8a:	e7f6      	b.n	8004c7a <LL_mDelay+0x16>
 8004c8c:	e000e010 	.word	0xe000e010

08004c90 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004c90:	4b01      	ldr	r3, [pc, #4]	@ (8004c98 <LL_SetSystemCoreClock+0x8>)
 8004c92:	6018      	str	r0, [r3, #0]
}
 8004c94:	4770      	bx	lr
 8004c96:	46c0      	nop			@ (mov r8, r8)
 8004c98:	20000390 	.word	0x20000390

08004c9c <SystemInit>:
 * @return none
 */
void SystemInit(void)
{
  /*Set the HSI clock to 24MHz by default*/
  RCC->ICSCR = (RCC->ICSCR & 0xFFFF0000) | (*(uint32_t *)(0x1FFF0100));
 8004c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8004cdc <SystemInit+0x40>)
 8004c9e:	4910      	ldr	r1, [pc, #64]	@ (8004ce0 <SystemInit+0x44>)
 8004ca0:	6853      	ldr	r3, [r2, #4]
 8004ca2:	6809      	ldr	r1, [r1, #0]
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	041b      	lsls	r3, r3, #16
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6053      	str	r3, [r2, #4]

  /*Set the LSI clock to 32.768KHz by default*/
  RCC->ICSCR = (RCC->ICSCR & 0xFE00FFFF) | ((*(uint32_t *)(0x1FFF0144)) << RCC_ICSCR_LSI_TRIM_Pos);
 8004cac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <SystemInit+0x48>)
 8004cae:	6851      	ldr	r1, [r2, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	480d      	ldr	r0, [pc, #52]	@ (8004ce8 <SystemInit+0x4c>)
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	4001      	ands	r1, r0
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6053      	str	r3, [r2, #4]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004cbc:	2280      	movs	r2, #128	@ 0x80
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004cec <SystemInit+0x50>)
 8004cc0:	0512      	lsls	r2, r2, #20
 8004cc2:	609a      	str	r2, [r3, #8]
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void DelayTime(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (24000000U / 8U / 1000U);
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <SystemInit+0x54>)
{
 8004cc6:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (24000000U / 8U / 1000U);
 8004cc8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004cca:	46c0      	nop			@ (mov r8, r8)
  }
  while (Delay --);
 8004ccc:	9b01      	ldr	r3, [sp, #4]
 8004cce:	1e5a      	subs	r2, r3, #1
 8004cd0:	9201      	str	r2, [sp, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f9      	bne.n	8004cca <SystemInit+0x2e>
}
 8004cd6:	b002      	add	sp, #8
 8004cd8:	4770      	bx	lr
 8004cda:	46c0      	nop			@ (mov r8, r8)
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	1fff0100 	.word	0x1fff0100
 8004ce4:	1fff0144 	.word	0x1fff0144
 8004ce8:	fe00ffff 	.word	0xfe00ffff
 8004cec:	e000ed00 	.word	0xe000ed00
 8004cf0:	000493e0 	.word	0x000493e0

08004cf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004cf4:	480d      	ldr	r0, [pc, #52]	@ (8004d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004cf6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cf8:	480d      	ldr	r0, [pc, #52]	@ (8004d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8004cfa:	490e      	ldr	r1, [pc, #56]	@ (8004d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004cfc:	4a0e      	ldr	r2, [pc, #56]	@ (8004d38 <LoopForever+0xe>)
  movs r3, #0
 8004cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d00:	e002      	b.n	8004d08 <LoopCopyDataInit>

08004d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d06:	3304      	adds	r3, #4

08004d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d0c:	d3f9      	bcc.n	8004d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8004d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004d10:	4c0b      	ldr	r4, [pc, #44]	@ (8004d40 <LoopForever+0x16>)
  movs r3, #0
 8004d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d14:	e001      	b.n	8004d1a <LoopFillZerobss>

08004d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d18:	3204      	adds	r2, #4

08004d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d1c:	d3fb      	bcc.n	8004d16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004d1e:	f7ff ffbd 	bl	8004c9c <SystemInit>
/* Call static constructors. Remove this line if compile with `-nostartfiles` reports error */
  bl __libc_init_array
 8004d22:	f7fb fc01 	bl	8000528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d26:	f7fd f967 	bl	8001ff8 <main>

08004d2a <LoopForever>:

LoopForever:
    b LoopForever
 8004d2a:	e7fe      	b.n	8004d2a <LoopForever>
  ldr   r0, =_estack
 8004d2c:	20000c00 	.word	0x20000c00
  ldr r0, =_sdata
 8004d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d34:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 8004d38:	08005a68 	.word	0x08005a68
  ldr r2, =_sbss
 8004d3c:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 8004d40:	200004f4 	.word	0x200004f4

08004d44 <EXTI0_1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d44:	e7fe      	b.n	8004d44 <EXTI0_1_IRQHandler>
	...

08004d48 <__aeabi_lmul>:
 8004d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4a:	46ce      	mov	lr, r9
 8004d4c:	4699      	mov	r9, r3
 8004d4e:	0c03      	lsrs	r3, r0, #16
 8004d50:	469c      	mov	ip, r3
 8004d52:	0413      	lsls	r3, r2, #16
 8004d54:	4647      	mov	r7, r8
 8004d56:	0c1b      	lsrs	r3, r3, #16
 8004d58:	001d      	movs	r5, r3
 8004d5a:	000e      	movs	r6, r1
 8004d5c:	4661      	mov	r1, ip
 8004d5e:	0404      	lsls	r4, r0, #16
 8004d60:	0c24      	lsrs	r4, r4, #16
 8004d62:	b580      	push	{r7, lr}
 8004d64:	0007      	movs	r7, r0
 8004d66:	0c10      	lsrs	r0, r2, #16
 8004d68:	434b      	muls	r3, r1
 8004d6a:	4365      	muls	r5, r4
 8004d6c:	4341      	muls	r1, r0
 8004d6e:	4360      	muls	r0, r4
 8004d70:	0c2c      	lsrs	r4, r5, #16
 8004d72:	18c0      	adds	r0, r0, r3
 8004d74:	1824      	adds	r4, r4, r0
 8004d76:	468c      	mov	ip, r1
 8004d78:	42a3      	cmp	r3, r4
 8004d7a:	d903      	bls.n	8004d84 <__aeabi_lmul+0x3c>
 8004d7c:	2380      	movs	r3, #128	@ 0x80
 8004d7e:	025b      	lsls	r3, r3, #9
 8004d80:	4698      	mov	r8, r3
 8004d82:	44c4      	add	ip, r8
 8004d84:	4649      	mov	r1, r9
 8004d86:	4379      	muls	r1, r7
 8004d88:	4356      	muls	r6, r2
 8004d8a:	0c23      	lsrs	r3, r4, #16
 8004d8c:	042d      	lsls	r5, r5, #16
 8004d8e:	0c2d      	lsrs	r5, r5, #16
 8004d90:	1989      	adds	r1, r1, r6
 8004d92:	4463      	add	r3, ip
 8004d94:	0424      	lsls	r4, r4, #16
 8004d96:	1960      	adds	r0, r4, r5
 8004d98:	18c9      	adds	r1, r1, r3
 8004d9a:	bcc0      	pop	{r6, r7}
 8004d9c:	46b9      	mov	r9, r7
 8004d9e:	46b0      	mov	r8, r6
 8004da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da2:	46c0      	nop			@ (mov r8, r8)

08004da4 <__gnu_ldivmod_helper>:
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	46ce      	mov	lr, r9
 8004da8:	4647      	mov	r7, r8
 8004daa:	b580      	push	{r7, lr}
 8004dac:	4691      	mov	r9, r2
 8004dae:	4698      	mov	r8, r3
 8004db0:	0004      	movs	r4, r0
 8004db2:	000d      	movs	r5, r1
 8004db4:	f000 f814 	bl	8004de0 <__divdi3>
 8004db8:	0007      	movs	r7, r0
 8004dba:	000e      	movs	r6, r1
 8004dbc:	0002      	movs	r2, r0
 8004dbe:	000b      	movs	r3, r1
 8004dc0:	4648      	mov	r0, r9
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	f7ff ffc0 	bl	8004d48 <__aeabi_lmul>
 8004dc8:	1a24      	subs	r4, r4, r0
 8004dca:	418d      	sbcs	r5, r1
 8004dcc:	9b08      	ldr	r3, [sp, #32]
 8004dce:	0038      	movs	r0, r7
 8004dd0:	0031      	movs	r1, r6
 8004dd2:	601c      	str	r4, [r3, #0]
 8004dd4:	605d      	str	r5, [r3, #4]
 8004dd6:	bcc0      	pop	{r6, r7}
 8004dd8:	46b9      	mov	r9, r7
 8004dda:	46b0      	mov	r8, r6
 8004ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dde:	46c0      	nop			@ (mov r8, r8)

08004de0 <__divdi3>:
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de2:	46d6      	mov	lr, sl
 8004de4:	464f      	mov	r7, r9
 8004de6:	4646      	mov	r6, r8
 8004de8:	b5c0      	push	{r6, r7, lr}
 8004dea:	0004      	movs	r4, r0
 8004dec:	000d      	movs	r5, r1
 8004dee:	0010      	movs	r0, r2
 8004df0:	0019      	movs	r1, r3
 8004df2:	b082      	sub	sp, #8
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	da00      	bge.n	8004dfa <__divdi3+0x1a>
 8004df8:	e087      	b.n	8004f0a <__divdi3+0x12a>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db0b      	blt.n	8004e16 <__divdi3+0x36>
 8004dfe:	0016      	movs	r6, r2
 8004e00:	001f      	movs	r7, r3
 8004e02:	42ab      	cmp	r3, r5
 8004e04:	d919      	bls.n	8004e3a <__divdi3+0x5a>
 8004e06:	2000      	movs	r0, #0
 8004e08:	2100      	movs	r1, #0
 8004e0a:	b002      	add	sp, #8
 8004e0c:	bce0      	pop	{r5, r6, r7}
 8004e0e:	46ba      	mov	sl, r7
 8004e10:	46b1      	mov	r9, r6
 8004e12:	46a8      	mov	r8, r5
 8004e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e16:	2700      	movs	r7, #0
 8004e18:	4246      	negs	r6, r0
 8004e1a:	418f      	sbcs	r7, r1
 8004e1c:	42af      	cmp	r7, r5
 8004e1e:	d804      	bhi.n	8004e2a <__divdi3+0x4a>
 8004e20:	d000      	beq.n	8004e24 <__divdi3+0x44>
 8004e22:	e082      	b.n	8004f2a <__divdi3+0x14a>
 8004e24:	42a6      	cmp	r6, r4
 8004e26:	d800      	bhi.n	8004e2a <__divdi3+0x4a>
 8004e28:	e07f      	b.n	8004f2a <__divdi3+0x14a>
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	e08f      	b.n	8004f50 <__divdi3+0x170>
 8004e30:	2700      	movs	r7, #0
 8004e32:	4246      	negs	r6, r0
 8004e34:	418f      	sbcs	r7, r1
 8004e36:	429f      	cmp	r7, r3
 8004e38:	d8e5      	bhi.n	8004e06 <__divdi3+0x26>
 8004e3a:	42af      	cmp	r7, r5
 8004e3c:	d100      	bne.n	8004e40 <__divdi3+0x60>
 8004e3e:	e098      	b.n	8004f72 <__divdi3+0x192>
 8004e40:	2300      	movs	r3, #0
 8004e42:	4699      	mov	r9, r3
 8004e44:	0039      	movs	r1, r7
 8004e46:	0030      	movs	r0, r6
 8004e48:	f7fb fae8 	bl	800041c <__clzdi2>
 8004e4c:	4680      	mov	r8, r0
 8004e4e:	0029      	movs	r1, r5
 8004e50:	0020      	movs	r0, r4
 8004e52:	f7fb fae3 	bl	800041c <__clzdi2>
 8004e56:	4643      	mov	r3, r8
 8004e58:	1a1b      	subs	r3, r3, r0
 8004e5a:	4698      	mov	r8, r3
 8004e5c:	3b20      	subs	r3, #32
 8004e5e:	d500      	bpl.n	8004e62 <__divdi3+0x82>
 8004e60:	e07c      	b.n	8004f5c <__divdi3+0x17c>
 8004e62:	0031      	movs	r1, r6
 8004e64:	4099      	lsls	r1, r3
 8004e66:	469a      	mov	sl, r3
 8004e68:	000b      	movs	r3, r1
 8004e6a:	0031      	movs	r1, r6
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	4081      	lsls	r1, r0
 8004e70:	000a      	movs	r2, r1
 8004e72:	42ab      	cmp	r3, r5
 8004e74:	d85f      	bhi.n	8004f36 <__divdi3+0x156>
 8004e76:	d05c      	beq.n	8004f32 <__divdi3+0x152>
 8004e78:	4651      	mov	r1, sl
 8004e7a:	1aa4      	subs	r4, r4, r2
 8004e7c:	419d      	sbcs	r5, r3
 8004e7e:	2900      	cmp	r1, #0
 8004e80:	da00      	bge.n	8004e84 <__divdi3+0xa4>
 8004e82:	e093      	b.n	8004fac <__divdi3+0x1cc>
 8004e84:	2100      	movs	r1, #0
 8004e86:	2000      	movs	r0, #0
 8004e88:	2601      	movs	r6, #1
 8004e8a:	9000      	str	r0, [sp, #0]
 8004e8c:	9101      	str	r1, [sp, #4]
 8004e8e:	4651      	mov	r1, sl
 8004e90:	408e      	lsls	r6, r1
 8004e92:	9601      	str	r6, [sp, #4]
 8004e94:	4641      	mov	r1, r8
 8004e96:	2601      	movs	r6, #1
 8004e98:	408e      	lsls	r6, r1
 8004e9a:	4641      	mov	r1, r8
 8004e9c:	9600      	str	r6, [sp, #0]
 8004e9e:	2900      	cmp	r1, #0
 8004ea0:	d050      	beq.n	8004f44 <__divdi3+0x164>
 8004ea2:	07d9      	lsls	r1, r3, #31
 8004ea4:	0856      	lsrs	r6, r2, #1
 8004ea6:	430e      	orrs	r6, r1
 8004ea8:	085f      	lsrs	r7, r3, #1
 8004eaa:	4641      	mov	r1, r8
 8004eac:	2201      	movs	r2, #1
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e00c      	b.n	8004ecc <__divdi3+0xec>
 8004eb2:	42af      	cmp	r7, r5
 8004eb4:	d101      	bne.n	8004eba <__divdi3+0xda>
 8004eb6:	42a6      	cmp	r6, r4
 8004eb8:	d80a      	bhi.n	8004ed0 <__divdi3+0xf0>
 8004eba:	1ba4      	subs	r4, r4, r6
 8004ebc:	41bd      	sbcs	r5, r7
 8004ebe:	1924      	adds	r4, r4, r4
 8004ec0:	416d      	adcs	r5, r5
 8004ec2:	3901      	subs	r1, #1
 8004ec4:	18a4      	adds	r4, r4, r2
 8004ec6:	415d      	adcs	r5, r3
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	d006      	beq.n	8004eda <__divdi3+0xfa>
 8004ecc:	42af      	cmp	r7, r5
 8004ece:	d9f0      	bls.n	8004eb2 <__divdi3+0xd2>
 8004ed0:	3901      	subs	r1, #1
 8004ed2:	1924      	adds	r4, r4, r4
 8004ed4:	416d      	adcs	r5, r5
 8004ed6:	2900      	cmp	r1, #0
 8004ed8:	d1f8      	bne.n	8004ecc <__divdi3+0xec>
 8004eda:	9800      	ldr	r0, [sp, #0]
 8004edc:	9901      	ldr	r1, [sp, #4]
 8004ede:	4653      	mov	r3, sl
 8004ee0:	1900      	adds	r0, r0, r4
 8004ee2:	4169      	adcs	r1, r5
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	db48      	blt.n	8004f7a <__divdi3+0x19a>
 8004ee8:	002e      	movs	r6, r5
 8004eea:	002c      	movs	r4, r5
 8004eec:	40de      	lsrs	r6, r3
 8004eee:	4643      	mov	r3, r8
 8004ef0:	40dc      	lsrs	r4, r3
 8004ef2:	4653      	mov	r3, sl
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	db50      	blt.n	8004f9a <__divdi3+0x1ba>
 8004ef8:	0034      	movs	r4, r6
 8004efa:	409c      	lsls	r4, r3
 8004efc:	0023      	movs	r3, r4
 8004efe:	4644      	mov	r4, r8
 8004f00:	40a6      	lsls	r6, r4
 8004f02:	0032      	movs	r2, r6
 8004f04:	1a80      	subs	r0, r0, r2
 8004f06:	4199      	sbcs	r1, r3
 8004f08:	e01e      	b.n	8004f48 <__divdi3+0x168>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	4262      	negs	r2, r4
 8004f0e:	41ab      	sbcs	r3, r5
 8004f10:	0014      	movs	r4, r2
 8004f12:	001d      	movs	r5, r3
 8004f14:	2900      	cmp	r1, #0
 8004f16:	db8b      	blt.n	8004e30 <__divdi3+0x50>
 8004f18:	0006      	movs	r6, r0
 8004f1a:	000f      	movs	r7, r1
 8004f1c:	4299      	cmp	r1, r3
 8004f1e:	d900      	bls.n	8004f22 <__divdi3+0x142>
 8004f20:	e771      	b.n	8004e06 <__divdi3+0x26>
 8004f22:	d102      	bne.n	8004f2a <__divdi3+0x14a>
 8004f24:	4290      	cmp	r0, r2
 8004f26:	d900      	bls.n	8004f2a <__divdi3+0x14a>
 8004f28:	e76d      	b.n	8004e06 <__divdi3+0x26>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	425b      	negs	r3, r3
 8004f2e:	4699      	mov	r9, r3
 8004f30:	e788      	b.n	8004e44 <__divdi3+0x64>
 8004f32:	42a1      	cmp	r1, r4
 8004f34:	d9a0      	bls.n	8004e78 <__divdi3+0x98>
 8004f36:	2100      	movs	r1, #0
 8004f38:	2000      	movs	r0, #0
 8004f3a:	9000      	str	r0, [sp, #0]
 8004f3c:	9101      	str	r1, [sp, #4]
 8004f3e:	4641      	mov	r1, r8
 8004f40:	2900      	cmp	r1, #0
 8004f42:	d1ae      	bne.n	8004ea2 <__divdi3+0xc2>
 8004f44:	9800      	ldr	r0, [sp, #0]
 8004f46:	9901      	ldr	r1, [sp, #4]
 8004f48:	464b      	mov	r3, r9
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d100      	bne.n	8004f50 <__divdi3+0x170>
 8004f4e:	e75c      	b.n	8004e0a <__divdi3+0x2a>
 8004f50:	0003      	movs	r3, r0
 8004f52:	000c      	movs	r4, r1
 8004f54:	2100      	movs	r1, #0
 8004f56:	4258      	negs	r0, r3
 8004f58:	41a1      	sbcs	r1, r4
 8004f5a:	e756      	b.n	8004e0a <__divdi3+0x2a>
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	0038      	movs	r0, r7
 8004f60:	469a      	mov	sl, r3
 8004f62:	2320      	movs	r3, #32
 8004f64:	0031      	movs	r1, r6
 8004f66:	4090      	lsls	r0, r2
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	40d9      	lsrs	r1, r3
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	e77b      	b.n	8004e6a <__divdi3+0x8a>
 8004f72:	42a6      	cmp	r6, r4
 8004f74:	d800      	bhi.n	8004f78 <__divdi3+0x198>
 8004f76:	e763      	b.n	8004e40 <__divdi3+0x60>
 8004f78:	e745      	b.n	8004e06 <__divdi3+0x26>
 8004f7a:	4642      	mov	r2, r8
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	002a      	movs	r2, r5
 8004f82:	409a      	lsls	r2, r3
 8004f84:	0026      	movs	r6, r4
 8004f86:	0013      	movs	r3, r2
 8004f88:	4642      	mov	r2, r8
 8004f8a:	40d6      	lsrs	r6, r2
 8004f8c:	002c      	movs	r4, r5
 8004f8e:	431e      	orrs	r6, r3
 8004f90:	4643      	mov	r3, r8
 8004f92:	40dc      	lsrs	r4, r3
 8004f94:	4653      	mov	r3, sl
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	daae      	bge.n	8004ef8 <__divdi3+0x118>
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	0035      	movs	r5, r6
 8004fa0:	4094      	lsls	r4, r2
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	40dd      	lsrs	r5, r3
 8004fa6:	0023      	movs	r3, r4
 8004fa8:	432b      	orrs	r3, r5
 8004faa:	e7a8      	b.n	8004efe <__divdi3+0x11e>
 8004fac:	4641      	mov	r1, r8
 8004fae:	2620      	movs	r6, #32
 8004fb0:	2701      	movs	r7, #1
 8004fb2:	1a76      	subs	r6, r6, r1
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	40f7      	lsrs	r7, r6
 8004fba:	9000      	str	r0, [sp, #0]
 8004fbc:	9101      	str	r1, [sp, #4]
 8004fbe:	9701      	str	r7, [sp, #4]
 8004fc0:	e768      	b.n	8004e94 <__divdi3+0xb4>
 8004fc2:	46c0      	nop			@ (mov r8, r8)

08004fc4 <memcpy>:
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	b510      	push	{r4, lr}
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d100      	bne.n	8004fce <memcpy+0xa>
 8004fcc:	bd10      	pop	{r4, pc}
 8004fce:	5ccc      	ldrb	r4, [r1, r3]
 8004fd0:	54c4      	strb	r4, [r0, r3]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	e7f8      	b.n	8004fc8 <memcpy+0x4>
	...

08004fd8 <_init>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr

08004fe4 <_fini>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fea:	bc08      	pop	{r3}
 8004fec:	469e      	mov	lr, r3
 8004fee:	4770      	bx	lr
